============================= test session starts ==============================
platform linux -- Python 3.10.8, pytest-8.3.4, pluggy-1.5.0
PyQt5 5.15.11 -- Qt runtime 5.15.16 -- Qt compiled 5.15.14
rootdir: /home/pandas
configfile: pyproject.toml
plugins: xdist-3.6.1, qt-4.4.0, hypothesis-6.127.2, localserver-0.9.0.post0, anyio-4.8.0, cython-0.3.1, cov-6.0.0
collected 236753 items / 4088 deselected / 232665 selected

pandas/tests/api/test_api.py ..............
pandas/tests/api/test_types.py ..
pandas/tests/apply/test_frame_apply.py .x.............................................ss........ss............................................................s..............................................x.x.x.x..............................................xxx.x...........x.s..x...........
pandas/tests/apply/test_frame_apply_relabeling.py ..x..
pandas/tests/apply/test_frame_transform.py ...s.s.s................................................ss..ss..ss.....x........x........x........
pandas/tests/apply/test_invalid_arg.py ....................................................................................................................................................................................
pandas/tests/apply/test_numba.py sssssssssssssssssss
pandas/tests/apply/test_series_apply.py ..............................x.....x...x........................................................................................
pandas/tests/apply/test_series_apply_relabeling.py ..
pandas/tests/apply/test_series_transform.py ............
pandas/tests/apply/test_str.py .................................................................................................................................................................................................................x..........x........
pandas/tests/arithmetic/test_array_ops.py ..
pandas/tests/arithmetic/test_categorical.py ..
pandas/tests/arithmetic/test_datetime64.pys..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s
pandas/tests/arithmetic/test_interval.py
pandas/tests/arithmetic/test_numeric.pyss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......ss......sss..s.....s..s...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/arithmetic/test_object.py ...................................................................................................
pandas/tests/arithmetic/test_period.py
pandas/tests/arithmetic/test_timedelta64.py .................................................................................................................................................................................................................................................................................................................................................s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s.....s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s.....s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s.....s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s..s
pandas/tests/arrays/boolean/test_arithmetic.py .....................
pandas/tests/arrays/boolean/test_astype.py ...
pandas/tests/arrays/boolean/test_comparison.py ....................................
pandas/tests/arrays/boolean/test_construction.py .............................
pandas/tests/arrays/boolean/test_function.py ...........
pandas/tests/arrays/boolean/test_indexing.py ...
pandas/tests/arrays/boolean/test_logical.py .........................................................................................
pandas/tests/arrays/boolean/test_ops.py ..
pandas/tests/arrays/boolean/test_reduction.py ..............................
pandas/tests/arrays/boolean/test_repr.py .
pandas/tests/arrays/categorical/test_algos.py .................
pandas/tests/arrays/categorical/test_analytics.py ........x..x................................................
pandas/tests/arrays/categorical/test_api.py .............................................................................
pandas/tests/arrays/categorical/test_astype.py .........................
pandas/tests/arrays/categorical/test_constructors.py .............................................................................................................................
pandas/tests/arrays/categorical/test_dtypes.py ...............................................
pandas/tests/arrays/categorical/test_indexing.py ...............................................................................................................................................
pandas/tests/arrays/categorical/test_map.py ............................
pandas/tests/arrays/categorical/test_missing.py ..............
pandas/tests/arrays/categorical/test_operators.py ......................................
pandas/tests/arrays/categorical/test_replace.py .........
pandas/tests/arrays/categorical/test_repr.py .......................
pandas/tests/arrays/categorical/test_sorting.py ....
pandas/tests/arrays/categorical/test_subclass.py ...
pandas/tests/arrays/categorical/test_take.py ................
pandas/tests/arrays/categorical/test_warnings.py .
pandas/tests/arrays/datetimes/test_constructors.py .............................
pandas/tests/arrays/datetimes/test_cumulative.py ...
pandas/tests/arrays/datetimes/test_reductions.py .................................................................................................................................................................................................................
pandas/tests/arrays/floating/test_arithmetic.py ..............................................................
pandas/tests/arrays/floating/test_astype.py .........
pandas/tests/arrays/floating/test_comparison.py ..................................................................................................................
pandas/tests/arrays/floating/test_concat.py ...
pandas/tests/arrays/floating/test_construction.py ...............................
pandas/tests/arrays/floating/test_contains.py .
pandas/tests/arrays/floating/test_function.py ....................................................
pandas/tests/arrays/floating/test_repr.py ........
pandas/tests/arrays/floating/test_to_numpy.py ..............................
pandas/tests/arrays/integer/test_arithmetic.py ...................................................................................................................................................................................................................................................................................................................................................
pandas/tests/arrays/integer/test_comparison.py .........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/arrays/integer/test_concat.py ..................
pandas/tests/arrays/integer/test_construction.py ...............................................
pandas/tests/arrays/integer/test_dtypes.py .........................................................................................................................
pandas/tests/arrays/integer/test_function.py .............................................................................................................................
pandas/tests/arrays/integer/test_indexing.py ..
pandas/tests/arrays/integer/test_reduction.py ...............................................
pandas/tests/arrays/integer/test_repr.py ..........................
pandas/tests/arrays/interval/test_astype.py ..
pandas/tests/arrays/interval/test_formats.py .
pandas/tests/arrays/interval/test_interval.py ..............................................................................
pandas/tests/arrays/interval/test_interval_pyarrow.py ........
pandas/tests/arrays/interval/test_overlaps.py ....................................................................................................................
pandas/tests/arrays/masked/test_arithmetic.py ..............................................................................................................................................ss........................................................................................................................................................ss........................................................................................................................................................ss........................................................................................................................................................ss........................................................................................................................................................ss...............................................................................................................................................................................................................................................................................................................................................................
pandas/tests/arrays/masked/test_arrow_compat.py ...........................................................................................
pandas/tests/arrays/masked/test_function.py .....................
pandas/tests/arrays/masked/test_indexing.py ...........................................................................................................
pandas/tests/arrays/numpy_/test_indexing.py .......................................
pandas/tests/arrays/numpy_/test_numpy.py .......................................................................................
pandas/tests/arrays/period/test_arrow_compat.py .xx....
pandas/tests/arrays/period/test_astype.py ..........
pandas/tests/arrays/period/test_constructors.py ....................
pandas/tests/arrays/period/test_reductions.py ...
pandas/tests/arrays/sparse/test_accessor.py .............................................................................
pandas/tests/arrays/sparse/test_arithmetics.py
pandas/tests/arrays/sparse/test_array.py ............................................................................
pandas/tests/arrays/sparse/test_astype.py ........................
pandas/tests/arrays/sparse/test_combine_concat.py ..........
pandas/tests/arrays/sparse/test_constructors.py .................................
pandas/tests/arrays/sparse/test_dtype.py ........................................................
pandas/tests/arrays/sparse/test_indexing.py ................................................................................
pandas/tests/arrays/sparse/test_libsparse.py .....................................................................................
pandas/tests/arrays/sparse/test_reductions.py .......................................................................
pandas/tests/arrays/sparse/test_unary.py .........
pandas/tests/arrays/string_/test_concat.py ..............
pandas/tests/arrays/string_/test_string.py ...............................xx.........xxxxxxxx...................................................................................................................................................................................xx..xx..........................................ss..............................................................................
pandas/tests/arrays/string_/test_string_arrow.py ....s.............s..................................
pandas/tests/arrays/test_array.py ...........................................................................................
pandas/tests/arrays/test_datetimelike.py
pandas/tests/arrays/test_datetimes.py
pandas/tests/arrays/test_ndarray_backed.py .....
pandas/tests/arrays/test_period.py ...................
pandas/tests/arrays/test_timedeltas.py ..........................................................................................................................................................
pandas/tests/arrays/timedeltas/test_constructors.py ....
pandas/tests/arrays/timedeltas/test_cumulative.py .....
pandas/tests/arrays/timedeltas/test_reductions.py ..........................
pandas/tests/base/test_constructors.py ...........................
pandas/tests/base/test_conversion.py .............................................................................................................................................................................................................................................................................................................................
pandas/tests/base/test_fillna.py ........................................................................................ssssssssssssssssss....ssss........ssssssssss......ss..................................................ss........................ssssssssssss
pandas/tests/base/test_misc.py ......................................................................................................................................................................................................................................................xx...xxx........................................................................s.......
pandas/tests/base/test_transpose.py ..........................................................................................................................................................................................................................................
pandas/tests/base/test_unique.py ........................................................................................ssssssssssssssssss....ssss........ssssssssss......ss..................................................ss........................ssssssssssss........................................................................................ssssssssssssssssss....ssss..........ssssssss......ss............................................................................ssssssssssss....
pandas/tests/base/test_value_counts.py ........................................................................................ssssssssssssssssss....ssss........ssssssssss......ss..................................................ss........................ssssssssssss.........................
pandas/tests/computation/test_compat.py .....
pandas/tests/computation/test_eval.pyxx..............................xx..............................xx..............................xxxxxxxxxxxx..................................................xxxxxxxxxxx.......................................................................................................................................................................................................................................................................................................xx..xx......
pandas/tests/config/test_config.py .....................
pandas/tests/config/test_localization.py .............................
pandas/tests/construction/test_extract_array.py .
pandas/tests/copy_view/index/test_datetimeindex.py ......
pandas/tests/copy_view/index/test_index.py .....................
pandas/tests/copy_view/index/test_periodindex.py ..
pandas/tests/copy_view/index/test_timedeltaindex.py ..
pandas/tests/copy_view/test_array.py ..............
pandas/tests/copy_view/test_astype.py ..................................
pandas/tests/copy_view/test_chained_assignment_deprecation.py ........
pandas/tests/copy_view/test_clip.py ......
pandas/tests/copy_view/test_constructors.py ...........................................................
pandas/tests/copy_view/test_copy_deprecation.py ...............
pandas/tests/copy_view/test_core_functionalities.py ...x...
pandas/tests/copy_view/test_functions.py ................
pandas/tests/copy_view/test_indexing.py ....................................................................................s.....s........................................................................................................................................
pandas/tests/copy_view/test_internals.py ..................
pandas/tests/copy_view/test_interp_fillna.py ........................................................................
pandas/tests/copy_view/test_methods.py .........................................................................................................................................................................................................................................
pandas/tests/copy_view/test_replace.py ....................................
pandas/tests/copy_view/test_setitem.py .........
pandas/tests/copy_view/test_util.py ..
pandas/tests/dtypes/cast/test_can_hold_element.py ...........
pandas/tests/dtypes/cast/test_construct_from_scalar.py ....
pandas/tests/dtypes/cast/test_construct_ndarray.py .......
pandas/tests/dtypes/cast/test_construct_object_arr.py .......................................
pandas/tests/dtypes/cast/test_dict_compat.py .
pandas/tests/dtypes/cast/test_downcast.py ...................................
pandas/tests/dtypes/cast/test_find_common_type.py ..........................................................................................
pandas/tests/dtypes/cast/test_infer_datetimelike.py ...
pandas/tests/dtypes/cast/test_infer_dtype.py ....................................................................
pandas/tests/dtypes/cast/test_maybe_box_native.py ................
pandas/tests/dtypes/cast/test_promote.py
pandas/tests/dtypes/test_common.py .......................................................................................................................................................................................................................................................................................................................................................................................................................................................s
pandas/tests/dtypes/test_concat.py ....
pandas/tests/dtypes/test_dtypes.py .............................................................................................................................................................................................................................................................................................
pandas/tests/dtypes/test_generic.py ....................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/dtypes/test_inference.py
pandas/tests/dtypes/test_missing.py .........................................................................................................xxxx.......................................................................................................................................................................................................
pandas/tests/extension/array_with_attr/test_array_with_attr.py .
pandas/tests/extension/decimal/test_decimal.py ssssssssssssssssssssssssssssssssssss..........................................x................................................................................................................................................................................................................................................................................................................................................xx.........................................................................................xxxxxxxxss..............xxssxxss....................................xxx.....................
pandas/tests/extension/json/test_json.py ssssssssssssssssssssssssssssssssssss.......................................................................................ssssssssssssssssssssssss.............................................s......................................................s....................................................ss.................................................................................xx....................................................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.xx........xxxxxxxxxxxxsxxxxxxxxxxxxxxxxxxxxxx....xxxxxxx.xx.xxxxxx...xxxxx...x...xxxxxxxxxxxx.
pandas/tests/extension/list/test_list.py .
pandas/tests/extension/test_arrow.py ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssx...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...x...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx......x...x...x...x...xxxx...........xx............................................................................................................................x.....................................................................................................xx......................................................................................................................................................................................................................................................................xxxx............................................................................xxxx......................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss........................ssssssssssssssssssssssssssssssssssssssssssssss................................................................................................................................................................................................ssss............................................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssss........................ssss..........x.........................................ss......................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssss......................ssss....................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss......................ssss..........x.........................................ss..................................................................................................................................x.......................................x...............................................................................x.xxxxxxx.xxx.xxx.xxx.xxx.............................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx........................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx........................................xxxx....xxxx........................................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx............................xxx.xxxxxxxxxxxxxxxxxxxxxxxxxxx.x.x.x.x...............ssss...........................................................................................................................................................................................xxxx....................................xxxx..........................................................................................................................................xxxx.xxxxxxxx..x........................xxxx....................................xxxx...........x........................xxxx.........................................xxxxxxxxxxx................................................................................ss........................................................................................................................xxxx....................................xxxx..........................................................................................................................................xxxx.xxxxxxxx..x........................xxxx....................................xxxx...........x........................xxxx.........................................xxxxxxxxxxx................................................................................ss...........................................................................................................xxxx.........xxxx.......................xxxx.........xxxx..........................................................................................................................................xxxx.xxxxxxxx..x........................xxxx....................................xxxx...........x........................xxxx.........................................xxxxxxxxxxx.................................................................................................................xssssssssssssssssssss.............................................................................................................................................................................................................................................................................................................................................................................................................................x......................................................................................................................................................................................................................................................................................................................xx.........xxxxxxxxxxxxxxxxxxxx.............................................................................................................................................................................................................................................................................................................................................
pandas/tests/extension/test_categorical.py ssssssssssssssssssssssssssssssssssss..........................................x..................................................................................................ssssssssssssssssssssssss...................................s...............................................................................................................................ss...................................................................................................xx..........................................................................s................x.............xxxxxssssssssssssssssssssssssssssssssssss..
pandas/tests/extension/test_common.py ............
pandas/tests/extension/test_datetime.py ........................ssss..................................................x..............................................................................................ssss......ss..ss..ssssss.................................................................s........................................................................................................................................................................................xx...............................................xx........................................................................................................ssss.........
pandas/tests/extension/test_extension.py ..............
pandas/tests/extension/test_interval.py ssssssssssssssssssssssssssssssssssss..........................................x..................................................................................................ssss....ssssssssssssssss.................................................................s..............................................................................................................................ss...................................................................................................xx..........................................................................x...xx..
pandas/tests/extension/test_masked.py ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss....................................................................................................................................................................................................................................................................................................................................................................................................................................................................x...x...x...x...x...x...x...x...x...x...xssssssssssssssssssss..ssssssssssssssssssss..........................................................................................................................................................................................................................................................................ssssssssssssssssssssssxxxxxxxxxxxxxxxxxxxxxxs............................................................................................x...........sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss
pandas/tests/extension/test_numpy.py ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.......................................................x...xxxxx..........................................................................................................................................ss.x.x...x.x.x.x.x.x.x.xxx.x.x.............x.x.....................................................x.x................ssssssssssssssssssssssssssssssssssssssssssssssss.x.x.x.x.x..xx.x..xx..xx...xxx...xxx.x.x.x..............xx..xxssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss..
pandas/tests/extension/test_period.py ..........................................ssss........ssss.................................................................................................x...x..................................................................................................................................................................................................ssssssss........ssssssssssssssss....ssssssssssss..................................................................................................................................ss..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................xxxx......................................................................................................................................................................................................ssss........ssss................
pandas/tests/extension/test_sparse.py ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss..ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss....................................ssss..................................................................................................................................................................................................................................................................................................................................................................................................xxxx..........................ssss..............................................................xxxx..........................................................................................................................................xxxxxxxxxxxxxx...x.x.x.xxxxxxxxxxxxxxxss........xxxxxxxxxxxxxxss.x.x.x.xxxxxxxxxxxxxxx..........s.s.s.s.s.s...s.....xx..........xx............ss..ssssss................xxxxssssssssssssss..............ssssssssssssss..............xxxx.......x............................x..x.x......xx.xxx......xxxxxx.
pandas/tests/extension/test_string.py ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.........................................................................................................................................................................................................................................................................................................................................x...x...x...x...x...x...x...xssssssssssssssss................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss........................................................................................................................................................................................................................................ssssssss........................................................................................................ssssssss........ssssssssssssssssssssssssxxxxxxxxxxxxxxxx.........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................ss..ss..........ss..ss..ss..ss.........................................................................................................................................................................................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss................
pandas/tests/frame/constructors/test_from_dict.py ..............
pandas/tests/frame/constructors/test_from_records.py ...........................
pandas/tests/frame/indexing/test_coercion.py .......x.x.
pandas/tests/frame/indexing/test_delitem.py ....
pandas/tests/frame/indexing/test_get.py ....
pandas/tests/frame/indexing/test_get_value.py ..
pandas/tests/frame/indexing/test_getitem.py ........................................
pandas/tests/frame/indexing/test_indexing.py
pandas/tests/frame/indexing/test_insert.py ........
pandas/tests/frame/indexing/test_mask.py ...........
pandas/tests/frame/indexing/test_set_value.py ...
pandas/tests/frame/indexing/test_setitem.py .....................................................................................................................................................................................................xxx...........................X..X..X..X........
pandas/tests/frame/indexing/test_take.py ....
pandas/tests/frame/indexing/test_where.py ............................................................................................................................................
pandas/tests/frame/indexing/test_xs.py .................................
pandas/tests/frame/methods/test_add_prefix_suffix.py ...
pandas/tests/frame/methods/test_align.py .....................
pandas/tests/frame/methods/test_asfreq.py ............................................
pandas/tests/frame/methods/test_asof.py ..........
pandas/tests/frame/methods/test_assign.py .....
pandas/tests/frame/methods/test_astype.py ..............................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/frame/methods/test_at_time.py ......................
pandas/tests/frame/methods/test_between_time.py ..............................
pandas/tests/frame/methods/test_clip.py .....................
pandas/tests/frame/methods/test_combine.py .....
pandas/tests/frame/methods/test_combine_first.py ......................................................................
pandas/tests/frame/methods/test_compare.py ..........................
pandas/tests/frame/methods/test_convert_dtypes.py .................
pandas/tests/frame/methods/test_copy.py ....
pandas/tests/frame/methods/test_count.py ..
pandas/tests/frame/methods/test_cov_corr.py .............................................................................
pandas/tests/frame/methods/test_describe.py ................................................
pandas/tests/frame/methods/test_diff.py ..............................................
pandas/tests/frame/methods/test_dot.py ...................
pandas/tests/frame/methods/test_drop.py ..........................................................................
pandas/tests/frame/methods/test_drop_duplicates.py ......................................
pandas/tests/frame/methods/test_droplevel.py ..
pandas/tests/frame/methods/test_dropna.py ...................
pandas/tests/frame/methods/test_dtypes.py ........
pandas/tests/frame/methods/test_duplicated.py .......xxx...........
pandas/tests/frame/methods/test_equals.py ...
pandas/tests/frame/methods/test_explode.py ....................
pandas/tests/frame/methods/test_fillna.py .............................................................
pandas/tests/frame/methods/test_filter.py .........
pandas/tests/frame/methods/test_first_valid_index.py ...............
pandas/tests/frame/methods/test_get_numeric_data.py ....
pandas/tests/frame/methods/test_head_tail.py ......................................................................
pandas/tests/frame/methods/test_infer_objects.py .
pandas/tests/frame/methods/test_info.py ..........................x.............
pandas/tests/frame/methods/test_interpolate.py ............................................................................
pandas/tests/frame/methods/test_is_homogeneous_dtype.py .......
pandas/tests/frame/methods/test_isetitem.py ...
pandas/tests/frame/methods/test_isin.py .................
pandas/tests/frame/methods/test_iterrows.py .
pandas/tests/frame/methods/test_join.py ...............................
pandas/tests/frame/methods/test_map.py ...........................
pandas/tests/frame/methods/test_matmul.py ..
pandas/tests/frame/methods/test_nlargest.py .........................................................................................................................................................................................................................................................X.....X.....X.....X.......X.....
pandas/tests/frame/methods/test_pct_change.py ............
pandas/tests/frame/methods/test_pipe.py ......
pandas/tests/frame/methods/test_pop.py ...
pandas/tests/frame/methods/test_quantile.py ........................................................................xx..........xx..........xx..........xx...................
pandas/tests/frame/methods/test_rank.py .............................................................................................................................
pandas/tests/frame/methods/test_reindex.py .............................................................................................................................................
pandas/tests/frame/methods/test_reindex_like.py .....
pandas/tests/frame/methods/test_rename.py .........................
pandas/tests/frame/methods/test_rename_axis.py .........
pandas/tests/frame/methods/test_reorder_levels.py ...
pandas/tests/frame/methods/test_replace.py .............................................................................................................................................................................................................................
pandas/tests/frame/methods/test_reset_index.py ..................................................................................................................................
pandas/tests/frame/methods/test_round.py .........
pandas/tests/frame/methods/test_sample.py ..........................................................
pandas/tests/frame/methods/test_select_dtypes.py .........................................
pandas/tests/frame/methods/test_set_axis.py ..............
pandas/tests/frame/methods/test_set_index.py .................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/frame/methods/test_shift.py ...................................................................................x.x.x.x.x.xxxx..........
pandas/tests/frame/methods/test_size.py .....
pandas/tests/frame/methods/test_sort_index.py .................................................................
pandas/tests/frame/methods/test_sort_values.py ...................................................X...............................XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX...
pandas/tests/frame/methods/test_swaplevel.py .
pandas/tests/frame/methods/test_to_csv.py ...................................................................................
pandas/tests/frame/methods/test_to_dict.py ......................................................................................................
pandas/tests/frame/methods/test_to_dict_of_blocks.py ...
pandas/tests/frame/methods/test_to_numpy.py ....
pandas/tests/frame/methods/test_to_period.py ..........................................................................
pandas/tests/frame/methods/test_to_records.py ...................................
pandas/tests/frame/methods/test_to_timestamp.py ..........................................................................
pandas/tests/frame/methods/test_transpose.py ...................
pandas/tests/frame/methods/test_truncate.py ........................................................................................
pandas/tests/frame/methods/test_tz_convert.py ...........
pandas/tests/frame/methods/test_tz_localize.py .......
pandas/tests/frame/methods/test_update.py ..........................
pandas/tests/frame/methods/test_value_counts.py .................................
pandas/tests/frame/methods/test_values.py ...............
pandas/tests/frame/test_alter_axes.py ..
pandas/tests/frame/test_api.py ..................................
pandas/tests/frame/test_arithmetic.pyx..........x....................................................................................................................................
pandas/tests/frame/test_arrow_interface.py ..
pandas/tests/frame/test_block_internals.py ......................
pandas/tests/frame/test_constructors.py .......................................................................................................................................................................................................................................................................................................................................................................................................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss..............................ssssss................ssss...................................................................................s............................................................xxxx..xx................................
pandas/tests/frame/test_cumulative.py ...............
pandas/tests/frame/test_iteration.py ....................
pandas/tests/frame/test_logical_ops.py .................
pandas/tests/frame/test_nonunique_indexes.py ................
pandas/tests/frame/test_npfuncs.py ....
pandas/tests/frame/test_query_eval.py ......................s.s.......xx....ss..ss..ss.......................s.......................s..s......sssss.................................................s........................s..s.....sssss...............................................ss..ss......................ss.............................................................................................................................
pandas/tests/frame/test_reductions.pyx.............x
pandas/tests/frame/test_repr.py ..............................................................
pandas/tests/frame/test_stack_unstack.py
pandas/tests/frame/test_subclass.py .....................................................
pandas/tests/frame/test_ufunc.py ....xx.........xxxxxxxx.xx......
pandas/tests/frame/test_unary.py ..................
pandas/tests/frame/test_validate.py ............................
pandas/tests/generic/test_duplicate_labels.py ..........xx..................xx.xxx................x................
pandas/tests/generic/test_finalize.py ..........................x.................................x........x..............................................................................................................xs..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x.s..s...s..s..x..x.x...x.s..s...s..s.x..x..x...x........................................................................................xxxxxxxxx..........xxxxxxxxxxxx.
pandas/tests/generic/test_frame.py ...............
pandas/tests/generic/test_generic.py ...............................................................................
pandas/tests/generic/test_label_or_level_utils.py .......................................................................
pandas/tests/generic/test_series.py ................
pandas/tests/generic/test_to_xarray.py .......................s..........................................
pandas/tests/groupby/aggregate/test_aggregate.py ....................................................................................................................................................................................................................................................................................................................................................x..x......................................................................x............
pandas/tests/groupby/aggregate/test_cython.py .......................................................................................................................................................................
pandas/tests/groupby/aggregate/test_numba.py ......................................x............................
pandas/tests/groupby/aggregate/test_other.py ........................................
pandas/tests/groupby/methods/test_describe.py .........................
pandas/tests/groupby/methods/test_groupby_shift_diff.py ...............................................
pandas/tests/groupby/methods/test_is_monotonic.py ......
pandas/tests/groupby/methods/test_kurt.py .....
pandas/tests/groupby/methods/test_nlargest_nsmallest.py ...........................................
pandas/tests/groupby/methods/test_nth.py ...........................................................................................................................................................................................................
pandas/tests/groupby/methods/test_quantile.py .................................................................................................................................................................................................................................................................................................................................
pandas/tests/groupby/methods/test_rank.py
pandas/tests/groupby/methods/test_sample.py ..............
pandas/tests/groupby/methods/test_size.py ......................
pandas/tests/groupby/methods/test_skew.py .
pandas/tests/groupby/methods/test_value_counts.py ..........X......XXX...XXX...........................XXX...XXX.......................................................XX..........................XXXXXXXXXXXXXXXX........XXXXXXXX..............................................
pandas/tests/groupby/test_all_methods.py ......................................xx................................................................................................ss..........ss............ss......
pandas/tests/groupby/test_api.py ......s...s.............................s...s.........................
pandas/tests/groupby/test_apply.py ........................................................................................................................................
pandas/tests/groupby/test_bin_groupby.py ......
pandas/tests/groupby/test_categorical.py .................................................................................................................................................xss.ss.ss.ssxsxxsx.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ssxsxxsx.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ssxsxxsx.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ssxsxxsx.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss.ss......................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................s........s........s........s........s........s........s........s...ss.sssss.ss.sssss.ss.sssss.ss.sssss.ss.sssss.ss.sssss.ss.sssss.ss.sssss...................ss.ss.ss.ss.ss.ss........sxsx....................................................................................sxsx....................................................................................sxsx....................................................................................sxsx............................................................................
pandas/tests/groupby/test_counting.py ........................................
pandas/tests/groupby/test_cumulative.py ..................................................................................
pandas/tests/groupby/test_filters.py ................................
pandas/tests/groupby/test_groupby.py ................................s
pandas/tests/groupby/test_groupby_dropna.py
pandas/tests/groupby/test_groupby_subclass.py .....s.................................................................
pandas/tests/groupby/test_grouping.py ..................................................................................
pandas/tests/groupby/test_index_as_string.py ..................
pandas/tests/groupby/test_indexing.py ...........................................................................................................................................................................
pandas/tests/groupby/test_libgroupby.py ...........................
pandas/tests/groupby/test_missing.py .....................
pandas/tests/groupby/test_numba.py ................................................................................................................................................
pandas/tests/groupby/test_numeric_only.py ..............................................................................................................................................................................................................................................................................................................................................
pandas/tests/groupby/test_pipe.py ..
pandas/tests/groupby/test_raises.py .....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/groupby/test_reductions.py
pandas/tests/groupby/test_timegrouper.py ...............................
pandas/tests/groupby/transform/test_numba.py ................................................................................
pandas/tests/groupby/transform/test_transform.py ..........................................................................................................x.x.x.x......................................................................................x.....................x.....................................................................................................................................................................................................................
pandas/tests/indexes/base_class/test_constructors.py ...........
pandas/tests/indexes/base_class/test_formats.py .............
pandas/tests/indexes/base_class/test_indexing.py ............
pandas/tests/indexes/base_class/test_pickle.py .
pandas/tests/indexes/base_class/test_reshape.py ......................
pandas/tests/indexes/base_class/test_setops.py ............................................................
pandas/tests/indexes/base_class/test_where.py .
pandas/tests/indexes/categorical/test_append.py .......
pandas/tests/indexes/categorical/test_astype.py ...........
pandas/tests/indexes/categorical/test_category.py ..........................................
pandas/tests/indexes/categorical/test_constructors.py .....
pandas/tests/indexes/categorical/test_equals.py .........
pandas/tests/indexes/categorical/test_fillna.py ...
pandas/tests/indexes/categorical/test_formats.py .
pandas/tests/indexes/categorical/test_indexing.py .................................
pandas/tests/indexes/categorical/test_map.py .....................
pandas/tests/indexes/categorical/test_reindex.py .......
pandas/tests/indexes/categorical/test_setops.py ..
pandas/tests/indexes/datetimelike_/test_drop_duplicates.py ................................................................................................................
pandas/tests/indexes/datetimelike_/test_equals.py .....................
pandas/tests/indexes/datetimelike_/test_indexing.py ................
pandas/tests/indexes/datetimelike_/test_is_monotonic.py .
pandas/tests/indexes/datetimelike_/test_nat.py ....
pandas/tests/indexes/datetimelike_/test_sort_values.py ...............................................................
pandas/tests/indexes/datetimelike_/test_value_counts.py ............................................
pandas/tests/indexes/datetimes/methods/test_asof.py ..
pandas/tests/indexes/datetimes/methods/test_astype.py .................................
pandas/tests/indexes/datetimes/methods/test_delete.py .......................
pandas/tests/indexes/datetimes/methods/test_factorize.py ....................................................................................
pandas/tests/indexes/datetimes/methods/test_fillna.py ..
pandas/tests/indexes/datetimes/methods/test_insert.py .........................................................................................................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_isocalendar.py ..
pandas/tests/indexes/datetimes/methods/test_map.py .....
pandas/tests/indexes/datetimes/methods/test_normalize.py .........
pandas/tests/indexes/datetimes/methods/test_repeat.py ....................................................................................................................................................................................................................................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_resolution.py ....................................................................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_round.py ......................................................................................................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_shift.py ............................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_snap.py ........................
pandas/tests/indexes/datetimes/methods/test_to_frame.py ..
pandas/tests/indexes/datetimes/methods/test_to_julian_date.py .....
pandas/tests/indexes/datetimes/methods/test_to_period.py ............................................
pandas/tests/indexes/datetimes/methods/test_to_pydatetime.py ..
pandas/tests/indexes/datetimes/methods/test_to_series.py .
pandas/tests/indexes/datetimes/methods/test_tz_convert.py ....................................
pandas/tests/indexes/datetimes/methods/test_tz_localize.py .................................................................................................................................................
pandas/tests/indexes/datetimes/methods/test_unique.py ........................
pandas/tests/indexes/datetimes/test_arithmetic.py .....................x
pandas/tests/indexes/datetimes/test_constructors.py ................................................................................................................................................................................................................x...x...X................................
pandas/tests/indexes/datetimes/test_date_range.py ..........................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/indexes/datetimes/test_datetime.py ......................
pandas/tests/indexes/datetimes/test_formats.py .................................
pandas/tests/indexes/datetimes/test_freq_attr.py ..........................
pandas/tests/indexes/datetimes/test_indexing.py ..........................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/indexes/datetimes/test_iter.py ............
pandas/tests/indexes/datetimes/test_join.py ......................
pandas/tests/indexes/datetimes/test_npfuncs.py .
pandas/tests/indexes/datetimes/test_ops.py ................
pandas/tests/indexes/datetimes/test_partial_slicing.py ..................................
pandas/tests/indexes/datetimes/test_pickle.py ......
pandas/tests/indexes/datetimes/test_reindex.py ..
pandas/tests/indexes/datetimes/test_scalar_compat.py ..............................................................................
pandas/tests/indexes/datetimes/test_setops.py ..................................................................................................................................
pandas/tests/indexes/datetimes/test_timezones.py ........................................
pandas/tests/indexes/interval/test_astype.py ....................................x...........................................................................................................................
pandas/tests/indexes/interval/test_constructors.py .......................................................................................................................................................................................................................................................s.......s.......s.......s.......s.......s.......s.......s...........s.................s.....s.....s.....s...............s.......s.......s.......s.......s.......s.......s.......s...........s.................s.....s.....s.....s..................................
pandas/tests/indexes/interval/test_equals.py ....
pandas/tests/indexes/interval/test_formats.py ...........
pandas/tests/indexes/interval/test_indexing.py ............................................................................................................................................................................................................................................................................................
pandas/tests/indexes/interval/test_interval.py .......x....x....x....x..................................................................................................................................................................................................................................
pandas/tests/indexes/interval/test_interval_range.py .............................................................................................................................................................
pandas/tests/indexes/interval/test_interval_tree.py ....................................................................................................................................................................................................................
pandas/tests/indexes/interval/test_join.py ...
pandas/tests/indexes/interval/test_pickle.py ....
pandas/tests/indexes/interval/test_setops.py .................................................................................
pandas/tests/indexes/multi/test_analytics.py ......................................
pandas/tests/indexes/multi/test_astype.py ...
pandas/tests/indexes/multi/test_compat.py ......
pandas/tests/indexes/multi/test_constructors.py ...................................................................................................
pandas/tests/indexes/multi/test_conversion.py ........
pandas/tests/indexes/multi/test_copy.py ..........
pandas/tests/indexes/multi/test_drop.py ..............
pandas/tests/indexes/multi/test_duplicates.py ...................................................
pandas/tests/indexes/multi/test_equivalence.py ..............
pandas/tests/indexes/multi/test_formats.py ..........
pandas/tests/indexes/multi/test_get_level_values.py ........
pandas/tests/indexes/multi/test_get_set.py ...................
pandas/tests/indexes/multi/test_indexing.py .............................................................................................................................................
pandas/tests/indexes/multi/test_integrity.py ................
pandas/tests/indexes/multi/test_isin.py ..............
pandas/tests/indexes/multi/test_join.py .......................................................
pandas/tests/indexes/multi/test_lexsort.py ..
pandas/tests/indexes/multi/test_missing.py ...x..
pandas/tests/indexes/multi/test_monotonic.py ...........
pandas/tests/indexes/multi/test_names.py ...............................
pandas/tests/indexes/multi/test_partial_indexing.py .....
pandas/tests/indexes/multi/test_pickle.py .
pandas/tests/indexes/multi/test_reindex.py ............
pandas/tests/indexes/multi/test_reshape.py ...........
pandas/tests/indexes/multi/test_setops.py .............................................................................................................................................................................................................sss....................................................................
pandas/tests/indexes/multi/test_sorting.py ...........................
pandas/tests/indexes/multi/test_take.py ...
pandas/tests/indexes/multi/test_util.py ...............
pandas/tests/indexes/numeric/test_astype.py ...................
pandas/tests/indexes/numeric/test_indexing.py ................................................................................................................................................................................................................................................................
pandas/tests/indexes/numeric/test_join.py ...........
pandas/tests/indexes/numeric/test_numeric.py ....................................................................................................................
pandas/tests/indexes/numeric/test_setops.py ....................
pandas/tests/indexes/object/test_astype.py .
pandas/tests/indexes/object/test_indexing.py
pandas/tests/indexes/period/methods/test_asfreq.py ...............
pandas/tests/indexes/period/methods/test_astype.py .............
pandas/tests/indexes/period/methods/test_factorize.py ..
pandas/tests/indexes/period/methods/test_fillna.py .
pandas/tests/indexes/period/methods/test_insert.py ...
pandas/tests/indexes/period/methods/test_is_full.py .
pandas/tests/indexes/period/methods/test_repeat.py ......
pandas/tests/indexes/period/methods/test_shift.py ......
pandas/tests/indexes/period/methods/test_to_timestamp.py .........
pandas/tests/indexes/period/test_constructors.py .........................................................................................................
pandas/tests/indexes/period/test_formats.py .....
pandas/tests/indexes/period/test_freq_attr.py .
pandas/tests/indexes/period/test_indexing.py .........................................................................
pandas/tests/indexes/period/test_join.py ...........
pandas/tests/indexes/period/test_monotonic.py ..
pandas/tests/indexes/period/test_partial_slicing.py ..............
pandas/tests/indexes/period/test_period.py ....................................................................................................................................
pandas/tests/indexes/period/test_period_range.py ...........................
pandas/tests/indexes/period/test_pickle.py ....
pandas/tests/indexes/period/test_resolution.py .........
pandas/tests/indexes/period/test_scalar_compat.py ...
pandas/tests/indexes/period/test_searchsorted.py ........
pandas/tests/indexes/period/test_setops.py ..............
pandas/tests/indexes/period/test_tools.py ............
pandas/tests/indexes/ranges/test_constructors.py .............................
pandas/tests/indexes/ranges/test_indexing.py ...............
pandas/tests/indexes/ranges/test_join.py ..........................................
pandas/tests/indexes/ranges/test_range.py ................................................................................................................................................................................................................
pandas/tests/indexes/ranges/test_setops.py ...................................................................
pandas/tests/indexes/string/test_astype.py .
pandas/tests/indexes/string/test_indexing.py .................................................................................................................................................................................................................................
pandas/tests/indexes/test_any_index.py ...........................................................................................s
pandas/tests/indexes/test_base.py ...........................................................................................................................................................................x...............................................................................ssss....ss..........ss......ss.........................................................................................................................ssss
pandas/tests/indexes/test_common.py .........................................................................................................................................................................................................................xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx..................................................................................................................................sssssssss...s....ss............................xs.........................sss................................................sss............................................................................................s................s....................................................................................................................................................................................................................................................................................................XX..................................................
pandas/tests/indexes/test_datetimelike.py ........................................
pandas/tests/indexes/test_engines.py .........................................
pandas/tests/indexes/test_frozen.py ..........
pandas/tests/indexes/test_index_new.py ............................................xxxxssss................................................................................................................
pandas/tests/indexes/test_indexing.py .........................................................ss.................................s...................................................................................................................................................................................................................................................................................................................................................................................s.........................
pandas/tests/indexes/test_numpy_compat.pyss.......................
pandas/tests/indexes/test_old_base.py s...s...................sss.............................ssssssssss.s..........ss.................s.............s......s..............s..sss................................................................................................s..........................................................................ssssssss..s..sssssssss..s..sssssssss..s..sssssssss..s..sssssssss..s..s.......................s..................................................s................s................................s...............................sssssssss...s....s...sss......................................................................................................................ss......................ssssss.........................................................................................................................................................................s......................................................................s...s...........s...s...................................................................................s...s...
pandas/tests/indexes/test_setops.py ..........................................................................................................................................................................................................................................................................................................................................................................................................s...................................................................................................................................ss..s.s...s...sssss....ss..........ss......ss....................................................................................................................................................................................................................................................................................ssss....ss..........ss......ss...................................................................................................................................................................................................................................................................................s.............................................................................................................................................................................................................
pandas/tests/indexes/test_subclass.py .
pandas/tests/indexes/timedeltas/methods/test_astype.py ...............
pandas/tests/indexes/timedeltas/methods/test_factorize.py ..
pandas/tests/indexes/timedeltas/methods/test_fillna.py .
pandas/tests/indexes/timedeltas/methods/test_insert.py ...............
pandas/tests/indexes/timedeltas/methods/test_repeat.py .
pandas/tests/indexes/timedeltas/methods/test_shift.py ......
pandas/tests/indexes/timedeltas/test_arithmetic.py ...
pandas/tests/indexes/timedeltas/test_constructors.py ........................
pandas/tests/indexes/timedeltas/test_delete.py ...
pandas/tests/indexes/timedeltas/test_formats.py .....
pandas/tests/indexes/timedeltas/test_freq_attr.py ...........
pandas/tests/indexes/timedeltas/test_indexing.py ....................................
pandas/tests/indexes/timedeltas/test_join.py .......
pandas/tests/indexes/timedeltas/test_ops.py ..........
pandas/tests/indexes/timedeltas/test_pickle.py .
pandas/tests/indexes/timedeltas/test_scalar_compat.py ........
pandas/tests/indexes/timedeltas/test_searchsorted.py ........
pandas/tests/indexes/timedeltas/test_setops.py ................................
pandas/tests/indexes/timedeltas/test_timedelta.py ...
pandas/tests/indexes/timedeltas/test_timedelta_range.py .............................
pandas/tests/indexing/interval/test_interval.py ..............................
pandas/tests/indexing/interval/test_interval_new.py .....................
pandas/tests/indexing/multiindex/test_chaining_and_caching.py ....
pandas/tests/indexing/multiindex/test_datetime.py ..
pandas/tests/indexing/multiindex/test_getitem.py .............................................................................
pandas/tests/indexing/multiindex/test_iloc.py ................
pandas/tests/indexing/multiindex/test_indexing_slow.py ..........
pandas/tests/indexing/multiindex/test_loc.py ..............................................................................................................................................
pandas/tests/indexing/multiindex/test_multiindex.py .....................
pandas/tests/indexing/multiindex/test_partial.py .............
pandas/tests/indexing/multiindex/test_setitem.py ............................
pandas/tests/indexing/multiindex/test_slice.py .............................
pandas/tests/indexing/multiindex/test_sorted.py .........
pandas/tests/indexing/test_at.py .........................................
pandas/tests/indexing/test_categorical.py ..................................................................................................................
pandas/tests/indexing/test_chaining_and_caching.py ...........................
pandas/tests/indexing/test_check_indexer.py .........................
pandas/tests/indexing/test_coercion.py ..........xxxxxxx...............................................................xx............................................xxxx....x............................................................xxxxx..................xx............................................................................................................................................................................................................x
pandas/tests/indexing/test_datetime.py ...........
pandas/tests/indexing/test_floats.py ...............................................................................................................................................
pandas/tests/indexing/test_iat.py ...
pandas/tests/indexing/test_iloc.py ........................................................................................................................................................................................................................
pandas/tests/indexing/test_indexers.py ......
pandas/tests/indexing/test_indexing.py
pandas/tests/indexing/test_loc.pys............................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/indexing/test_na_indexing.py ..............................................................................................................................................................................................................................................................................
pandas/tests/indexing/test_partial.py ....................................
pandas/tests/indexing/test_scalar.py ......................................
pandas/tests/interchange/test_impl.py ...................................................................................
pandas/tests/interchange/test_spec_conformance.py ................
pandas/tests/interchange/test_utils.py ...............................................
pandas/tests/internals/test_api.py .............
pandas/tests/internals/test_internals.py ...................................................................................................................................................................................................................................................
pandas/tests/io/excel/test_odf.py .....
pandas/tests/io/excel/test_odswriter.py ..........
pandas/tests/io/excel/test_openpyxl.py ......................................................
pandas/tests/io/excel/test_readers.py sss......sss......sss...sss......sss.............................................................x............x..........................................xxxxxx....................................................................x............x.................................................................................................................................x.....x......x............x..........................................................s..s..s.s..s.s..s..s.s..s.s..s..s.s..s.s..s..s.s..s.s..s..s.s..s........................................ssssssssssssss..ssssssssss...............................................................................xx.xxx............x........................................................................................................................................EEEEEEEEEEEEEEEEEEEEEEEEEE................................x.....x......x..................xx.........................................................x............x..................................................................................................................................................................................................xs....s......xs....s.................................................................................................x............x..................................................................................................................................................................................................x.........................xs....s...sss.......
pandas/tests/io/excel/test_style.py .....................................................................................................................................E...
pandas/tests/io/excel/test_writers.py
pandas/tests/io/excel/test_xlrd.py .......
pandas/tests/io/excel/test_xlsxwriter.py .....
pandas/tests/io/formats/style/test_bar.py ...........................................................................................................................
pandas/tests/io/formats/style/test_exceptions.py ...
pandas/tests/io/formats/style/test_format.py ...............................................................................................................................
pandas/tests/io/formats/style/test_highlight.py ................................................................................................
pandas/tests/io/formats/style/test_html.py ...............................................................................................
pandas/tests/io/formats/style/test_matplotlib.py ...........................................................
pandas/tests/io/formats/style/test_non_unique.py .........
pandas/tests/io/formats/style/test_style.py .................................................................................................................................................................................................
pandas/tests/io/formats/style/test_to_latex.py ............................................................................................................................................................
pandas/tests/io/formats/style/test_to_string.py .....
pandas/tests/io/formats/style/test_to_typst.py ....
pandas/tests/io/formats/style/test_tooltip.py .......
pandas/tests/io/formats/test_console.py ...........
pandas/tests/io/formats/test_css.py .............................................................................................
pandas/tests/io/formats/test_eng_formatting.py .......
pandas/tests/io/formats/test_format.py ............................................................................................................................................................................................
pandas/tests/io/formats/test_ipython_compat.py F....
pandas/tests/io/formats/test_printing.py .................
pandas/tests/io/formats/test_to_csv.py ............................................................................................
pandas/tests/io/formats/test_to_excel.py ..........................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/io/formats/test_to_html.py ........................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/io/formats/test_to_latex.py ..............................................................................................
pandas/tests/io/formats/test_to_markdown.py ..........
pandas/tests/io/formats/test_to_string.py ..............................................................................................
pandas/tests/io/json/test_compression.py ...............................................................................
pandas/tests/io/json/test_deprecated_kwargs.py .
pandas/tests/io/json/test_json_table_schema.py ..........................................................................................x...x...x...x...x...x...x...x...x...x......x...x...x...x...x...x...x...x...x...x...........................
pandas/tests/io/json/test_json_table_schema_ext_dtype.py ....................
pandas/tests/io/json/test_normalize.py ......................................................
pandas/tests/io/json/test_pandas.py .................x.........................................................................................xxxx................................xxx.................................................................................................................................................................................xxxxxxxxxxxxxxxxxx.................................................................xx......................................................................
pandas/tests/io/json/test_readlines.py ....x.....xx...x.x.x..............x......xx...x...........
pandas/tests/io/json/test_ujson.py ..........................................................................................................................................................................................................................
pandas/tests/io/parser/common/test_chunksize.py ............................................................................
pandas/tests/io/parser/common/test_common_basic.py ...........x....s..................................s.......s.................sss............ssss...............................s...........................................s...s.......................s...................s...x.......s...x....
pandas/tests/io/parser/common/test_data_list.py ...x............
pandas/tests/io/parser/common/test_decimal.py ............
pandas/tests/io/parser/common/test_file_buffer_url.py ...x....ssss.................................s...s.s.sss.......................................................................................s....
pandas/tests/io/parser/common/test_float.py ...s....................................x.....x...xx
pandas/tests/io/parser/common/test_index.py ...................s............xxxx...x.......s...s...s...s...s
pandas/tests/io/parser/common/test_inf.py ......xx......xx
pandas/tests/io/parser/common/test_ints.py .............................................x...........sss......ss......xx....
pandas/tests/io/parser/common/test_iterator.py ................................
pandas/tests/io/parser/common/test_read_errors.py ...........................x..................ssssss...........s.......s...s...........s....
pandas/tests/io/parser/dtypes/test_categorical.py .........xxx......Xx...x...x........................................................................................
pandas/tests/io/parser/dtypes/test_dtypes_basic.py ............xxxx...x...............................................................x...x.............................x.x.x...................................................................................................................................................................x.x.x.x.x.x.x.x.x.x.x.x.........................................................................................................................................................................................................................................................................................................................x.x.x.x.x.x.x.x.x.x.x.x...................................................................................................................................................................................................................x......xx...x...x......................................xx...x...x...........................x...............................x........
pandas/tests/io/parser/dtypes/test_empty.py ...s...s...s...s...s...s...s............................ssssssss
pandas/tests/io/parser/test_c_parser_only.py ..........................................................................
pandas/tests/io/parser/test_comment.py ................................................................xx..
pandas/tests/io/parser/test_compression.py .............................x.x.x.x.........x.x.x.x.........x.x.x.x.........x.x.x.x.........x.x.x.x.........x.x.x.x................................................................................................................................
pandas/tests/io/parser/test_concatenate_chunks.py ..
pandas/tests/io/parser/test_converters.py ................................................
pandas/tests/io/parser/test_dialect.py ............................................................................................................
pandas/tests/io/parser/test_encoding.py .......s..................ssssss..........................s.............................................................................................................................................................................................................s.s.s.s.s.s.s.s.s.s.s.s............................................xx
pandas/tests/io/parser/test_header.py ...x.......................x.......x.....................xxx.........xxx.........xxx...x...x...x...x.......x......ss...................x.........xxx........................xxxxxxxx...s...x...x...s...s.......x...x...x.
pandas/tests/io/parser/test_index_col.py ...................s..............................ssssssssss...s...............xxx.....x...x...x...x...x...x...x...s......x....x
pandas/tests/io/parser/test_mangle_dupes.py ...x...x.............xxx...............x...x...x........
pandas/tests/io/parser/test_na_values.py .........................................................x..xx..............................................x.x...........................xx...s..............................x...........x...........xx..................xxxxxx...x.......x..............xx
pandas/tests/io/parser/test_parse_dates.py .......x...s...x......xx......xx................................................................xxxx..........................................ssssss..........s.......ss.............ssss...x...x..........s...x...x...........x.......x
pandas/tests/io/parser/test_python_parser_only.py .....................................................................................
pandas/tests/io/parser/test_quoting.py .........sss......xx........................................xxxx...............xxxxx.......x...............x
pandas/tests/io/parser/test_read_fwf.py ..............................................................................
pandas/tests/io/parser/test_skiprows.py ......xx...x...x.........xxx...x.........xxx........xxxx...x......xx...x...x...x...x...x
pandas/tests/io/parser/test_textreader.py ......................................
pandas/tests/io/parser/test_unsupported.py ..............s..x.....
pandas/tests/io/parser/test_upcast.py ...............................
pandas/tests/io/parser/usecols/test_parse_dates.py ...s....
pandas/tests/io/parser/usecols/test_strings.py ....................
pandas/tests/io/parser/usecols/test_usecols_basic.py .......................s.......x..........ss.......................s...............s...........x..................ss......ss......................ssssss......s.....................
pandas/tests/io/pytables/test_append.py ......................
pandas/tests/io/pytables/test_categorical.py .....
pandas/tests/io/pytables/test_compat.py ....
pandas/tests/io/pytables/test_complex.py .........
pandas/tests/io/pytables/test_errors.py ................
pandas/tests/io/pytables/test_file_handling.py ..........ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.....................
pandas/tests/io/pytables/test_keys.py ....
pandas/tests/io/pytables/test_put.py .........................................
pandas/tests/io/pytables/test_pytables_missing.py s
pandas/tests/io/pytables/test_read.py .................
pandas/tests/io/pytables/test_retain_attributes.py .....
pandas/tests/io/pytables/test_round_trip.py ................................
pandas/tests/io/pytables/test_select.py .........................
pandas/tests/io/pytables/test_store.py .F...............................................................
pandas/tests/io/pytables/test_subclass.py ..
pandas/tests/io/pytables/test_time_series.py ....
pandas/tests/io/pytables/test_timezones.py ........................................................................
pandas/tests/io/sas/test_byteswap.py ..........
pandas/tests/io/sas/test_sas.py ...
pandas/tests/io/sas/test_sas7bdat.py ........................
pandas/tests/io/sas/test_xport.py .......
pandas/tests/io/test_clipboard.py .......
pandas/tests/io/test_common.py .................................................................................................................................
pandas/tests/io/test_compression.py ........................................................................................................................................
pandas/tests/io/test_feather.py ..................
pandas/tests/io/test_fsspec.py ............EEEEEs............
pandas/tests/io/test_gcs.py ..Using pyarrow filesystem
Using pyarrow filesystem
x...............s
pandas/tests/io/test_html.py ...........................................................................................................................F.FF.....s....................
pandas/tests/io/test_orc.py ....................
pandas/tests/io/test_parquet.py .....................................x..........x......ss.EEEE......................................E....................
pandas/tests/io/test_pickle.py
pandas/tests/io/test_s3.py .EE
pandas/tests/io/test_spss.py ...........
pandas/tests/io/test_sql.py ......................................................x.............................x.......x............x.xxxxx.....x....x..............x.......................................x.......................x....x..............x....x..........x.........x....x....x....x....x....x....x..................................x....x....x....x....x.......................x....x....x.....xx.........................................................................x..ss.....s..s............s................xxx...xxx........................................x............x..s..s..s..............s...xx...................x....x....x....x....x....x....x....xxxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx.xxxx....................x..........................................
pandas/tests/io/test_stata.py
pandas/tests/io/xml/test_to_xml.py ........................................................................s...............................................................EE
pandas/tests/io/xml/test_xml.py ...................................................................................s..........................................................................s......s......s......s......s......s......s......s......s......s......s......s...........
pandas/tests/io/xml/test_xml_dtypes.py ............................................
pandas/tests/libs/test_hashtable.py ..............s.....................................................................s.............s.......................................................s.............ss.................................................................................................................................................................................................
pandas/tests/libs/test_join.py .................
pandas/tests/libs/test_lib.py ...................................................................................
pandas/tests/libs/test_libalgos.py ........
pandas/tests/plotting/frame/test_frame.py ..................................................XX..................................................xxx................................................................................x............................................................................................
pandas/tests/plotting/frame/test_frame_color.py ...........................................................................................
pandas/tests/plotting/frame/test_frame_groupby.py ......
pandas/tests/plotting/frame/test_frame_legend.py x.....................
pandas/tests/plotting/frame/test_frame_subplots.py .........x....................XX...................................................................
pandas/tests/plotting/frame/test_hist_box_by.py .............................
pandas/tests/plotting/test_backend.py .....s.
pandas/tests/plotting/test_boxplot_method.py ....................................x...............
pandas/tests/plotting/test_common.py ...
pandas/tests/plotting/test_converter.py ............................................
pandas/tests/plotting/test_datetimelike.py ...........................................................................................................................................................x.......................x...............x.................
pandas/tests/plotting/test_groupby.py .................
pandas/tests/plotting/test_hist_method.py ...........................x..x......................................................
pandas/tests/plotting/test_misc.py s....................sss...................sss...................sss..................................
pandas/tests/plotting/test_series.py ...............................XXXX...................................x.........................................................x..........................
pandas/tests/plotting/test_style.py ......................................
pandas/tests/reductions/test_reductions.py ...............................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/reductions/test_stat_reductions.py .........................................................................................
pandas/tests/resample/test_base.py ............................................................................................................................................................................................x..x..x..x..x..x..x..x..x..x..x..x..x..x..x..x.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/resample/test_datetime_index.py ................................................................................ssssx...x...x...x................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/resample/test_period_index.py ...................................................................................................................................................................................................................................................................................................................................................................................................x................................................................................
pandas/tests/resample/test_resample_api.py .................................................................................................................................................................................
pandas/tests/resample/test_resampler_grouper.py ..................................................
pandas/tests/resample/test_time_grouper.py .........................x........................
pandas/tests/resample/test_timedelta.py ........................
pandas/tests/reshape/concat/test_append.py ..................................................................................
pandas/tests/reshape/concat/test_append_common.py ...........................sssssssss.......................................................
pandas/tests/reshape/concat/test_categorical.py .............
pandas/tests/reshape/concat/test_concat.py ....................................................................................................
pandas/tests/reshape/concat/test_dataframe.py .............
pandas/tests/reshape/concat/test_datetimes.py ..................................................................................................x.........
pandas/tests/reshape/concat/test_empty.py .....................s.....s.....s.....s.....s..........
pandas/tests/reshape/concat/test_index.py ..............................................................
pandas/tests/reshape/concat/test_invalid.py .......
pandas/tests/reshape/concat/test_series.py .............
pandas/tests/reshape/concat/test_sort.py ..........
pandas/tests/reshape/merge/test_join.py ...........................................................................
pandas/tests/reshape/merge/test_merge.py
pandas/tests/reshape/merge/test_merge_antijoin.py ...............
pandas/tests/reshape/merge/test_merge_asof.py .s...................................................................................................s.....................s.............................
pandas/tests/reshape/merge/test_merge_cross.py .................
pandas/tests/reshape/merge/test_merge_index_as_string.py ................................................................................
pandas/tests/reshape/merge/test_merge_ordered.py .....................
pandas/tests/reshape/merge/test_multi.py ..........................................
pandas/tests/reshape/test_crosstab.py .....................................
pandas/tests/reshape/test_cut.py ......................................................................................................................................
pandas/tests/reshape/test_from_dummies.py .........................................
pandas/tests/reshape/test_get_dummies.py ....................................................................................................................................................................................
pandas/tests/reshape/test_melt.py .................................................................
pandas/tests/reshape/test_pivot.py .........................................................................xx...........................................................................................................
pandas/tests/reshape/test_pivot_multilevel.py ..........
pandas/tests/reshape/test_qcut.py .................................................................................................................
pandas/tests/reshape/test_union_categoricals.py ..........................................
pandas/tests/scalar/interval/test_arithmetic.py ............................................
pandas/tests/scalar/interval/test_constructors.py .........
pandas/tests/scalar/interval/test_contains.py ................
pandas/tests/scalar/interval/test_formats.py .
pandas/tests/scalar/interval/test_interval.py ............................................
pandas/tests/scalar/interval/test_overlaps.py .................................................................................................................................................................
pandas/tests/scalar/period/test_arithmetic.py ....................................................................................
pandas/tests/scalar/period/test_asfreq.py .......................
pandas/tests/scalar/period/test_period.py ...................................................................................................................................................................................................................................................................................................................
pandas/tests/scalar/test_na_scalar.py .....................................................................................ss.....ss.....ss................................................................................................................................................................................
pandas/tests/scalar/test_nat.py .......................................................................................................................s............s............................................................................................................................................................................................................................
pandas/tests/scalar/timedelta/methods/test_as_unit.py ....
pandas/tests/scalar/timedelta/methods/test_round.py ...................
pandas/tests/scalar/timedelta/test_arithmetic.py ................................................................................................................................
pandas/tests/scalar/timedelta/test_constructors.py .................................................................................................................................................................................................................................................................................................
pandas/tests/scalar/timedelta/test_formats.py ..............
pandas/tests/scalar/timedelta/test_timedelta.py .......................................................................x....................
pandas/tests/scalar/timestamp/methods/test_as_unit.py ....
pandas/tests/scalar/timestamp/methods/test_normalize.py .................................................................................................................................................................
pandas/tests/scalar/timestamp/methods/test_replace.py ............................................................................................................................
pandas/tests/scalar/timestamp/methods/test_round.py .......................................................................................................................................................................................
pandas/tests/scalar/timestamp/methods/test_timestamp_method.py .
pandas/tests/scalar/timestamp/methods/test_to_julian_date.py .....
pandas/tests/scalar/timestamp/methods/test_to_pydatetime.py .......
pandas/tests/scalar/timestamp/methods/test_tz_convert.py ...............................................................................
pandas/tests/scalar/timestamp/methods/test_tz_localize.py .........................................................................................................................................................................................................
pandas/tests/scalar/timestamp/test_arithmetic.py ...................................................................................................
pandas/tests/scalar/timestamp/test_comparisons.py .............................
pandas/tests/scalar/timestamp/test_constructors.py ..................................................................xxx.................................................................
pandas/tests/scalar/timestamp/test_formats.py ...........................................................................
pandas/tests/scalar/timestamp/test_timestamp.py ...........................................................................................................................x.......................................................................................................................................................................................................................................................................................................................................
pandas/tests/scalar/timestamp/test_timezones.py ....................
pandas/tests/series/accessors/test_cat_accessor.py ...................
pandas/tests/series/accessors/test_dt_accessor.py ...........................................................................................................................
pandas/tests/series/accessors/test_list_accessor.py .............
pandas/tests/series/accessors/test_sparse_accessor.py .
pandas/tests/series/accessors/test_str_accessor.py ..
pandas/tests/series/accessors/test_struct_accessor.py ............
pandas/tests/series/indexing/test_datetime.py .................
pandas/tests/series/indexing/test_delitem.py ....
pandas/tests/series/indexing/test_get.py ............
pandas/tests/series/indexing/test_getitem.py ..............................................................................................
pandas/tests/series/indexing/test_indexing.py
pandas/tests/series/indexing/test_mask.py ....
pandas/tests/series/indexing/test_set_value.py ...
pandas/tests/series/indexing/test_setitem.py .......................................................................................................................sss....sss....sss....sss....sss....sss....sss....sss....sss....sss....sss....sss...s...ssss...ssss...ssss...ssss...ssss...ssss...ssss...ssss...ssss...ssss...ssss...sss.................................................................................................................................................................................sssssssss..................ssssssssssssssssss............................................................ssssssssssss..........................................................................................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss...........................................................................................................................sss..................ssssssssssss...........................sss.......sssssssssssssssssssssssssss.................................................................................sssssssss.................................ssssss.....................sssssssss........................ssssss........................ssssssssssss..............................ssssss........................ssssssssssss..........................................ssssssssssssssssss................................................ssssssssssss....................................ssssssssssss.........................F........F........F........F........F........F........F........F........F.......sssssssssssssssssssssssssss.........sssssssss...........................sssssssss..............................ssssssssssss.................................sssssssss....................................ssssssssssssssssss...................................................................................................................................................................................................
pandas/tests/series/indexing/test_take.py ....
pandas/tests/series/indexing/test_where.py .......................................................................................................................................................................................................
pandas/tests/series/indexing/test_xs.py ......
pandas/tests/series/methods/test_add_prefix_suffix.py ...
pandas/tests/series/methods/test_align.py ...............................................
pandas/tests/series/methods/test_argsort.py ..........
pandas/tests/series/methods/test_asof.py .......
pandas/tests/series/methods/test_astype.py ............................................................................................................................................................x........x..........................
pandas/tests/series/methods/test_autocorr.py .
pandas/tests/series/methods/test_between.py .......
pandas/tests/series/methods/test_case_when.py ...........
pandas/tests/series/methods/test_clip.py ....s.....s.....s.....s.....s.....s.....s.....s.....s.....s............
pandas/tests/series/methods/test_combine.py .
pandas/tests/series/methods/test_combine_first.py ..............................
pandas/tests/series/methods/test_compare.py .............
pandas/tests/series/methods/test_convert_dtypes.py
pandas/tests/series/methods/test_copy.py ..........
pandas/tests/series/methods/test_count.py ..
pandas/tests/series/methods/test_cov_corr.py ...................
pandas/tests/series/methods/test_describe.py ......................................................
pandas/tests/series/methods/test_diff.py ........
pandas/tests/series/methods/test_drop.py .............................
pandas/tests/series/methods/test_drop_duplicates.py ..................................................................ssssss...............................................................................................................................................................................................................................................................................................................
pandas/tests/series/methods/test_dropna.py ...........
pandas/tests/series/methods/test_dtypes.py .
pandas/tests/series/methods/test_duplicated.py ..................
pandas/tests/series/methods/test_equals.py .....................................................
pandas/tests/series/methods/test_explode.py ...................
pandas/tests/series/methods/test_fillna.py ..................................................................................................................................................
pandas/tests/series/methods/test_get_numeric_data.py .
pandas/tests/series/methods/test_head_tail.py .
pandas/tests/series/methods/test_infer_objects.py .......
pandas/tests/series/methods/test_info.py ........x......
pandas/tests/series/methods/test_interpolate.py x................................................................................................................................................................................................x.x.............
pandas/tests/series/methods/test_is_monotonic.py ..
pandas/tests/series/methods/test_is_unique.py ........
pandas/tests/series/methods/test_isin.py ..............................................
pandas/tests/series/methods/test_isna.py ..
pandas/tests/series/methods/test_item.py .
pandas/tests/series/methods/test_map.py .............................................xxx.........................................................
pandas/tests/series/methods/test_matmul.py .
pandas/tests/series/methods/test_nlargest.py ....................................................................................................
pandas/tests/series/methods/test_nunique.py ..
pandas/tests/series/methods/test_pct_change.py .........
pandas/tests/series/methods/test_pop.py .
pandas/tests/series/methods/test_quantile.py ........................................
pandas/tests/series/methods/test_rank.py ......s......s..s......s..s......s..s......s..s......s
pandas/tests/series/methods/test_reindex.py ...................................
pandas/tests/series/methods/test_reindex_like.py ..
pandas/tests/series/methods/test_rename.py ................
pandas/tests/series/methods/test_rename_axis.py .....
pandas/tests/series/methods/test_repeat.py ...
pandas/tests/series/methods/test_replace.py .........................................................................................
pandas/tests/series/methods/test_reset_index.py ...............
pandas/tests/series/methods/test_round.py .........................................................................................
pandas/tests/series/methods/test_searchsorted.py ........
pandas/tests/series/methods/test_set_name.py ..
pandas/tests/series/methods/test_size.py .....
pandas/tests/series/methods/test_sort_index.py ..............................................
pandas/tests/series/methods/test_sort_values.py ............
pandas/tests/series/methods/test_to_csv.py ...................................
pandas/tests/series/methods/test_to_dict.py ......
pandas/tests/series/methods/test_to_frame.py ...
pandas/tests/series/methods/test_to_numpy.py .....
pandas/tests/series/methods/test_tolist.py .............
pandas/tests/series/methods/test_truncate.py ....
pandas/tests/series/methods/test_tz_localize.py ................................................................
pandas/tests/series/methods/test_unique.py .......
pandas/tests/series/methods/test_unstack.py .......
pandas/tests/series/methods/test_update.py ..........................
pandas/tests/series/methods/test_value_counts.py ...................
pandas/tests/series/methods/test_values.py ...
pandas/tests/series/test_api.py ...............................................................................................................................................................................
pandas/tests/series/test_arithmetic.pyx.................................x..............
pandas/tests/series/test_arrow_interface.py ...
pandas/tests/series/test_constructors.py .......................................................................................................................................................................................................................................x........................................................................................................................................xx.....................................................................ss...........
pandas/tests/series/test_cumulative.py ..........................................................................................................................................................................
pandas/tests/series/test_formats.py .....................................................
pandas/tests/series/test_iteration.py .......
pandas/tests/series/test_logical_ops.py ............................
pandas/tests/series/test_missing.py ..x..
pandas/tests/series/test_npfuncs.py .....
pandas/tests/series/test_reductions.py ..............................
pandas/tests/series/test_subclass.py .........
pandas/tests/series/test_ufunc.py .....................................................................xxxx.........................................................................................................................................x
pandas/tests/series/test_unary.py ..........................
pandas/tests/series/test_validate.py ............................
pandas/tests/strings/test_api.py ...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................x...........................................................................................................xx............xx......xx............................xx..........................xxxx
pandas/tests/strings/test_case_justify.py ................................................................................................................
pandas/tests/strings/test_cat.py ................................................................................
pandas/tests/strings/test_extract.py ........................................................................................................................................................sssss...................................................................................................................................................................................................................sssss.........................................................................................................................................
pandas/tests/strings/test_find_replace.py ................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/strings/test_get_dummies.py .........................................................................................................................
pandas/tests/strings/test_split_partition.py .................................................................................................................................................................................................................................................................................................
pandas/tests/strings/test_string_array.py ....................................................................................................................................................................................
pandas/tests/strings/test_strings.py ...........................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/test_aggregation.py ........
pandas/tests/test_algos.py ...........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/test_common.py .............................x................................................................................................................
pandas/tests/test_downstream.py .s..s..ss.s..............
pandas/tests/test_errors.py ..................................
pandas/tests/test_expressions.py ...........................................................................................................................................................................................................................................................
pandas/tests/test_flags.py .....
pandas/tests/test_multilevel.py .....................
pandas/tests/test_nanops.py ....................................................................................................................................................................................................................................................
pandas/tests/test_optional_dependency.py .....
pandas/tests/test_register_accessor.py ..........
pandas/tests/test_sorting.py ..........................................
pandas/tests/test_take.py ..................................................................................
pandas/tests/tools/test_to_datetime.pyxx....................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/tools/test_to_numeric.py .........................................................................................................................................................................................................................xx....................................................................................................................................................................................
pandas/tests/tools/test_to_time.py ...........
pandas/tests/tools/test_to_timedelta.py ................................................................................
pandas/tests/tseries/frequencies/test_freq_code.py ...................
pandas/tests/tseries/frequencies/test_frequencies.py ..........
pandas/tests/tseries/frequencies/test_inference.py
pandas/tests/tseries/holiday/test_calendar.py ........
pandas/tests/tseries/holiday/test_federal.py ...
pandas/tests/tseries/holiday/test_holiday.py ..................................................
pandas/tests/tseries/holiday/test_observance.py .................................
pandas/tests/tseries/offsets/test_business_day.py .......................
pandas/tests/tseries/offsets/test_business_hour.py ..............................................................................................
pandas/tests/tseries/offsets/test_business_month.py .....................
pandas/tests/tseries/offsets/test_business_quarter.py ............................................
pandas/tests/tseries/offsets/test_business_year.py ...................
pandas/tests/tseries/offsets/test_common.py
pandas/tests/tseries/offsets/test_custom_business_day.py .......
pandas/tests/tseries/offsets/test_custom_business_hour.py ............................
pandas/tests/tseries/offsets/test_custom_business_month.py ....................................................
pandas/tests/tseries/offsets/test_dst.py ............................
pandas/tests/tseries/offsets/test_easter.py ..........
pandas/tests/tseries/offsets/test_fiscal.py ............................................................................................................................................
pandas/tests/tseries/offsets/test_index.py ........................
pandas/tests/tseries/offsets/test_month.py ............................................................
pandas/tests/tseries/offsets/test_offsets.pyx.................................................................................................................................................................................................................................................x.....................................................................................................................................................................................................................................................
pandas/tests/tseries/offsets/test_offsets_properties.py ..
pandas/tests/tseries/offsets/test_quarter.py ......................................................................................
pandas/tests/tseries/offsets/test_ticks.py .....................................................................................................
pandas/tests/tseries/offsets/test_week.py .............................................
pandas/tests/tseries/offsets/test_year.py .................................
pandas/tests/tslibs/test_api.py .
pandas/tests/tslibs/test_array_to_datetime.py .........................................
pandas/tests/tslibs/test_ccalendar.py .................
pandas/tests/tslibs/test_conversion.py ......................................................................
pandas/tests/tslibs/test_fields.py ....
pandas/tests/tslibs/test_libfrequencies.py ............
pandas/tests/tslibs/test_liboffsets.py ..........................................................................
pandas/tests/tslibs/test_np_datetime.py ........
pandas/tests/tslibs/test_npy_units.py ..
pandas/tests/tslibs/test_parse_iso8601.py ...................................................
pandas/tests/tslibs/test_parsing.py ..............................................................................................................................................x...x.................................
pandas/tests/tslibs/test_period.py .......................................
pandas/tests/tslibs/test_resolution.py ..............
pandas/tests/tslibs/test_strptime.py .......
pandas/tests/tslibs/test_timedeltas.py .........................
pandas/tests/tslibs/test_timezones.py .............................................
pandas/tests/tslibs/test_to_offset.py ......................................................................................................
pandas/tests/tslibs/test_tzconversion.py .
pandas/tests/util/test_assert_almost_equal.py .....................................................................................................................................................................
pandas/tests/util/test_assert_attr_equal.py ..........................................
pandas/tests/util/test_assert_categorical_equal.py ..........
pandas/tests/util/test_assert_extension_array_equal.py ....................................
pandas/tests/util/test_assert_frame_equal.py ...............................................................................................................
pandas/tests/util/test_assert_index_equal.py ................................................................
pandas/tests/util/test_assert_interval_array_equal.py ........
pandas/tests/util/test_assert_numpy_array_equal.py .........................
pandas/tests/util/test_assert_produces_warning.py ................................................................................................................................
pandas/tests/util/test_assert_series_equal.py ........................................................................................................................xx
pandas/tests/util/test_deprecate.py ...
pandas/tests/util/test_deprecate_kwarg.py ..............
pandas/tests/util/test_deprecate_nonkeyword_arguments.py ...................
pandas/tests/util/test_doc.py ....
pandas/tests/util/test_hashing.py ..........................................................................................................................................................
pandas/tests/util/test_numba.py s
pandas/tests/util/test_rewrite_warning.py ..........
pandas/tests/util/test_shares_memory.py ..
pandas/tests/util/test_show_versions.py ....
pandas/tests/util/test_util.py ...s...
pandas/tests/util/test_validate_args.py ......
pandas/tests/util/test_validate_args_and_kwargs.py ......
pandas/tests/util/test_validate_inclusive.py ...........
pandas/tests/util/test_validate_kwargs.py ..................
pandas/tests/window/moments/test_moments_consistency_ewm.py
pandas/tests/window/moments/test_moments_consistency_expanding.py ........x.......................x..x..x..x..x..x....................x.......................x..x..x..x..x..x................................................................................................................................................................................................................................................................................
pandas/tests/window/moments/test_moments_consistency_rolling.py ..............x..x............................................x..x..x..x..x..x..x..x..x..x..x..x......................................x..x............................................x..x..x..x..x..x..x..x..x..x..x..x
pandas/tests/window/test_api.py
pandas/tests/window/test_apply.py ................................................................................
pandas/tests/window/test_base_indexer.py ....................................................................................................................................................................................................................................
pandas/tests/window/test_cython_aggregations.py ............................................................................
pandas/tests/window/test_dtypes.py
pandas/tests/window/test_ewm.py ......................................................................................................................................................................................................................................................................................................................ssssssssssss........ssssssssssssssss................
pandas/tests/window/test_expanding.py ..........x........................................................................................................................................................................................................................................................................................................................................
pandas/tests/window/test_groupby.py ..........................................................................................................................
pandas/tests/window/test_numba.py
pandas/tests/window/test_online.py .xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.....
pandas/tests/window/test_pairwise.py ........................................................................................................................................................................................................................................................................................................................
pandas/tests/window/test_rolling.py
pandas/tests/window/test_rolling_functions.py ........................................................................................................................................................................................................................................................................................................................................................................................................................................
pandas/tests/window/test_rolling_quantile.py .........................................................................................................................................................................................
pandas/tests/window/test_rolling_skew_kurt.py ....................................................................
pandas/tests/window/test_timeseries_window.py ......................................................................................
pandas/tests/window/test_win_type.py ..............................................................................................................................................................................................................................................................................................

==================================== ERRORS ====================================
____ ERROR at setup of TestReaders.test_read_from_s3_url[('xlrd', '.xls')] _____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a7f910>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd582a14610>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-2f5b2961-a9a7-4e81-b862-66a...nvocation-id': b'3ba823a6-0d34-4805-a0e0-16536edd29a7', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a7f910>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a7f910>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('xlrd', '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd582a14610>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-2f5b2961-a9a7-4e81-b862-66a...nvocation-id': b'3ba823a6-0d34-4805-a0e0-16536edd29a7', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-2f5b2961-a9a7-4e81-b862-66a4a29a001b"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('openpyxl', '.xlsx')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582604340>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58233f7c0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-b84bab97-6c6a-4e09-89cd-13c...nvocation-id': b'b3704427-d0b2-4fbc-a680-a2cb95dd3eff', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582604340>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582604340>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('openpyxl', '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58233f7c0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-b84bab97-6c6a-4e09-89cd-13c...nvocation-id': b'b3704427-d0b2-4fbc-a680-a2cb95dd3eff', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-b84bab97-6c6a-4e09-89cd-13c70ae86a99"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('openpyxl', '.xlsm')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5827690f0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58202a530>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-3c804b2f-3283-40d7-8f81-40c...nvocation-id': b'ee429dd9-b8f2-4979-9189-a323c81dca2a', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5827690f0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5827690f0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('openpyxl', '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58202a530>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-3c804b2f-3283-40d7-8f81-40c...nvocation-id': b'ee429dd9-b8f2-4979-9189-a323c81dca2a', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-3c804b2f-3283-40d7-8f81-40c1de29fe49"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_____ ERROR at setup of TestReaders.test_read_from_s3_url[(None, '.xls')] ______

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582110100>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd582478400>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0ccca34a-d41c-4151-9881-b30...nvocation-id': b'4f95d8b5-07e6-47c1-b2c1-4d200a385bf0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582110100>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582110100>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[(None, '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd582478400>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0ccca34a-d41c-4151-9881-b30...nvocation-id': b'4f95d8b5-07e6-47c1-b2c1-4d200a385bf0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-0ccca34a-d41c-4151-9881-b30fb95a6835"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_____ ERROR at setup of TestReaders.test_read_from_s3_url[(None, '.xlsx')] _____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58249aad0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5824cef80>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e6097a22-c490-4ad9-a3df-0cb...nvocation-id': b'8367ebb1-4da8-4243-b2e9-4b81ccc0a3df', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58249aad0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58249aad0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[(None, '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5824cef80>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e6097a22-c490-4ad9-a3df-0cb...nvocation-id': b'8367ebb1-4da8-4243-b2e9-4b81ccc0a3df', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-e6097a22-c490-4ad9-a3df-0cb001d35324"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_____ ERROR at setup of TestReaders.test_read_from_s3_url[(None, '.xlsm')] _____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582602c50>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd582646350>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-1beeba77-3905-45f7-9c4a-df3...nvocation-id': b'99fd73cb-e28f-4c88-8156-98b8f1debf6c', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582602c50>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582602c50>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[(None, '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd582646350>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-1beeba77-3905-45f7-9c4a-df3...nvocation-id': b'99fd73cb-e28f-4c88-8156-98b8f1debf6c', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-1beeba77-3905-45f7-9c4a-df33486cf1c3"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___ ERROR at setup of TestReaders.test_read_from_s3_url[('pyxlsb', '.xlsb')] ___

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828a17b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58248dc30>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-c4e751bb-4d2b-4217-81b9-100...nvocation-id': b'2fc1c60c-0c46-4b79-9809-3cd4bf877dcd', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828a17b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828a17b0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('pyxlsb', '.xlsb')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58248dc30>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-c4e751bb-4d2b-4217-81b9-100...nvocation-id': b'2fc1c60c-0c46-4b79-9809-3cd4bf877dcd', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-c4e751bb-4d2b-4217-81b9-100202e1435b"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_____ ERROR at setup of TestReaders.test_read_from_s3_url[('odf', '.ods')] _____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823ce890>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58243a410>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0d381c4c-c26c-4369-b7a0-f29...nvocation-id': b'36dbe769-ebe0-4d6f-9a0f-b756ec4cb1e4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823ce890>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823ce890>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('odf', '.ods')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58243a410>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0d381c4c-c26c-4369-b7a0-f29...nvocation-id': b'36dbe769-ebe0-4d6f-9a0f-b756ec4cb1e4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-0d381c4c-c26c-4369-b7a0-f29652d5db3a"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('calamine', '.xls')] ___

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582802ad0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd582248040>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-b3f1a83b-dce8-4c99-8383-bfc...nvocation-id': b'99ec96c2-20c3-409f-b373-f40570c298f4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582802ad0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582802ad0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('calamine', '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd582248040>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-b3f1a83b-dce8-4c99-8383-bfc...nvocation-id': b'99ec96c2-20c3-409f-b373-f40570c298f4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-b3f1a83b-dce8-4c99-8383-bfce9d0deb05"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('calamine', '.xlsx')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58281fe20>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd581e7be50>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-6a8b4f78-ceeb-4e6e-8d35-a71...nvocation-id': b'1b4f9ab5-04c9-4a10-983d-111c82dbaee0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58281fe20>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58281fe20>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('calamine', '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd581e7be50>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-6a8b4f78-ceeb-4e6e-8d35-a71...nvocation-id': b'1b4f9ab5-04c9-4a10-983d-111c82dbaee0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-6a8b4f78-ceeb-4e6e-8d35-a715922a13f8"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('calamine', '.xlsm')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823c6b60>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd581e7e8f0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-120e9119-907b-404e-96f0-324...nvocation-id': b'7d483621-9c1f-4ff2-9435-1e0082cd75f2', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823c6b60>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5823c6b60>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('calamine', '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd581e7e8f0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-120e9119-907b-404e-96f0-324...nvocation-id': b'7d483621-9c1f-4ff2-9435-1e0082cd75f2', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-120e9119-907b-404e-96f0-324b1b1b3810"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('calamine', '.xlsb')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581daace0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5822ebfd0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-beceab22-c7d3-4bb1-8bae-42b...nvocation-id': b'c2416f72-0cfc-4a7f-aae5-facb29d4f3e4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581daace0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581daace0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('calamine', '.xlsb')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5822ebfd0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-beceab22-c7d3-4bb1-8bae-42b...nvocation-id': b'c2416f72-0cfc-4a7f-aae5-facb29d4f3e4', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-beceab22-c7d3-4bb1-8bae-42bd1acc50ce"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__ ERROR at setup of TestReaders.test_read_from_s3_url[('calamine', '.ods')] ___

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582022d40>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821fc5e0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-32a9fbfe-2953-4368-b070-26b...nvocation-id': b'0b182bfc-f071-4e4d-89f9-8716311bd659', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582022d40>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582022d40>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_url[('calamine', '.ods')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821fc5e0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-32a9fbfe-2953-4368-b070-26b...nvocation-id': b'0b182bfc-f071-4e4d-89f9-8716311bd659', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-32a9fbfe-2953-4368-b070-26ba4446730d"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___ ERROR at setup of TestReaders.test_read_from_s3_object[('xlrd', '.xls')] ___

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ea2440>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821a7880>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-330a0d8e-99b5-4dcc-9ab6-c49...nvocation-id': b'a3196136-e6ed-4a85-b67a-8e228e31bde9', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ea2440>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ea2440>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('xlrd', '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821a7880>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-330a0d8e-99b5-4dcc-9ab6-c49...nvocation-id': b'a3196136-e6ed-4a85-b67a-8e228e31bde9', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-330a0d8e-99b5-4dcc-9ab6-c49f4193e801"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('openpyxl', '.xlsx')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ed2050>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd582195180>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-9b6ec772-7bea-499d-be2f-004...nvocation-id': b'956830e4-def4-4e38-9d35-ccf21c95cb5e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ed2050>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581ed2050>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('openpyxl', '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd582195180>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-9b6ec772-7bea-499d-be2f-004...nvocation-id': b'956830e4-def4-4e38-9d35-ccf21c95cb5e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-9b6ec772-7bea-499d-be2f-004ea2cc8695"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('openpyxl', '.xlsm')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a15300>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58845d450>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-d3d02690-aad0-4d2b-8d68-3c9...nvocation-id': b'39976292-5cb1-4901-9353-adcf2fd1d5f0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a15300>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582a15300>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('openpyxl', '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58845d450>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-d3d02690-aad0-4d2b-8d68-3c9...nvocation-id': b'39976292-5cb1-4901-9353-adcf2fd1d5f0', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-d3d02690-aad0-4d2b-8d68-3c930483692f"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
____ ERROR at setup of TestReaders.test_read_from_s3_object[(None, '.xls')] ____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd588645930>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd583eb78b0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0a26dd7b-c4c3-4450-b4b8-664...nvocation-id': b'31d322bf-1196-4f72-ab87-fb3f1da0bd0a', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd588645930>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd588645930>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[(None, '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd583eb78b0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-0a26dd7b-c4c3-4450-b4b8-664...nvocation-id': b'31d322bf-1196-4f72-ab87-fb3f1da0bd0a', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-0a26dd7b-c4c3-4450-b4b8-664e646e59c5"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___ ERROR at setup of TestReaders.test_read_from_s3_object[(None, '.xlsx')] ____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58247a6e0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58812f3a0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-8bf07201-d8ab-43df-b232-94f...nvocation-id': b'c44800ca-edc3-4393-a963-5cf32fde356d', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58247a6e0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58247a6e0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[(None, '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58812f3a0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-8bf07201-d8ab-43df-b232-94f...nvocation-id': b'c44800ca-edc3-4393-a963-5cf32fde356d', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-8bf07201-d8ab-43df-b232-94fe5d2ca19b"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___ ERROR at setup of TestReaders.test_read_from_s3_object[(None, '.xlsm')] ____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582238ac0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd583a5b550>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-1f9d4046-62b0-4e18-b680-cc1...nvocation-id': b'6d3aef35-2352-413e-bc6b-6f0442934f85', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582238ac0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582238ac0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[(None, '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd583a5b550>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-1f9d4046-62b0-4e18-b680-cc1...nvocation-id': b'6d3aef35-2352-413e-bc6b-6f0442934f85', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-1f9d4046-62b0-4e18-b680-cc128d3fe7fb"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('pyxlsb', '.xlsb')] __

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822c5fc0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58395d510>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e905d6e1-0bd4-4663-85f5-179...nvocation-id': b'd0b99def-36f8-48c1-b8bb-9217d3649ece', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822c5fc0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822c5fc0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('pyxlsb', '.xlsb')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58395d510>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e905d6e1-0bd4-4663-85f5-179...nvocation-id': b'd0b99def-36f8-48c1-b8bb-9217d3649ece', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-e905d6e1-0bd4-4663-85f5-1799cf33f197"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___ ERROR at setup of TestReaders.test_read_from_s3_object[('odf', '.ods')] ____

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582048ac0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1a30fa0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-cb28336b-bc9f-49a3-b02f-fe8...nvocation-id': b'1b19aeea-84f7-4d74-bc51-16057b3371ed', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582048ac0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582048ac0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('odf', '.ods')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1a30fa0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-cb28336b-bc9f-49a3-b02f-fe8...nvocation-id': b'1b19aeea-84f7-4d74-bc51-16057b3371ed', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-cb28336b-bc9f-49a3-b02f-fe8ab350302e"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('calamine', '.xls')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581f2e140>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd593d4dff0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-ffef7d96-3eeb-4648-8916-c85...nvocation-id': b'd4ee4b97-bc00-46b6-a0de-b510da91b60e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581f2e140>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd581f2e140>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('calamine', '.xls')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd593d4dff0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-ffef7d96-3eeb-4648-8916-c85...nvocation-id': b'd4ee4b97-bc00-46b6-a0de-b510da91b60e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-ffef7d96-3eeb-4648-8916-c85b4e91244a"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('calamine', '.xlsx')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582345750>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd590ef2440>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-16eafa08-7c30-40a5-a0fb-2be...nvocation-id': b'6bba50fd-5667-465d-a7b8-f3bab245072c', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582345750>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd582345750>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('calamine', '.xlsx')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd590ef2440>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-16eafa08-7c30-40a5-a0fb-2be...nvocation-id': b'6bba50fd-5667-465d-a7b8-f3bab245072c', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-16eafa08-7c30-40a5-a0fb-2be67cfe5339"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('calamine', '.xlsm')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5825f2b00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58a827730>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-65bb5e8b-a288-484f-a21c-cfb...nvocation-id': b'e8d2228e-b811-4b5a-984e-9a087d09d57e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5825f2b00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5825f2b00>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('calamine', '.xlsm')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58a827730>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-65bb5e8b-a288-484f-a21c-cfb...nvocation-id': b'e8d2228e-b811-4b5a-984e-9a087d09d57e', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-65bb5e8b-a288-484f-a21c-cfbeaa7cbcf4"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('calamine', '.xlsb')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5881fdd50>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58863f760>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-9631dff9-3677-4b9c-b4cd-bb6...nvocation-id': b'74c3b367-04d3-4614-b4bd-168642db5c78', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5881fdd50>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5881fdd50>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('calamine', '.xlsb')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58863f760>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-9631dff9-3677-4b9c-b4cd-bb6...nvocation-id': b'74c3b367-04d3-4614-b4bd-168642db5c78', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-9631dff9-3677-4b9c-b4cd-bb6f12302842"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestReaders.test_read_from_s3_object[('calamine', '.ods')] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5a1fe2530>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1c3a3e0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f6271d65-1701-4472-b438-c21...nvocation-id': b'9e95c771-8aa2-4f9b-9153-634925099c66', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5a1fe2530>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5a1fe2530>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_from_s3_object[('calamine', '.ods')]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/pandas/pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1c3a3e0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f6271d65-1701-4472-b438-c21...nvocation-id': b'9e95c771-8aa2-4f9b-9153-634925099c66', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-f6271d65-1701-4472-b438-c219b9888399"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_____________________ ERROR at setup of test_styler_to_s3 ______________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5805e0970>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd580359a20>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-db117601-cfea-4b24-93c7-b59...nvocation-id': b'92a888ef-7347-445e-b020-7a5c85b49309', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5805e0970>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5805e0970>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_styler_to_s3>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd580359a20>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-db117601-cfea-4b24-93c7-b59...nvocation-id': b'92a888ef-7347-445e-b020-7a5c85b49309', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-db117601-cfea-4b24-93c7-b59bf69bd897"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
______________________ ERROR at setup of test_from_s3_csv ______________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5806d5090>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58294e5c0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-ac8f3043-ae6a-4bba-ab6f-bfe...nvocation-id': b'e62ac46a-c561-4254-9bd3-b6de35b6bbb2', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5806d5090>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5806d5090>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_from_s3_csv>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58294e5c0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-ac8f3043-ae6a-4bba-ab6f-bfe...nvocation-id': b'e62ac46a-c561-4254-9bd3-b6de35b6bbb2', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-ac8f3043-ae6a-4bba-ab6f-bfe4c82b2f17"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___________________ ERROR at setup of test_s3_protocols[s3] ____________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822db0a0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1eabd90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-dd678149-f0ba-433a-8bdc-cba...nvocation-id': b'3bfa49d4-30e4-4798-854a-6c0df82daab3', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822db0a0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5822db0a0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_protocols[s3]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a1eabd90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-dd678149-f0ba-433a-8bdc-cba...nvocation-id': b'3bfa49d4-30e4-4798-854a-6c0df82daab3', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-dd678149-f0ba-433a-8bdc-cbaae7097897"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___________________ ERROR at setup of test_s3_protocols[s3a] ___________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd583e5ca60>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd581cde680>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-a19cada3-6110-4e51-9b18-950...nvocation-id': b'235865d4-50d0-42b5-a9cf-ef5ba8649c97', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd583e5ca60>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd583e5ca60>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_protocols[s3a]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd581cde680>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-a19cada3-6110-4e51-9b18-950...nvocation-id': b'235865d4-50d0-42b5-a9cf-ef5ba8649c97', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-a19cada3-6110-4e51-9b18-9502ccfb4424"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
___________________ ERROR at setup of test_s3_protocols[s3n] ___________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58218d810>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a181fa90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-584a3ad7-bd0f-49e2-b41e-809...nvocation-id': b'c78fffc7-3552-49a5-8479-0d4dc540399f', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58218d810>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd58218d810>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_protocols[s3n]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5a181fa90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-584a3ad7-bd0f-49e2-b41e-809...nvocation-id': b'c78fffc7-3552-49a5-8479-0d4dc540399f', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-584a3ad7-bd0f-49e2-b41e-809a4b3be144"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
______________________ ERROR at setup of test_s3_parquet _______________________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd580d204f0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821f9ae0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-dc640ed5-1d46-4316-8bd6-03e...nvocation-id': b'd3d9ede3-197b-4bab-9d49-ce6820528787', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd580d204f0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd580d204f0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_parquet>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5821f9ae0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-dc640ed5-1d46-4316-8bd6-03e...nvocation-id': b'd3d9ede3-197b-4bab-9d49-ce6820528787', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-dc640ed5-1d46-4316-8bd6-03e0c0b051c7"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
______ ERROR at setup of TestParquetPyArrow.test_s3_roundtrip_explicit_fs ______

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cfd5ae0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58148ff70>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-cb18184a-3f46-494c-b8b2-276...nvocation-id': b'72d88d5a-c39c-4299-9e07-4acf7aec86c6', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cfd5ae0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cfd5ae0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_roundtrip_explicit_fs>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58148ff70>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-cb18184a-3f46-494c-b8b2-276...nvocation-id': b'72d88d5a-c39c-4299-9e07-4acf7aec86c6', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-cb18184a-3f46-494c-b8b2-2760354a05b2"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
____________ ERROR at setup of TestParquetPyArrow.test_s3_roundtrip ____________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c31eb00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c206620>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f796a856-45b1-45d8-99ad-a2b...nvocation-id': b'1b09b5cf-a091-48b9-8d32-90ac7d829ff8', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c31eb00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c31eb00>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_roundtrip>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c206620>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f796a856-45b1-45d8-99ad-a2b...nvocation-id': b'1b09b5cf-a091-48b9-8d32-90ac7d829ff8', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-f796a856-45b1-45d8-99ad-a2b38c21ccc0"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestParquetPyArrow.test_s3_roundtrip_for_dir[partition_col0] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c3f8d00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c16c760>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-91c859b1-cdc5-4bbc-9ba3-8f6...nvocation-id': b'7a177088-6bae-465c-b4b2-eb6cc2b382a1', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c3f8d00>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c3f8d00>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_roundtrip_for_dir[partition_col0]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c16c760>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-91c859b1-cdc5-4bbc-9ba3-8f6...nvocation-id': b'7a177088-6bae-465c-b4b2-eb6cc2b382a1', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-91c859b1-cdc5-4bbc-9ba3-8f6fac934484"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
_ ERROR at setup of TestParquetPyArrow.test_s3_roundtrip_for_dir[partition_col1] _

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c2fc850>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd57cc57640>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-a6abc771-2de9-49fe-a5e1-f58...nvocation-id': b'e06c31b3-f905-447b-8db5-23c918cfd018', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c2fc850>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57c2fc850>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_roundtrip_for_dir[partition_col1]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd57cc57640>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-a6abc771-2de9-49fe-a5e1-f58...nvocation-id': b'e06c31b3-f905-447b-8db5-23c918cfd018', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-a6abc771-2de9-49fe-a5e1-f585f58d0a21"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__________ ERROR at setup of TestParquetFastParquet.test_s3_roundtrip __________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cca0610>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c352770>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f961e664-42f9-43ce-abed-58e...nvocation-id': b'313818f4-4a65-4006-95b9-8173b88615b6', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cca0610>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd57cca0610>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_roundtrip>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c352770>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-f961e664-42f9-43ce-abed-58e...nvocation-id': b'313818f4-4a65-4006-95b9-8173b88615b6', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-f961e664-42f9-43ce-abed-58e855d3763f"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
__________ ERROR at setup of test_read_without_creds_from_pub_bucket ___________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5777ca500>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c0e5ed0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-d14d1716-2480-4543-9ad3-5f1...nvocation-id': b'aeeb4040-f79d-48ee-9e84-dd4c9b9eb936', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5777ca500>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5777ca500>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_without_creds_from_pub_bucket>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd57c0e5ed0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-d14d1716-2480-4543-9ad3-5f1...nvocation-id': b'aeeb4040-f79d-48ee-9e84-dd4c9b9eb936', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-d14d1716-2480-4543-9ad3-5f1ff0f6f125"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
____________ ERROR at setup of test_read_with_creds_from_pub_bucket ____________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd577674130>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd576a69c90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-c48dfa0d-8bb1-410f-a33a-f36...nvocation-id': b'60b5c76b-7e2e-41e6-9e44-825fc6bc1ad7', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd577674130>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd577674130>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_read_with_creds_from_pub_bucket>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd576a69c90>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-c48dfa0d-8bb1-410f-a33a-f36...nvocation-id': b'60b5c76b-7e2e-41e6-9e44-825fc6bc1ad7', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-c48dfa0d-8bb1-410f-a33a-f36367eddbae"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
______________ ERROR at setup of test_s3_permission_output[lxml] _______________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd576b623b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd5814149a0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-15fd2930-9c8c-409e-bc2f-262...nvocation-id': b'522376f0-6b1f-4c00-b844-cb3ac3787f99', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd576b623b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd576b623b0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_permission_output[lxml]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd5814149a0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-15fd2930-9c8c-409e-bc2f-262...nvocation-id': b'522376f0-6b1f-4c00-b844-cb3ac3787f99', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-15fd2930-9c8c-409e-bc2f-2623d94637b9"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
______________ ERROR at setup of test_s3_permission_output[etree] ______________

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828005b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
>           sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:85: in create_connection
    raise err
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

address = ('127.0.0.1', 5555), timeout = 60, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(
        address: tuple[str, int],
        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,
        source_address: tuple[str, int] | None = None,
        socket_options: _TYPE_SOCKET_OPTIONS | None = None,
    ) -> socket.socket:
        """Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`socket.getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of '' or port 0 tells the OS to use the default.
        """
    
        host, port = address
        if host.startswith("["):
            host = host.strip("[]")
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        try:
            host.encode("idna")
        except UnicodeError:
            raise LocationParseError(f"'{host}', label empty or too long") from None
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not _DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
>               sock.connect(sa)
E               ConnectionRefusedError: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/util/connection.py:73: ConnectionRefusedError

The above exception was the direct cause of the following exception:

self = <botocore.httpsession.URLLib3Session object at 0x7fd58b452fb0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e2daf2c0-6317-4147-8bd7-880...nvocation-id': b'ce07fa92-2a9c-43c6-8158-b134f87a4146', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
>           urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:841: in urlopen
    retries = retries.increment(
/usr/local/lib/python3.10/site-packages/urllib3/util/retry.py:449: in increment
    raise reraise(type(error), error, _stacktrace)
/usr/local/lib/python3.10/site-packages/urllib3/util/util.py:39: in reraise
    raise value
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:787: in urlopen
    response = self._make_request(
/usr/local/lib/python3.10/site-packages/urllib3/connectionpool.py:493: in _make_request
    conn.request(
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:96: in request
    rval = super().request(method, url, body, headers, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:445: in request
    self.endheaders()
/usr/local/lib/python3.10/http/client.py:1277: in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:123: in _send_output
    self.send(msg)
/usr/local/lib/python3.10/site-packages/botocore/awsrequest.py:223: in send
    return super().send(str)
/usr/local/lib/python3.10/http/client.py:975: in send
    self.connect()
/usr/local/lib/python3.10/site-packages/urllib3/connection.py:276: in connect
    self.sock = self._new_conn()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828005b0>

    def _new_conn(self) -> socket.socket:
        """Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        """
        try:
            sock = connection.create_connection(
                (self._dns_host, self.port),
                self.timeout,
                source_address=self.source_address,
                socket_options=self.socket_options,
            )
        except socket.gaierror as e:
            raise NameResolutionError(self.host, self, e) from e
        except SocketTimeout as e:
            raise ConnectTimeoutError(
                self,
                f"Connection to {self.host} timed out. (connect timeout={self.timeout})",
            ) from e
    
        except OSError as e:
>           raise NewConnectionError(
                self, f"Failed to establish a new connection: {e}"
            ) from e
E           urllib3.exceptions.NewConnectionError: <botocore.awsrequest.AWSHTTPConnection object at 0x7fd5828005b0>: Failed to establish a new connection: [Errno 111] Connection refused

/usr/local/lib/python3.10/site-packages/urllib3/connection.py:213: NewConnectionError

During handling of the above exception, another exception occurred:

item = <Function test_s3_permission_output[etree]>

    @pytest.hookimpl(wrapper=True, tryfirst=True)
    def pytest_runtest_setup(item):
        """
        Hook called after before test setup starts, to start capturing exceptions
        as early as possible.
        """
        capture_enabled = _is_exception_capture_enabled(item)
        if capture_enabled:
            item.qt_exception_capture_manager = _QtExceptionCaptureManager()
            item.qt_exception_capture_manager.start()
>       result = yield

/usr/local/lib/python3.10/site-packages/pytestqt/plugin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/io/conftest.py:131: in s3_public_bucket
    bucket.create()
/usr/local/lib/python3.10/site-packages/boto3/resources/factory.py:581: in do_action
    response = action(self, *args, **kwargs)
/usr/local/lib/python3.10/site-packages/boto3/resources/action.py:88: in __call__
    response = getattr(parent.meta.client, operation_name)(*args, **params)
/usr/local/lib/python3.10/site-packages/botocore/client.py:569: in _api_call
    return self._make_api_call(operation_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/client.py:1005: in _make_api_call
    http, parsed_response = self._make_request(
/usr/local/lib/python3.10/site-packages/botocore/client.py:1029: in _make_request
    return self._endpoint.make_request(operation_model, request_dict)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:119: in make_request
    return self._send_request(request_dict, operation_model)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:200: in _send_request
    while self._needs_retry(
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:360: in _needs_retry
    responses = self._event_emitter.emit(
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:412: in emit
    return self._emitter.emit(aliased_event_name, **kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:256: in emit
    return self._emit(event_name, kwargs)
/usr/local/lib/python3.10/site-packages/botocore/hooks.py:239: in _emit
    response = handler(**kwargs)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:207: in __call__
    if self._checker(**checker_kwargs):
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:284: in __call__
    should_retry = self._should_retry(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:320: in _should_retry
    return self._checker(attempt_number, response, caught_exception)
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:363: in __call__
    checker_response = checker(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:247: in __call__
    return self._check_caught_exception(
/usr/local/lib/python3.10/site-packages/botocore/retryhandler.py:416: in _check_caught_exception
    raise caught_exception
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:279: in _do_get_response
    http_response = self._send(request)
/usr/local/lib/python3.10/site-packages/botocore/endpoint.py:383: in _send
    return self.http_session.send(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <botocore.httpsession.URLLib3Session object at 0x7fd58b452fb0>
request = <AWSPreparedRequest stream_output=False, method=PUT, url=http://127.0.0.1:5555/pandas-test-e2daf2c0-6317-4147-8bd7-880...nvocation-id': b'ce07fa92-2a9c-43c6-8158-b134f87a4146', 'amz-sdk-request': b'attempt=5; max=5', 'Content-Length': '0'}>

    def send(self, request):
        try:
            proxy_url = self._proxy_config.proxy_url_for(request.url)
            manager = self._get_connection_manager(request.url, proxy_url)
            conn = manager.connection_from_url(request.url)
            self._setup_ssl_cert(conn, request.url, self._verify)
            if ensure_boolean(
                os.environ.get('BOTO_EXPERIMENTAL__ADD_PROXY_HOST_HEADER', '')
            ):
                # This is currently an "experimental" feature which provides
                # no guarantees of backwards compatibility. It may be subject
                # to change or removal in any patch version. Anyone opting in
                # to this feature should strictly pin botocore.
                host = urlparse(request.url).hostname
                conn.proxy_headers['host'] = host
    
            request_target = self._get_request_target(request.url, proxy_url)
            urllib_response = conn.urlopen(
                method=request.method,
                url=request_target,
                body=request.body,
                headers=request.headers,
                retries=Retry(False),
                assert_same_host=False,
                preload_content=False,
                decode_content=False,
                chunked=self._chunked(request.headers),
            )
    
            http_response = botocore.awsrequest.AWSResponse(
                request.url,
                urllib_response.status,
                urllib_response.headers,
                urllib_response,
            )
    
            if not request.stream_output:
                # Cause the raw stream to be exhausted immediately. We do it
                # this way instead of using preload_content because
                # preload_content will never buffer chunked responses
                http_response.content
    
            return http_response
        except URLLib3SSLError as e:
            raise SSLError(endpoint_url=request.url, error=e)
        except (NewConnectionError, socket.gaierror) as e:
>           raise EndpointConnectionError(endpoint_url=request.url, error=e)
E           botocore.exceptions.EndpointConnectionError: Could not connect to the endpoint URL: "http://127.0.0.1:5555/pandas-test-e2daf2c0-6317-4147-8bd7-880a41a566c4"

/usr/local/lib/python3.10/site-packages/botocore/httpsession.py:493: EndpointConnectionError
=================================== FAILURES ===================================
______________________ TestTableSchemaRepr.test_publishes ______________________

self = <pandas.tests.io.formats.test_ipython_compat.TestTableSchemaRepr object at 0x7fd6ce688a00>
ip = <IPython.core.interactiveshell.InteractiveShell object at 0x7fd57f5b9060>

    def test_publishes(self, ip):
        ipython = ip.instance(config=ip.config)
        df = DataFrame({"A": [1, 2]})
        objects = [df["A"], df]  # dataframe / series
        expected_keys = [
            {"text/plain", "application/vnd.dataresource+json"},
            {"text/plain", "text/html", "application/vnd.dataresource+json"},
        ]
    
        opt = cf.option_context("display.html.table_schema", True)
        last_obj = None
        for obj, expected in zip(objects, expected_keys):
            last_obj = obj
>           with opt:

pandas/tests/io/formats/test_ipython_compat.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <contextlib._GeneratorContextManager object at 0x7fd57f4555d0>

    def __enter__(self):
        # do not keep args and kwds alive unnecessarily
        # they are only needed for recreation, which is not possible anymore
>       del self.args, self.kwds, self.func
E       AttributeError: args

/usr/local/lib/python3.10/contextlib.py:133: AttributeError
_____________________________ test_no_track_times ______________________________

tmp_path = PosixPath('/tmp/pytest-of-root/pytest-0/test_no_track_times0')
setup_path = 'tmp.__674ef632-9054-4325-9602-363772bc9c4c__.h5'

    def test_no_track_times(tmp_path, setup_path):
        # GH 32682
        # enables to set track_times (see `pytables` `create_table` documentation)
    
        def checksum(filename, hash_factory=hashlib.md5, chunk_num_blocks=128):
            h = hash_factory()
            with open(filename, "rb") as f:
                for chunk in iter(lambda: f.read(chunk_num_blocks * h.block_size), b""):
                    h.update(chunk)
            return h.digest()
    
        def create_h5_and_return_checksum(tmp_path, track_times):
            path = tmp_path / setup_path
            df = DataFrame({"a": [1]})
    
            with HDFStore(path, mode="w") as hdf:
                hdf.put(
                    "table",
                    df,
                    format="table",
                    data_columns=True,
                    index=None,
                    track_times=track_times,
                )
    
            return checksum(path)
    
        checksum_0_tt_false = create_h5_and_return_checksum(tmp_path, track_times=False)
        checksum_0_tt_true = create_h5_and_return_checksum(tmp_path, track_times=True)
    
        # sleep is necessary to create h5 with different creation time
        time.sleep(1)
    
        checksum_1_tt_false = create_h5_and_return_checksum(tmp_path, track_times=False)
        checksum_1_tt_true = create_h5_and_return_checksum(tmp_path, track_times=True)
    
        # checksums are the same if track_time = False
        assert checksum_0_tt_false == checksum_1_tt_false
    
        # checksums are NOT same if track_time = True
>       assert checksum_0_tt_true != checksum_1_tt_true
E       AssertionError: assert b'}\x05hL\xa4\x96\x86\x9a\xfa\xba2\x1a\x12\xe7j*' != b'}\x05hL\xa4\x96\x86\x9a\xfa\xba2\x1a\x12\xe7j*'

pandas/tests/io/pytables/test_store.py:102: AssertionError
______________ TestReadHtml.test_encode[chinese_utf-16.html-bs4] _______________

self = <pandas.tests.io.test_html.TestReadHtml object at 0x7fd6ca0f42b0>
html_encoding_file = '/home/pandas/pandas/tests/io/data/html_encoding/chinese_utf-16.html'
flavor_read_html = functools.partial(<function read_html at 0x7fd703c37760>, flavor='bs4')

    @pytest.mark.filterwarnings(
        "ignore:You provided Unicode markup but also provided a value for "
        "from_encoding.*:UserWarning"
    )
    def test_encode(self, html_encoding_file, flavor_read_html):
        base_path = os.path.basename(html_encoding_file)
        root = os.path.splitext(base_path)[0]
        _, encoding = root.split("_")
    
        try:
            with open(html_encoding_file, "rb") as fobj:
>               from_string = flavor_read_html(
                    BytesIO(fobj.read()), encoding=encoding, index_col=0
                ).pop()

pandas/tests/io/test_html.py:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/io/html.py:1229: in read_html
    return _parse(
pandas/io/html.py:1004: in _parse
    raise retained
pandas/io/html.py:984: in _parse
    tables = p.parse_tables()
pandas/io/html.py:242: in parse_tables
    tables = self._parse_tables(self._build_doc(), self.match, self.attrs)
pandas/io/html.py:664: in _build_doc
    bdoc = self._setup_build_doc()
pandas/io/html.py:656: in _setup_build_doc
    raw_text = _read(self.io, self.encoding, self.storage_options)
pandas/io/html.py:138: in _read
    return handles.handle.read()
/usr/local/lib/python3.10/codecs.py:322: in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <encodings.utf_16.IncrementalDecoder object at 0x7fd580d21c90>
input = b'\xff\xfe<\x00t\x00a\x00b\x00l\x00e\x00 \x00b\x00o\x00r\x00d\x00e\x00r\x00=\x00"\x001\x00"\x00 \x00c\x00l\x00a\x00s\x...00r\x00>\x00\r\n\x00 \x00 \x00<\x00/\x00t\x00b\x00o\x00d\x00y\x00>\x00\r\n\x00<\x00/\x00t\x00a\x00b\x00l\x00e\x00>\x00'
errors = 'strict', final = True

    def _buffer_decode(self, input, errors, final):
        if self.decoder is None:
            (output, consumed, byteorder) = \
>               codecs.utf_16_ex_decode(input, errors, 0, final)
E           UnicodeDecodeError: 'utf-16-le' codec can't decode byte 0x00 in position 850: truncated data

/usr/local/lib/python3.10/encodings/utf_16.py:61: UnicodeDecodeError
______________ TestReadHtml.test_encode[chinese_utf-32.html-bs4] _______________

self = <pandas.tests.io.test_html.TestReadHtml object at 0x7fd6ca0f4520>
html_encoding_file = '/home/pandas/pandas/tests/io/data/html_encoding/chinese_utf-32.html'
flavor_read_html = functools.partial(<function read_html at 0x7fd703c37760>, flavor='bs4')

    @pytest.mark.filterwarnings(
        "ignore:You provided Unicode markup but also provided a value for "
        "from_encoding.*:UserWarning"
    )
    def test_encode(self, html_encoding_file, flavor_read_html):
        base_path = os.path.basename(html_encoding_file)
        root = os.path.splitext(base_path)[0]
        _, encoding = root.split("_")
    
        try:
            with open(html_encoding_file, "rb") as fobj:
>               from_string = flavor_read_html(
                    BytesIO(fobj.read()), encoding=encoding, index_col=0
                ).pop()

pandas/tests/io/test_html.py:1409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/io/html.py:1229: in read_html
    return _parse(
pandas/io/html.py:1004: in _parse
    raise retained
pandas/io/html.py:984: in _parse
    tables = p.parse_tables()
pandas/io/html.py:242: in parse_tables
    tables = self._parse_tables(self._build_doc(), self.match, self.attrs)
pandas/io/html.py:664: in _build_doc
    bdoc = self._setup_build_doc()
pandas/io/html.py:656: in _setup_build_doc
    raw_text = _read(self.io, self.encoding, self.storage_options)
pandas/io/html.py:138: in _read
    return handles.handle.read()
/usr/local/lib/python3.10/codecs.py:322: in decode
    (result, consumed) = self._buffer_decode(data, self.errors, final)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <encodings.utf_32.IncrementalDecoder object at 0x7fd580c40460>
input = b'\xff\xfe\x00\x00<\x00\x00\x00t\x00\x00\x00a\x00\x00\x00b\x00\x00\x00l\x00\x00\x00e\x00\x00\x00 \x00\x00\x00b\x00\x00...\n\x00\x00\x00<\x00\x00\x00/\x00\x00\x00t\x00\x00\x00a\x00\x00\x00b\x00\x00\x00l\x00\x00\x00e\x00\x00\x00>\x00\x00\x00'
errors = 'strict', final = True

    def _buffer_decode(self, input, errors, final):
        if self.decoder is None:
            (output, consumed, byteorder) = \
>               codecs.utf_32_ex_decode(input, errors, 0, final)
E           UnicodeDecodeError: 'utf-32-le' codec can't decode bytes in position 192-195: code point not in range(0x110000)

/usr/local/lib/python3.10/encodings/utf_32.py:56: UnicodeDecodeError
______________ TestReadHtml.test_encode[chinese_utf-32.html-lxml] ______________

self = <pandas.tests.io.test_html.TestReadHtml object at 0x7fd6ca0f43a0>
html_encoding_file = '/home/pandas/pandas/tests/io/data/html_encoding/chinese_utf-32.html'
flavor_read_html = functools.partial(<function read_html at 0x7fd703c37760>, flavor='lxml')

    @pytest.mark.filterwarnings(
        "ignore:You provided Unicode markup but also provided a value for "
        "from_encoding.*:UserWarning"
    )
    def test_encode(self, html_encoding_file, flavor_read_html):
        base_path = os.path.basename(html_encoding_file)
        root = os.path.splitext(base_path)[0]
        _, encoding = root.split("_")
    
        try:
            with open(html_encoding_file, "rb") as fobj:
                from_string = flavor_read_html(
                    BytesIO(fobj.read()), encoding=encoding, index_col=0
>               ).pop()
E               IndexError: pop from empty list

pandas/tests/io/test_html.py:1411: IndexError
_________ TestCoercionFloat32.test_int_key[setitem-1.1-float32-False] __________

self = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1, value = 1.1

    def __setitem__(self, key, value) -> None:
        if not PYPY:
            if sys.getrefcount(self) <= 3:
                warnings.warn(
                    _chained_assignment_msg, ChainedAssignmentError, stacklevel=2
                )
    
        check_dict_or_set_indexers(key)
        key = com.apply_if_callable(key, self)
    
        if key is Ellipsis:
            key = slice(None)
    
        if isinstance(key, slice):
            indexer = self.index._convert_slice_indexer(key, kind="getitem")
            return self._set_values(indexer, value)
    
        try:
>           self._set_with_engine(key, value)

pandas/core/series.py:1075: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:1128: in _set_with_engine
    self._mgr.setitem_inplace(loc, value)
pandas/core/internals/managers.py:2165: in setitem_inplace
    value = np_can_hold_element(arr.dtype, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = NumpyBlock: 4 dtype: float32, indexer = 1, value = 1.1

    def setitem(self, indexer, value) -> Block:
        """
        Attempt self.values[indexer] = value, possibly creating a new array.
    
        Parameters
        ----------
        indexer : tuple, list-like, array-like, slice, int
            The subset of self.values to set
        value : object
            The value being set
    
        Returns
        -------
        Block
    
        Notes
        -----
        `indexer` is a direct slice/positional indexer. `value` must
        be a compatible shape.
        """
    
        value = self._standardize_fill_value(value)
    
        values = cast(np.ndarray, self.values)
        if self.ndim == 2:
            values = values.T
    
        # length checking
        check_setitem_lengths(indexer, value, values)
    
        if self.dtype != _dtype_obj:
            # GH48933: extract_array would convert a pd.Series value to np.ndarray
            value = extract_array(value, extract_numpy=True)
        try:
>           casted = np_can_hold_element(values.dtype, value)

pandas/core/internals/blocks.py:1115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa47370>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function setitem at 0x7fd703bfbac0>, is_inplace = True

    def test_int_key(self, obj, key, expected, raises, val, indexer_sli, is_inplace):
        if not isinstance(key, int):
            pytest.skip("Not relevant for int key")
        if raises:
            ctx = pytest.raises(TypeError, match="Invalid value")
        else:
            ctx = contextlib.nullcontext()
    
        with ctx:
>           self.check_indexer(obj, key, expected, val, indexer_sli, is_inplace)

pandas/tests/series/indexing/test_setitem.py:750: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/series/indexing/test_setitem.py:721: in check_indexer
    indexer(obj)[key] = val
pandas/core/series.py:1085: in __setitem__
    self._set_values(indexer, value)
pandas/core/series.py:1153: in _set_values
    self._mgr = self._mgr.setitem(indexer=key, value=value)
pandas/core/internals/managers.py:581: in setitem
    return self.apply("setitem", indexer=indexer, value=value)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1118: in setitem
    nb = self.coerce_to_target_dtype(value, raise_on_upcast=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
___________ TestCoercionFloat32.test_int_key[loc-1.1-float32-False] ____________

self = NumpyBlock: 4 dtype: float32, indexer = 1, value = 1.1

    def setitem(self, indexer, value) -> Block:
        """
        Attempt self.values[indexer] = value, possibly creating a new array.
    
        Parameters
        ----------
        indexer : tuple, list-like, array-like, slice, int
            The subset of self.values to set
        value : object
            The value being set
    
        Returns
        -------
        Block
    
        Notes
        -----
        `indexer` is a direct slice/positional indexer. `value` must
        be a compatible shape.
        """
    
        value = self._standardize_fill_value(value)
    
        values = cast(np.ndarray, self.values)
        if self.ndim == 2:
            values = values.T
    
        # length checking
        check_setitem_lengths(indexer, value, values)
    
        if self.dtype != _dtype_obj:
            # GH48933: extract_array would convert a pd.Series value to np.ndarray
            value = extract_array(value, extract_numpy=True)
        try:
>           casted = np_can_hold_element(values.dtype, value)

pandas/core/internals/blocks.py:1115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6c490>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function loc at 0x7fd703bfbb50>, is_inplace = True

    def test_int_key(self, obj, key, expected, raises, val, indexer_sli, is_inplace):
        if not isinstance(key, int):
            pytest.skip("Not relevant for int key")
        if raises:
            ctx = pytest.raises(TypeError, match="Invalid value")
        else:
            ctx = contextlib.nullcontext()
    
        with ctx:
>           self.check_indexer(obj, key, expected, val, indexer_sli, is_inplace)

pandas/tests/series/indexing/test_setitem.py:750: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/series/indexing/test_setitem.py:721: in check_indexer
    indexer(obj)[key] = val
pandas/core/indexing.py:920: in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
pandas/core/indexing.py:1940: in _setitem_with_indexer
    self._setitem_single_block(indexer, value, name)
pandas/core/indexing.py:2204: in _setitem_single_block
    self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)
pandas/core/internals/managers.py:581: in setitem
    return self.apply("setitem", indexer=indexer, value=value)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1118: in setitem
    nb = self.coerce_to_target_dtype(value, raise_on_upcast=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
___________ TestCoercionFloat32.test_int_key[iloc-1.1-float32-False] ___________

self = NumpyBlock: 4 dtype: float32, indexer = 1, value = 1.1

    def setitem(self, indexer, value) -> Block:
        """
        Attempt self.values[indexer] = value, possibly creating a new array.
    
        Parameters
        ----------
        indexer : tuple, list-like, array-like, slice, int
            The subset of self.values to set
        value : object
            The value being set
    
        Returns
        -------
        Block
    
        Notes
        -----
        `indexer` is a direct slice/positional indexer. `value` must
        be a compatible shape.
        """
    
        value = self._standardize_fill_value(value)
    
        values = cast(np.ndarray, self.values)
        if self.ndim == 2:
            values = values.T
    
        # length checking
        check_setitem_lengths(indexer, value, values)
    
        if self.dtype != _dtype_obj:
            # GH48933: extract_array would convert a pd.Series value to np.ndarray
            value = extract_array(value, extract_numpy=True)
        try:
>           casted = np_can_hold_element(values.dtype, value)

pandas/core/internals/blocks.py:1115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6cb50>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function iloc at 0x7fd703bfbbe0>, is_inplace = True

    def test_int_key(self, obj, key, expected, raises, val, indexer_sli, is_inplace):
        if not isinstance(key, int):
            pytest.skip("Not relevant for int key")
        if raises:
            ctx = pytest.raises(TypeError, match="Invalid value")
        else:
            ctx = contextlib.nullcontext()
    
        with ctx:
>           self.check_indexer(obj, key, expected, val, indexer_sli, is_inplace)

pandas/tests/series/indexing/test_setitem.py:750: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/tests/series/indexing/test_setitem.py:721: in check_indexer
    indexer(obj)[key] = val
pandas/core/indexing.py:920: in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
pandas/core/indexing.py:1940: in _setitem_with_indexer
    self._setitem_single_block(indexer, value, name)
pandas/core/indexing.py:2204: in _setitem_single_block
    self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)
pandas/core/internals/managers.py:581: in setitem
    return self.apply("setitem", indexer=indexer, value=value)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1118: in setitem
    nb = self.coerce_to_target_dtype(value, raise_on_upcast=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
_________ TestCoercionFloat32.test_mask_key[setitem-1.1-float32-False] _________

self = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32
key = array([False,  True, False, False]), value = 1.1

    def __setitem__(self, key, value) -> None:
        if not PYPY:
            if sys.getrefcount(self) <= 3:
                warnings.warn(
                    _chained_assignment_msg, ChainedAssignmentError, stacklevel=2
                )
    
        check_dict_or_set_indexers(key)
        key = com.apply_if_callable(key, self)
    
        if key is Ellipsis:
            key = slice(None)
    
        if isinstance(key, slice):
            indexer = self.index._convert_slice_indexer(key, kind="getitem")
            return self._set_values(indexer, value)
    
        try:
>           self._set_with_engine(key, value)

pandas/core/series.py:1075: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:1125: in _set_with_engine
    loc = self.index.get_loc(key)
pandas/core/indexes/range.py:484: in get_loc
    self._check_indexing_error(key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = RangeIndex(start=0, stop=4, step=1)
key = array([False,  True, False, False])

    def _check_indexing_error(self, key) -> None:
        if not is_scalar(key):
            # if key is not a scalar, directly raise an error (the code below
            # would convert to numpy arrays and raise later any way) - GH29926
>           raise InvalidIndexError(key)
E           pandas.errors.InvalidIndexError: [False  True False False]

pandas/core/indexes/base.py:5909: InvalidIndexError

During handling of the above exception, another exception occurred:

self = NumpyBlock: 4 dtype: float32, mask = array([False,  True, False, False])
new = 1.1

    def putmask(self, mask, new) -> list[Block]:
        """
        putmask the data to the block; it is possible that we may create a
        new dtype of block
    
        Return the resulting block(s).
    
        Parameters
        ----------
        mask : np.ndarray[bool], SparseArray[bool], or BooleanArray
        new : a ndarray/object
    
        Returns
        -------
        List[Block]
        """
        orig_mask = mask
        values = cast(np.ndarray, self.values)
        mask, noop = validate_putmask(values.T, mask)
        assert not isinstance(new, (ABCIndex, ABCSeries, ABCDataFrame))
    
        if new is lib.no_default:
            new = self.fill_value
    
        new = self._standardize_fill_value(new)
        new = extract_array(new, extract_numpy=True)
    
        if noop:
            return [self.copy(deep=False)]
    
        try:
>           casted = np_can_hold_element(values.dtype, new)

pandas/core/internals/blocks.py:1175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6d510>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function setitem at 0x7fd703bfbac0>

    def test_mask_key(self, obj, key, expected, raises, val, indexer_sli):
        # setitem with boolean mask
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        obj = obj.copy()
    
        if is_list_like(val) and len(val) < mask.sum():
            msg = "boolean index did not match indexed array along dimension"
            with pytest.raises(IndexError, match=msg):
                indexer_sli(obj)[mask] = val
            return
    
        if raises:
            with pytest.raises(TypeError, match="Invalid value"):
                indexer_sli(obj)[mask] = val
        else:
>           indexer_sli(obj)[mask] = val

pandas/tests/series/indexing/test_setitem.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/series.py:1115: in __setitem__
    self._where(~key, value, inplace=True)
pandas/core/generic.py:9806: in _where
    new_data = self._mgr.putmask(mask=cond, new=other, align=align)
pandas/core/internals/managers.py:484: in putmask
    return self.apply(
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1188: in putmask
    return self.coerce_to_target_dtype(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
___________ TestCoercionFloat32.test_mask_key[loc-1.1-float32-False] ___________

self = NumpyBlock: 4 dtype: float32, indexer = array([1]), value = 1.1

    def setitem(self, indexer, value) -> Block:
        """
        Attempt self.values[indexer] = value, possibly creating a new array.
    
        Parameters
        ----------
        indexer : tuple, list-like, array-like, slice, int
            The subset of self.values to set
        value : object
            The value being set
    
        Returns
        -------
        Block
    
        Notes
        -----
        `indexer` is a direct slice/positional indexer. `value` must
        be a compatible shape.
        """
    
        value = self._standardize_fill_value(value)
    
        values = cast(np.ndarray, self.values)
        if self.ndim == 2:
            values = values.T
    
        # length checking
        check_setitem_lengths(indexer, value, values)
    
        if self.dtype != _dtype_obj:
            # GH48933: extract_array would convert a pd.Series value to np.ndarray
            value = extract_array(value, extract_numpy=True)
        try:
>           casted = np_can_hold_element(values.dtype, value)

pandas/core/internals/blocks.py:1115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6e5f0>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function loc at 0x7fd703bfbb50>

    def test_mask_key(self, obj, key, expected, raises, val, indexer_sli):
        # setitem with boolean mask
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        obj = obj.copy()
    
        if is_list_like(val) and len(val) < mask.sum():
            msg = "boolean index did not match indexed array along dimension"
            with pytest.raises(IndexError, match=msg):
                indexer_sli(obj)[mask] = val
            return
    
        if raises:
            with pytest.raises(TypeError, match="Invalid value"):
                indexer_sli(obj)[mask] = val
        else:
>           indexer_sli(obj)[mask] = val

pandas/tests/series/indexing/test_setitem.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:920: in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
pandas/core/indexing.py:1940: in _setitem_with_indexer
    self._setitem_single_block(indexer, value, name)
pandas/core/indexing.py:2204: in _setitem_single_block
    self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)
pandas/core/internals/managers.py:581: in setitem
    return self.apply("setitem", indexer=indexer, value=value)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1118: in setitem
    nb = self.coerce_to_target_dtype(value, raise_on_upcast=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
__________ TestCoercionFloat32.test_mask_key[iloc-1.1-float32-False] ___________

self = NumpyBlock: 4 dtype: float32
indexer = array([False,  True, False, False]), value = 1.1

    def setitem(self, indexer, value) -> Block:
        """
        Attempt self.values[indexer] = value, possibly creating a new array.
    
        Parameters
        ----------
        indexer : tuple, list-like, array-like, slice, int
            The subset of self.values to set
        value : object
            The value being set
    
        Returns
        -------
        Block
    
        Notes
        -----
        `indexer` is a direct slice/positional indexer. `value` must
        be a compatible shape.
        """
    
        value = self._standardize_fill_value(value)
    
        values = cast(np.ndarray, self.values)
        if self.ndim == 2:
            values = values.T
    
        # length checking
        check_setitem_lengths(indexer, value, values)
    
        if self.dtype != _dtype_obj:
            # GH48933: extract_array would convert a pd.Series value to np.ndarray
            value = extract_array(value, extract_numpy=True)
        try:
>           casted = np_can_hold_element(values.dtype, value)

pandas/core/internals/blocks.py:1115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dtype = dtype('float32'), element = 1.1

    def np_can_hold_element(dtype: np.dtype, element: Any) -> Any:
        """
        Raise if we cannot losslessly set this element into an ndarray with this dtype.
    
        Specifically about places where we disagree with numpy.  i.e. there are
        cases where numpy will raise in doing the setitem that we do not check
        for here, e.g. setting str "X" into a numeric ndarray.
    
        Returns
        -------
        Any
            The element, potentially cast to the dtype.
    
        Raises
        ------
        ValueError : If we cannot losslessly store this element with this dtype.
        """
        if dtype == _dtype_obj:
            return element
    
        tipo = _maybe_infer_dtype_type(element)
    
        if dtype.kind in "iu":
            if isinstance(element, range):
                if _dtype_can_hold_range(element, dtype):
                    return element
                raise LossySetitemError
    
            if is_integer(element) or (is_float(element) and element.is_integer()):
                # e.g. test_setitem_series_int8 if we have a python int 1
                #  tipo may be np.int32, despite the fact that it will fit
                #  in smaller int dtypes.
                info = np.iinfo(dtype)
                if info.min <= element <= info.max:
                    return dtype.type(element)
                raise LossySetitemError
    
            if tipo is not None:
                if tipo.kind not in "iu":
                    if isinstance(element, np.ndarray) and element.dtype.kind == "f":
                        # If all can be losslessly cast to integers, then we can hold them
                        with np.errstate(invalid="ignore"):
                            # We check afterwards if cast was losslessly, so no need to show
                            # the warning
                            casted = element.astype(dtype)
                        comp = casted == element
                        if comp.all():
                            # Return the casted values bc they can be passed to
                            #  np.putmask, whereas the raw values cannot.
                            #  see TestSetitemFloatNDarrayIntoIntegerSeries
                            return casted
                        raise LossySetitemError
    
                    elif isinstance(element, ABCExtensionArray) and isinstance(
                        element.dtype, CategoricalDtype
                    ):
                        # GH#52927 setting Categorical value into non-EA frame
                        # TODO: general-case for EAs?
                        try:
                            casted = element.astype(dtype)
                        except (ValueError, TypeError) as err:
                            raise LossySetitemError from err
                        # Check for cases of either
                        #  a) lossy overflow/rounding or
                        #  b) semantic changes like dt64->int64
                        comp = casted == element
                        if not comp.all():
                            raise LossySetitemError
                        return casted
    
                    # Anything other than integer we cannot hold
                    raise LossySetitemError
                if (
                    dtype.kind == "u"
                    and isinstance(element, np.ndarray)
                    and element.dtype.kind == "i"
                ):
                    # see test_where_uint64
                    casted = element.astype(dtype)
                    if (casted == element).all():
                        # TODO: faster to check (element >=0).all()?  potential
                        #  itemsize issues there?
                        return casted
                    raise LossySetitemError
                if dtype.itemsize < tipo.itemsize:
                    raise LossySetitemError
                if not isinstance(tipo, np.dtype):
                    # i.e. nullable IntegerDtype; we can put this into an ndarray
                    #  losslessly iff it has no NAs
                    arr = element._values if isinstance(element, ABCSeries) else element
                    if arr._hasna:
                        raise LossySetitemError
                    return element
    
                return element
    
            raise LossySetitemError
    
        if dtype.kind == "f":
            if lib.is_integer(element) or lib.is_float(element):
                casted = dtype.type(element)
                if np.isnan(casted) or casted == element:
                    return casted
                # otherwise e.g. overflow see TestCoercionFloat32
>               raise LossySetitemError
E               pandas.errors.LossySetitemError

pandas/core/dtypes/cast.py:1874: LossySetitemError

During handling of the above exception, another exception occurred:

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6ecb0>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, indexer_sli = <function iloc at 0x7fd703bfbbe0>

    def test_mask_key(self, obj, key, expected, raises, val, indexer_sli):
        # setitem with boolean mask
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        obj = obj.copy()
    
        if is_list_like(val) and len(val) < mask.sum():
            msg = "boolean index did not match indexed array along dimension"
            with pytest.raises(IndexError, match=msg):
                indexer_sli(obj)[mask] = val
            return
    
        if raises:
            with pytest.raises(TypeError, match="Invalid value"):
                indexer_sli(obj)[mask] = val
        else:
>           indexer_sli(obj)[mask] = val

pandas/tests/series/indexing/test_setitem.py:823: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/indexing.py:920: in __setitem__
    iloc._setitem_with_indexer(indexer, value, self.name)
pandas/core/indexing.py:1940: in _setitem_with_indexer
    self._setitem_single_block(indexer, value, name)
pandas/core/indexing.py:2204: in _setitem_single_block
    self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)
pandas/core/internals/managers.py:581: in setitem
    return self.apply("setitem", indexer=indexer, value=value)
pandas/core/internals/managers.py:438: in apply
    applied = getattr(b, f)(**kwargs)
pandas/core/internals/blocks.py:1118: in setitem
    nb = self.coerce_to_target_dtype(value, raise_on_upcast=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = NumpyBlock: 4 dtype: float32, other = 1.1, raise_on_upcast = True

    @final
    def coerce_to_target_dtype(self, other, raise_on_upcast: bool) -> Block:
        """
        coerce the current block to a dtype compat for other
        we will return a block, possibly object, and not raise
    
        we can also safely try to coerce to the same dtype
        and will receive the same block
        """
        new_dtype = find_result_type(self.values.dtype, other)
        if new_dtype == self.dtype:
            # GH#52927 avoid RecursionError
            raise AssertionError(
                "Something has gone wrong, please report a bug at "
                "https://github.com/pandas-dev/pandas/issues"
            )
    
        # In a future version of pandas, the default will be that
        # setting `nan` into an integer series won't raise.
        if (
            is_scalar(other)
            and is_integer_dtype(self.values.dtype)
            and isna(other)
            and other is not NaT
            and not (
                isinstance(other, (np.datetime64, np.timedelta64)) and np.isnat(other)
            )
        ):
            raise_on_upcast = False
        elif (
            isinstance(other, np.ndarray)
            and other.ndim == 1
            and is_integer_dtype(self.values.dtype)
            and is_float_dtype(other.dtype)
            and lib.has_only_ints_or_nan(other)
        ):
            raise_on_upcast = False
    
        if raise_on_upcast:
>           raise TypeError(f"Invalid value '{other}' for dtype '{self.values.dtype}'")
E           TypeError: Invalid value '1.1' for dtype 'float32'

pandas/core/internals/blocks.py:471: TypeError
___________ TestCoercionFloat32.test_series_where[1.1-float32-False] ___________

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa6f670>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1, is_inplace = True

    def test_series_where(self, obj, key, expected, raises, val, is_inplace):
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        if is_list_like(val) and len(val) < len(obj):
            # Series.where is not valid here
            msg = "operands could not be broadcast together with shapes"
            with pytest.raises(ValueError, match=msg):
                obj.where(~mask, val)
            return
    
        orig = obj
        obj = obj.copy()
        arr = obj._values
    
        res = obj.where(~mask, val)
    
        if val is NA and res.dtype == object:
            expected = expected.fillna(NA)
        elif val is None and res.dtype == object:
            assert expected.dtype == object
            expected = expected.copy()
            expected[expected.isna()] = None
>       tm.assert_series_equal(res, expected)
E       AssertionError: Attributes of Series are different
E       
E       Attribute "dtype" are different
E       [left]:  float64
E       [right]: float32

pandas/tests/series/indexing/test_setitem.py:848: AssertionError
___________ TestCoercionFloat32.test_index_where[1.1-float32-False] ____________

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa903a0>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1

    def test_index_where(self, obj, key, expected, raises, val):
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        res = Index(obj).where(~mask, val)
        expected_idx = Index(expected, dtype=expected.dtype)
>       tm.assert_index_equal(res, expected_idx)

pandas/tests/series/indexing/test_setitem.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = Index([1.100000023841858, 1.1, 3.299999952316284, 4.400000095367432], dtype='float64')
right = Index([1.100000023841858, 1.100000023841858, 3.299999952316284,
       4.400000095367432],
      dtype='float32')
obj = 'Index'

    def _check_types(left, right, obj: str = "Index") -> None:
        if not exact:
            return
    
        assert_class_equal(left, right, exact=exact, obj=obj)
        assert_attr_equal("inferred_type", left, right, obj=obj)
    
        # Skip exact dtype checking when `check_categorical` is False
        if isinstance(left.dtype, CategoricalDtype) and isinstance(
            right.dtype, CategoricalDtype
        ):
            if check_categorical:
                assert_attr_equal("dtype", left, right, obj=obj)
                assert_index_equal(left.categories, right.categories, exact=exact)
            return
    
>       assert_attr_equal("dtype", left, right, obj=obj)
E       AssertionError: Index are different
E       
E       Attribute "dtype" are different
E       [left]:  float64
E       [right]: float32

pandas/_testing/asserters.py:257: AssertionError
__________ TestCoercionFloat32.test_index_putmask[1.1-float32-False] ___________

self = <pandas.tests.series.indexing.test_setitem.TestCoercionFloat32 object at 0x7fd6bfa90fa0>
obj = 0    1.1
1    2.2
2    3.3
3    4.4
dtype: float32, key = 1
expected = 0    1.1
1    1.1
2    3.3
3    4.4
dtype: float32, raises = False
val = 1.1

    def test_index_putmask(self, obj, key, expected, raises, val):
        mask = np.zeros(obj.shape, dtype=bool)
        mask[key] = True
    
        res = Index(obj).putmask(mask, val)
>       tm.assert_index_equal(res, Index(expected, dtype=expected.dtype))

pandas/tests/series/indexing/test_setitem.py:865: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = Index([1.100000023841858, 1.1, 3.299999952316284, 4.400000095367432], dtype='float64')
right = Index([1.100000023841858, 1.100000023841858, 3.299999952316284,
       4.400000095367432],
      dtype='float32')
obj = 'Index'

    def _check_types(left, right, obj: str = "Index") -> None:
        if not exact:
            return
    
        assert_class_equal(left, right, exact=exact, obj=obj)
        assert_attr_equal("inferred_type", left, right, obj=obj)
    
        # Skip exact dtype checking when `check_categorical` is False
        if isinstance(left.dtype, CategoricalDtype) and isinstance(
            right.dtype, CategoricalDtype
        ):
            if check_categorical:
                assert_attr_equal("dtype", left, right, obj=obj)
                assert_index_equal(left.categories, right.categories, exact=exact)
            return
    
>       assert_attr_equal("dtype", left, right, obj=obj)
E       AssertionError: Index are different
E       
E       Attribute "dtype" are different
E       [left]:  float64
E       [right]: float32

pandas/_testing/asserters.py:257: AssertionError
______________________ TestEngine.test_numba_min_periods _______________________

self = <pandas.tests.window.test_numba.TestEngine object at 0x7fd6b91f83a0>

    def test_numba_min_periods(self):
        # GH 58868
        def last_row(x):
            assert len(x) == 3
            return x[-1]
    
        df = DataFrame([[1, 2], [3, 4], [5, 6], [7, 8]])
    
>       result = df.rolling(3, method="table", min_periods=3).apply(
            last_row, raw=True, engine="numba"
        )

pandas/tests/window/test_numba.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pandas/core/window/rolling.py:2097: in apply
    return super().apply(
pandas/core/window/rolling.py:1520: in apply
    return self._apply(
pandas/core/window/rolling.py:613: in _apply
    return self._apply_tablewise(homogeneous_func, name, numeric_only)
pandas/core/window/rolling.py:520: in _apply_tablewise
    result = homogeneous_func(values)
pandas/core/window/rolling.py:606: in homogeneous_func
    result = calc(values)
pandas/core/window/rolling.py:603: in calc
    return func(x, start, end, min_periods, *numba_args)
/usr/local/lib/python3.10/site-packages/numba/core/dispatcher.py:424: in _compile_for_args
    error_rewrite(e, 'typing')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

e = TypingError('Failed in nopython mode pipeline (step: nopython frontend)\nNo implementation of function Function(<funct...\n                result[i, :] = numba_func(window, *args)\n                ^\n\nDuring: Pass nopython_type_inference')
issue_type = 'typing'

    def error_rewrite(e, issue_type):
        """
        Rewrite and raise Exception `e` with help supplied based on the
        specified issue_type.
        """
        if config.SHOW_HELP:
            help_msg = errors.error_extras[issue_type]
            e.patch_message('\n'.join((str(e).rstrip(), help_msg)))
        if config.FULL_TRACEBACKS:
            raise e
        else:
>           raise e.with_traceback(None)
E           numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
E           No implementation of function Function(<function TestEngine.test_numba_min_periods.<locals>.last_row at 0x7fd5337437f0>) found for signature:
E            
E            >>> last_row(array(float64, 2d, C))
E            
E           There are 2 candidate implementations:
E             - Of which 2 did not match due to:
E             Overload in function 'register_jitable.<locals>.wrap.<locals>.ov_wrap': File: numba/core/extending.py: Line 161.
E               With argument(s): '(array(float64, 2d, C))':
E              Rejected as the implementation raised a specific error:
E                TypingError: Failed in nopython mode pipeline (step: nopython frontend)
E              Unknown attribute '_call_reprcompare' of type Module(<module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.10/site-packages/_pytest/assertion/rewrite.py'>)
E              
E              File "pandas/tests/window/test_numba.py", line 144:
E                      def last_row(x):
E                          assert len(x) == 3
E                          ^
E              
E              During: typing of get attribute at /home/pandas/pandas/tests/window/test_numba.py (144)
E              
E              File "pandas/tests/window/test_numba.py", line 144:
E                      def last_row(x):
E                          assert len(x) == 3
E                          ^
E              
E              During: Pass nopython_type_inference
E             raised from /usr/local/lib/python3.10/site-packages/numba/core/typeinfer.py:1074
E           
E           During: resolving callee type: Function(<function TestEngine.test_numba_min_periods.<locals>.last_row at 0x7fd5337437f0>)
E           During: typing of call at /home/pandas/pandas/core/window/numba_.py (236)
E           
E           
E           File "pandas/core/window/numba_.py", line 236:
E               def roll_table(
E                   <source elided>
E                       if nan_mask.any():
E                           result[i, :] = numba_func(window, *args)
E                           ^
E           
E           During: Pass nopython_type_inference

/usr/local/lib/python3.10/site-packages/numba/core/dispatcher.py:365: TypingError
=============================== warnings summary ===============================
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-True-0]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-True-0]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-True-1]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-True-1]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-False-0]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-False-0]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-False-1]
pandas/tests/apply/test_frame_apply.py::test_apply_args[numba-False-False-1]
  /usr/local/lib/python3.10/site-packages/numba/core/decorators.py:157: NumbaDeprecationWarning: The keyword argument 'nopython=False' was supplied. From Numba 0.59.0 the default is True and supplying this argument has no effect.
    warnings.warn(msg, NumbaDeprecationWarning)

pandas/tests/groupby/aggregate/test_numba.py::test_multifunc_numba_kwarg_propagation[data0-agg_kwargs0]
  /home/pandas/pandas/core/_numba/executor.py:84: NumbaTypeSafetyWarning: unsafe cast from uint64 to int64. Precision may be lost.
    na_positions[i] = np.array(na_pos)

pandas/tests/plotting/frame/test_frame.py: 11 warnings
  /usr/local/lib/python3.10/site-packages/matplotlib/transforms.py:2650: RuntimeWarning: divide by zero encountered in scalar divide
    x_scale = 1.0 / inw

pandas/tests/plotting/frame/test_frame.py: 11 warnings
  /usr/local/lib/python3.10/site-packages/matplotlib/transforms.py:2652: RuntimeWarning: invalid value encountered in scalar multiply
    self._mtx = np.array([[x_scale,     0.0, -inl*x_scale],

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=================================== XPASSES ====================================
---------------- generated xml file: /home/pandas/test-data.xml ----------------
============================= slowest 30 durations =============================
19.41s setup    pandas/tests/io/test_parquet.py::TestParquetPyArrow::test_s3_roundtrip_for_dir[partition_col0]
19.24s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('calamine', '.ods')]
18.40s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('calamine', '.xlsm')]
17.98s setup    pandas/tests/io/test_parquet.py::TestParquetPyArrow::test_s3_roundtrip_explicit_fs
17.51s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[(None, '.xls')]
16.77s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[(None, '.xls')]
16.42s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('xlrd', '.xls')]
16.14s setup    pandas/tests/io/xml/test_to_xml.py::test_s3_permission_output[etree]
15.97s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('calamine', '.ods')]
15.97s setup    pandas/tests/io/test_fsspec.py::test_s3_parquet
15.55s setup    pandas/tests/io/test_s3.py::test_read_without_creds_from_pub_bucket
15.44s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('calamine', '.xlsx')]
15.25s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('xlrd', '.xls')]
15.12s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('openpyxl', '.xlsm')]
15.09s setup    pandas/tests/io/excel/test_style.py::test_styler_to_s3
15.03s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('openpyxl', '.xlsx')]
14.91s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('calamine', '.xlsx')]
14.87s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('calamine', '.xls')]
14.77s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[(None, '.xlsm')]
14.62s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('calamine', '.xlsb')]
14.50s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[(None, '.xlsm')]
14.18s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[('odf', '.ods')]
14.12s setup    pandas/tests/io/test_fsspec.py::test_s3_protocols[s3n]
13.97s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_url[(None, '.xlsx')]
13.65s setup    pandas/tests/io/test_parquet.py::TestParquetPyArrow::test_s3_roundtrip
13.25s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('odf', '.ods')]
13.14s setup    pandas/tests/io/test_s3.py::test_read_with_creds_from_pub_bucket
12.74s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[(None, '.xlsx')]
12.35s setup    pandas/tests/io/excel/test_readers.py::TestReaders::test_read_from_s3_object[('calamine', '.xlsb')]
11.88s setup    pandas/tests/io/test_fsspec.py::test_from_s3_csv
=========================== short test summary info ============================
SKIPPED [2] pandas/tests/apply/test_frame_apply.py:333: numba can't handle when UDF returns None.
SKIPPED [2] pandas/tests/apply/test_frame_apply.py:359: isinstance check doesn't work with numba
SKIPPED [1] pandas/tests/apply/test_frame_apply.py:723: appending to list outside of numba func is not supported
SKIPPED [1] pandas/tests/apply/test_frame_apply.py:1611: No object dtype support in numba
SKIPPED [3] pandas/tests/apply/test_frame_transform.py:22: Test is only for DataFrame with axis=1
SKIPPED [3] pandas/tests/apply/test_frame_transform.py:22: Test is only for DataFrame with axis=index
SKIPPED [3] pandas/tests/apply/test_frame_transform.py:22: Test is only for DataFrame with axis=columns
SKIPPED [2] pandas/tests/apply/test_numba.py:31: Skipped
SKIPPED [1] pandas/tests/apply/test_numba.py:38: Skipped
SKIPPED [1] pandas/tests/apply/test_numba.py:53: Skipped
SKIPPED [8] pandas/tests/apply/test_numba.py:69: Skipped
SKIPPED [2] pandas/tests/apply/test_numba.py:80: Skipped
SKIPPED [1] pandas/tests/apply/test_numba.py:93: Skipped
SKIPPED [2] pandas/tests/apply/test_numba.py:102: Skipped
SKIPPED [2] pandas/tests/apply/test_numba.py:112: Skipped
SKIPPED [19] pandas/tests/arithmetic/test_datetime64.py:432: datetime64 is not tz aware
SKIPPED [72] pandas/tests/arithmetic/test_numeric.py:403: Div by negative 0 not relevant for uint64
SKIPPED [2] pandas/tests/arithmetic/test_numeric.py:1110: dtype <class 'numpy.uint64'> not relevant for RangeIndex
SKIPPED [2] pandas/tests/arithmetic/test_numeric.py:1110: dtype <class 'numpy.float64'> not relevant for RangeIndex
SKIPPED [16] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support UTC
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support US/Eastern
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support Asia/Tokyo
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support dateutil/US/Pacific
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support dateutil/Asia/Singapore
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support +01:15
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support -02:15
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support UTC+01:15
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support UTC-02:15
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support tzutc()
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support tzlocal()
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support UTC+01:00
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support foo
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support pytz.FixedOffset(300)
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support pytz.FixedOffset(-300)
SKIPPED [4] pandas/tests/arithmetic/test_timedelta64.py:1004: <class 'numpy.datetime64'> doesn support US/Pacific
SKIPPED [10] pandas/tests/arrays/masked/test_arithmetic.py:34: subtract not implemented for boolean
SKIPPED [2] pandas/tests/arrays/string_/test_string.py:650: not applicable for pyarrow
SKIPPED [1] pandas/tests/arrays/string_/test_string_arrow.py:61: chunked not applicable to numpy array
SKIPPED [1] pandas/tests/arrays/string_/test_string_arrow.py:179: Skipping because pyarrow is installed.
SKIPPED [2] pandas/tests/base/test_fillna.py:41: <class 'pandas.RangeIndex'> doesn't allow for NA operations
SKIPPED [24] pandas/tests/base/test_fillna.py:41: <class 'pandas.Index'> doesn't allow for NA operations
SKIPPED [4] pandas/tests/base/test_fillna.py:43: Test doesn't make sense on empty data
SKIPPED [3] pandas/tests/base/test_fillna.py:45: MultiIndex can't hold 'nan'
SKIPPED [3] pandas/tests/base/test_fillna.py:45: MultiIndex can't hold 'None'
SKIPPED [12] pandas/tests/base/test_fillna.py:41: <class 'pandas.Series'> doesn't allow for NA operations
SKIPPED [1] pandas/tests/base/test_misc.py:175: Test doesn't make sense on empty data
SKIPPED [38] pandas/tests/base/test_unique.py:37: type doesn't allow for NA operations
SKIPPED [4] pandas/tests/base/test_unique.py:39: Test doesn't make sense on empty data
SKIPPED [3] pandas/tests/base/test_unique.py:41: MultiIndex can't hold 'nan'
SKIPPED [3] pandas/tests/base/test_unique.py:41: MultiIndex can't hold 'None'
SKIPPED [38] pandas/tests/base/test_unique.py:80: type doesn't allow for NA operations
SKIPPED [3] pandas/tests/base/test_unique.py:82: MultiIndex can't hold 'nan'
SKIPPED [3] pandas/tests/base/test_unique.py:82: MultiIndex can't hold 'None'
SKIPPED [38] pandas/tests/base/test_value_counts.py:60: type doesn't allow for NA operations
SKIPPED [4] pandas/tests/base/test_value_counts.py:62: Test doesn't make sense on empty data
SKIPPED [3] pandas/tests/base/test_value_counts.py:64: MultiIndex can't hold 'nan'
SKIPPED [3] pandas/tests/base/test_value_counts.py:64: MultiIndex can't hold 'None'
SKIPPED [2] pandas/tests/copy_view/test_indexing.py:247: setitem with labels selects on columns
SKIPPED [1] pandas/tests/dtypes/test_common.py:868: Skipping because pyarrow is installed.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: decimal does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: decimal does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: decimal does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: decimal does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: decimal does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: decimal does not support 2D.
SKIPPED [136] pandas/tests/extension/base/reduce.py:123: count not an array method
SKIPPED [110] pandas/tests/extension/base/reduce.py:126: Reduction kurt not supported for this dtype
SKIPPED [36] pandas/tests/extension/base/reduce.py:126: Reduction sem not supported for this dtype
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: json does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: json does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: json does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: json does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: json does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: json does not support 2D.
SKIPPED [58] pandas/tests/extension/base/reduce.py:126: Reduction sum not supported for this dtype
SKIPPED [4] pandas/tests/extension/base/reduce.py:126: Reduction max not supported for this dtype
SKIPPED [4] pandas/tests/extension/base/reduce.py:126: Reduction min not supported for this dtype
SKIPPED [30] pandas/tests/extension/base/reduce.py:126: Reduction mean not supported for this dtype
SKIPPED [84] pandas/tests/extension/base/reduce.py:126: Reduction prod not supported for this dtype
SKIPPED [32] pandas/tests/extension/base/reduce.py:126: Reduction std not supported for this dtype
SKIPPED [86] pandas/tests/extension/base/reduce.py:126: Reduction var not supported for this dtype
SKIPPED [28] pandas/tests/extension/base/reduce.py:126: Reduction median not supported for this dtype
SKIPPED [108] pandas/tests/extension/base/reduce.py:126: Reduction skew not supported for this dtype
SKIPPED [1] pandas/tests/extension/base/ops.py:162: json is not a numeric dtype
SKIPPED [1] pandas/tests/extension/base/methods.py:35: value_counts is not implemented for <class 'pandas.tests.extension.json.array.JSONArray'>
SKIPPED [2] pandas/tests/extension/base/methods.py:451: <class 'pandas.tests.extension.json.array.JSONArray'> does not support diff
SKIPPED [1] pandas/tests/extension/json/test_json.py:233: fill-value is interpreted as a dict of values
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: bool[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: uint8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: uint16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: uint32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: uint64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: int8[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: int16[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: int32[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: int64[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: float[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: double[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: string[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: binary[pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: time32[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: time32[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: time64[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: time64[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: date32[day][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: date64[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: duration[s][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: duration[ms][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: duration[us][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: duration[ns][pyarrow] does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: bool[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: uint8[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: uint16[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: uint32[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: uint64[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: int8[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: int16[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: int32[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: int64[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: float[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: double[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: string[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: binary[pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: time32[s][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: time32[ms][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: time64[us][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: time64[ns][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: date32[day][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: date64[ms][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[s][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[us][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: duration[s][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: duration[ms][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: duration[us][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: duration[ns][pyarrow] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: bool[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: uint8[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: uint16[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: uint32[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: uint64[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: int8[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: int16[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: int32[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: int64[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: float[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: double[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: string[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: binary[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: time32[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: time32[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: time64[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: time64[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: date32[day][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: date64[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: duration[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: duration[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: duration[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: duration[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: bool[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: uint8[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: uint16[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: uint32[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: uint64[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: int8[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: int16[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: int32[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: int64[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: float[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: double[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: string[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: binary[pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: time32[s][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: time32[ms][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: time64[us][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: time64[ns][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: date32[day][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: date64[ms][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[s][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[us][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: duration[s][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: duration[ms][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: duration[us][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: duration[ns][pyarrow] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: bool[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: uint8[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: uint16[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: uint32[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: uint64[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: int8[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: int16[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: int32[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: int64[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: float[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: double[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: decimal128(7, 3)[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: string[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: binary[pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: time32[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: time32[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: time64[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: time64[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: date32[day][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: date64[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[s, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[s, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[s, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ms, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ms, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ms, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[us, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[us, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[us, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ns, tz=UTC][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ns, tz=US/Pacific][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: timestamp[ns, tz=US/Eastern][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: duration[s][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: duration[ms][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: duration[us][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: duration[ns][pyarrow] does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: bool[pyarrow] does not support 2D.
SKIPPED [4] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.arrow.array.ArrowExtensionArray'> does not support diff
SKIPPED [9] pandas/tests/extension/base/ops.py:136: Skip testing Python string formatting
SKIPPED [1] pandas/tests/extension/test_arrow.py:989: Skip testing Python string formatting
SKIPPED [2] pandas/tests/extension/test_arrow.py:1003: Skip testing Python string formatting
SKIPPED [20] pandas/tests/extension/test_arrow.py:1539: Tested in test_to_numpy_temporal
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: category does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: category does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: category does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: category does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: category does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: category does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: category does not support 2D.
SKIPPED [1] pandas/tests/extension/base/ops.py:162: category is not a numeric dtype
SKIPPED [2] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.categorical.Categorical'> does not support diff
SKIPPED [1] pandas/tests/extension/test_categorical.py:114: Backwards compatibility
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: category does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:221: min_count not relevant for mean
SKIPPED [6] pandas/tests/extension/base/dim2.py:221: min_count not relevant for median
SKIPPED [6] pandas/tests/extension/base/dim2.py:221: min_count not relevant for var
SKIPPED [6] pandas/tests/extension/base/dim2.py:221: min_count not relevant for std
SKIPPED [1] pandas/tests/extension/base/ops.py:162: datetime64[ns, US/Central] is not a numeric dtype
SKIPPED [1] pandas/tests/extension/base/dim2.py:42: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:49: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:56: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:69: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:77: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:85: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:99: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:125: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:137: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:148: interval does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:168: interval does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:192: interval does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:217: interval does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:279: interval does not support 2D.
SKIPPED [1] pandas/tests/extension/base/ops.py:162: Interval is not a numeric dtype
SKIPPED [2] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.interval.IntervalArray'> does not support diff
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Int8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Int16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Int32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Int64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: UInt8 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: UInt16 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: UInt32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: UInt64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Float32 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: boolean does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Int8 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Int16 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Int32 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Int64 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: UInt8 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: UInt16 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: UInt32 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: UInt64 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Float32 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Float64 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: boolean does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Int8 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Int16 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Int32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Int64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: UInt8 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: UInt16 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: UInt32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: UInt64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Float32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Float64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: boolean does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Int8 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Int16 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Int32 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Int64 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: UInt8 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: UInt16 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: UInt32 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: UInt64 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Float32 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Float64 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: boolean does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Int8 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Int16 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Int32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Int64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: UInt8 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: UInt16 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: UInt32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: UInt64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Float32 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Float64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: boolean does not support 2D.
SKIPPED [40] pandas/tests/extension/test_masked.py:271: Tested in tests/reductions/test_reductions.py
SKIPPED [1] pandas/tests/extension/test_masked.py:370: Float32 precision lead to large differences with op cumprod and skipna=True
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Int8 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Int16 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Int32 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Int64 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: UInt8 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: UInt16 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: UInt32 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: UInt64 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Float32 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: Float64 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: boolean does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: object does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: float64 does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: object does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: float64 does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: object does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: float64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: object does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: float64 does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: object does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: float64 does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: object does not support 2D.
SKIPPED [2] pandas/tests/extension/test_numpy.py:170: We don't register our dtype
SKIPPED [48] pandas/tests/extension/test_numpy.py:328: TODO: tests not written yet
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: float64 does not support 2D.
SKIPPED [1] pandas/tests/extension/base/dim2.py:35: object does not support 2D.
SKIPPED [1] pandas/tests/extension/base/ops.py:162: period[D] is not a numeric dtype
SKIPPED [1] pandas/tests/extension/base/ops.py:162: period[2D] is not a numeric dtype
SKIPPED [2] pandas/tests/extension/base/dim2.py:42: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:49: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:56: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:69: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:77: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:85: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:99: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:125: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:137: Sparse[float64, nan] does not support 2D.
SKIPPED [2] pandas/tests/extension/base/dim2.py:148: Sparse[float64, nan] does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:168: Sparse[float64, nan] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:192: Sparse[float64, nan] does not support 2D.
SKIPPED [24] pandas/tests/extension/base/dim2.py:217: Sparse[float64, nan] does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:279: Sparse[float64, nan] does not support 2D.
SKIPPED [4] pandas/tests/extension/base/setitem.py:62: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:68: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:77: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:94: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:101: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:108: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:115: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:120: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:125: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:130: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:135: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:140: __setitem__ test not applicable with immutable dtype
SKIPPED [12] pandas/tests/extension/base/setitem.py:145: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:163: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:177: __setitem__ test not applicable with immutable dtype
SKIPPED [12] pandas/tests/extension/base/setitem.py:189: __setitem__ test not applicable with immutable dtype
SKIPPED [12] pandas/tests/extension/base/setitem.py:205: __setitem__ test not applicable with immutable dtype
SKIPPED [8] pandas/tests/extension/base/setitem.py:221: __setitem__ test not applicable with immutable dtype
SKIPPED [8] pandas/tests/extension/base/setitem.py:246: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:271: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:286: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:302: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:313: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:322: __setitem__ test not applicable with immutable dtype
SKIPPED [4] pandas/tests/extension/base/setitem.py:328: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:338: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:351: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:356: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:361: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:366: __setitem__ test not applicable with immutable dtype
SKIPPED [14] pandas/tests/extension/base/setitem.py:375: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:385: __setitem__ test not applicable with immutable dtype
SKIPPED [14] pandas/tests/extension/base/setitem.py:399: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:414: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:431: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:442: __setitem__ test not applicable with immutable dtype
SKIPPED [2] pandas/tests/extension/base/setitem.py:450: __setitem__ test not applicable with immutable dtype
SKIPPED [1] pandas/tests/extension/base/reshaping.py:340: test_ravel assumes mutability and Sparse[int64, 0] is immutable
SKIPPED [1] pandas/tests/extension/base/reshaping.py:340: test_ravel assumes mutability and Sparse[float64, nan] is immutable
SKIPPED [1] pandas/tests/extension/base/reshaping.py:357: test_transpose assumes mutability and Sparse[int64, 0] is immutable
SKIPPED [1] pandas/tests/extension/base/reshaping.py:357: test_transpose assumes mutability and Sparse[float64, nan] is immutable
SKIPPED [1] pandas/tests/extension/base/interface.py:131: test_copy assumes mutability and Sparse[int64, 0] is immutable
SKIPPED [1] pandas/tests/extension/base/interface.py:131: test_copy assumes mutability and Sparse[float64, nan] is immutable
SKIPPED [1] pandas/tests/extension/base/interface.py:146: test_view assumes mutability and Sparse[int64, 0] is immutable
SKIPPED [1] pandas/tests/extension/base/interface.py:146: test_view assumes mutability and Sparse[float64, nan] is immutable
SKIPPED [15] pandas/tests/extension/test_sparse.py:155: Can't store nan in int array.
SKIPPED [28] pandas/tests/extension/test_sparse.py:391: Incorrected expected from Series.combine and tested elsewhere
SKIPPED [6] pandas/tests/extension/base/dim2.py:42: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:42: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:49: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:49: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:56: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:56: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:69: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:69: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:77: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:77: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:85: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:85: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:99: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:99: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:125: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:125: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:137: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:137: str does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:148: string does not support 2D.
SKIPPED [6] pandas/tests/extension/base/dim2.py:148: str does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:168: string does not support 2D.
SKIPPED [12] pandas/tests/extension/base/dim2.py:168: str does not support 2D.
SKIPPED [36] pandas/tests/extension/base/dim2.py:192: string does not support 2D.
SKIPPED [36] pandas/tests/extension/base/dim2.py:192: str does not support 2D.
SKIPPED [72] pandas/tests/extension/base/dim2.py:217: string does not support 2D.
SKIPPED [72] pandas/tests/extension/base/dim2.py:217: str does not support 2D.
SKIPPED [36] pandas/tests/extension/base/dim2.py:279: string does not support 2D.
SKIPPED [36] pandas/tests/extension/base/dim2.py:279: str does not support 2D.
SKIPPED [8] pandas/tests/extension/base/ops.py:145: Skip testing Python string formatting
SKIPPED [4] pandas/tests/extension/base/ops.py:162: string is not a numeric dtype
SKIPPED [4] pandas/tests/extension/base/ops.py:162: str is not a numeric dtype
SKIPPED [4] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.string_.StringArray'> does not support diff
SKIPPED [4] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.string_arrow.ArrowStringArray'> does not support diff
SKIPPED [4] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.string_arrow.ArrowStringArrayNumpySemantics'> does not support diff
SKIPPED [4] pandas/tests/extension/base/methods.py:451: <class 'pandas.core.arrays.string_.StringArrayNumpySemantics'> does not support diff
SKIPPED [4] pandas/tests/extension/test_string.py:134: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/test_string.py:143: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/test_string.py:148: 2D support not implemented for ArrowStringArray
SKIPPED [2] pandas/tests/extension/base/dim2.py:35: string does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:35: 2D support not implemented for ArrowStringArray
SKIPPED [2] pandas/tests/extension/base/dim2.py:35: str does not support 2D.
SKIPPED [4] pandas/tests/extension/base/dim2.py:42: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:49: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:56: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:69: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:77: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:85: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:99: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:125: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:137: 2D support not implemented for ArrowStringArray
SKIPPED [4] pandas/tests/extension/base/dim2.py:148: 2D support not implemented for ArrowStringArray
SKIPPED [8] pandas/tests/extension/base/dim2.py:168: 2D support not implemented for ArrowStringArray
SKIPPED [24] pandas/tests/extension/base/dim2.py:192: 2D support not implemented for ArrowStringArray
SKIPPED [48] pandas/tests/extension/base/dim2.py:217: 2D support not implemented for ArrowStringArray
SKIPPED [24] pandas/tests/extension/base/dim2.py:279: 2D support not implemented for ArrowStringArray
SKIPPED [60] pandas/tests/frame/test_constructors.py:2519: <U1 get cast, making the checks below more cumbersome
SKIPPED [40] pandas/tests/frame/test_constructors.py:2519: |S1 get cast, making the checks below more cumbersome
SKIPPED [1] pandas/tests/frame/test_constructors.py:3123: StringDType only available in numpy 2 and above
SKIPPED [26] pandas/tests/frame/test_query_eval.py:40: cannot evaluate with parser=python
SKIPPED [1] pandas/tests/frame/test_query_eval.py:40: cannot evaluate with parser=<bound method TestDataFrameQueryNumExprPandas.parser of <pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPandas object at 0x7fd6dc842b30>>
SKIPPED [1] pandas/tests/frame/test_query_eval.py:40: cannot evaluate with parser=<bound method TestDataFrameQueryNumExprPython.parser of <pandas.tests.frame.test_query_eval.TestDataFrameQueryNumExprPython object at 0x7fd6dc8622f0>>
SKIPPED [1] pandas/tests/frame/test_query_eval.py:40: cannot evaluate with parser=<bound method TestDataFrameQueryPythonPandas.parser of <pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPandas object at 0x7fd6dc885c90>>
SKIPPED [1] pandas/tests/frame/test_query_eval.py:40: cannot evaluate with parser=<bound method TestDataFrameQueryPythonPython.parser of <pandas.tests.frame.test_query_eval.TestDataFrameQueryPythonPython object at 0x7fd6dc8a9900>>
SKIPPED [52] pandas/tests/generic/test_finalize.py:426: left is an int and doesn't support .attrs
SKIPPED [52] pandas/tests/generic/test_finalize.py:428: right is an int and doesn't support .attrs
SKIPPED [1] pandas/tests/generic/test_to_xarray.py:36: Test doesn't make sense for empty index
SKIPPED [2] pandas/tests/groupby/test_all_methods.py:68: Not applicable for size
SKIPPED [2] pandas/tests/groupby/test_all_methods.py:68: Not applicable for cumcount
SKIPPED [2] pandas/tests/groupby/test_all_methods.py:68: Not applicable for ngroup
SKIPPED [2] pandas/tests/groupby/test_api.py:152: first and last don't exist for DataFrame anymore
SKIPPED [2] pandas/tests/groupby/test_api.py:214: first and last don't exist for Series anymore
SKIPPED [344] pandas/tests/groupby/test_categorical.py:1892: Result doesn't have categories, nothing to test
SKIPPED [64] pandas/tests/groupby/test_categorical.py:2013: No categories in result, nothing to test
SKIPPED [12] pandas/tests/groupby/test_categorical.py:2047: Result doesn't have categories, nothing to test
SKIPPED [8] pandas/tests/groupby/test_categorical.py:2089: corrwith not implemented for SeriesGroupBy
SKIPPED [1] pandas/tests/groupby/test_groupby.py:541: GH 5755: Test not applicable for corrwith
SKIPPED [1] pandas/tests/groupby/test_groupby_subclass.py:30: Not applicable for Series and corrwith
SKIPPED [13] pandas/tests/indexes/interval/test_constructors.py:331: uint64 not relevant IntervalIndex.from_tuples tests
SKIPPED [13] pandas/tests/indexes/interval/test_constructors.py:382: uint64 not relevant for class constructor tests
SKIPPED [1] pandas/tests/indexes/multi/test_setops.py:631: No duplicates in an empty CategoricalIndex
SKIPPED [1] pandas/tests/indexes/multi/test_setops.py:631: No duplicates in an empty IntervalIndex
SKIPPED [1] pandas/tests/indexes/multi/test_setops.py:631: No duplicates in an empty Index
SKIPPED [1] pandas/tests/indexes/test_any_index.py:32: Test doesn't make sense for empty index
SKIPPED [8] pandas/tests/indexes/test_base.py:588: Cannot map duplicated index
SKIPPED [2] pandas/tests/indexes/test_base.py:586: Tested in test_categorical
SKIPPED [4] pandas/tests/indexes/test_base.py:783: Test doesn't make sense for empty MultiIndex
SKIPPED [11] pandas/tests/indexes/test_common.py:232: Skip na-check if index cannot hold na
SKIPPED [1] pandas/tests/indexes/test_common.py:212: Skip check for empty Index and MultiIndex
SKIPPED [1] pandas/tests/indexes/test_common.py:266: Skip check for empty Index
SKIPPED [3] pandas/tests/indexes/test_common.py:298: RangeIndex is tested in test_drop_duplicates_no_duplicates as it cannot hold duplicates
SKIPPED [3] pandas/tests/indexes/test_common.py:303: empty index is tested in test_drop_duplicates_no_duplicates as it cannot hold duplicates
SKIPPED [2] pandas/tests/indexes/test_common.py:367: Skip check for empty Index, MultiIndex, and RangeIndex
SKIPPED [4] pandas/tests/indexes/test_index_new.py:135: We don't cast Decimal to datetime64/timedelta64
SKIPPED [2] pandas/tests/indexes/test_indexing.py:60: Test doesn't make sense since not enough elements
SKIPPED [1] pandas/tests/indexes/test_indexing.py:84: Test doesn't make sense for empty index
SKIPPED [1] pandas/tests/indexes/test_indexing.py:291: Test doesn't make sense for empty index
SKIPPED [2] pandas/tests/indexes/test_numpy_compat.py:157: Test doesn't make sense for empty index.
SKIPPED [2] pandas/tests/indexes/test_old_base.py:77: RangeIndex() is a valid constructor
SKIPPED [3] pandas/tests/indexes/test_old_base.py:97: Tested in test_ops/test_arithmetic
SKIPPED [3] pandas/tests/indexes/test_old_base.py:177: Tested elsewhere.
SKIPPED [8] pandas/tests/indexes/test_old_base.py:173: Not applicable for Index
SKIPPED [2] pandas/tests/indexes/test_old_base.py:216: Tested elsewhere.
SKIPPED [1] pandas/tests/indexes/test_old_base.py:232: Not a valid repr for IntervalIndex
SKIPPED [1] pandas/tests/indexes/test_old_base.py:239: Not a valid repr for IntervalIndex
SKIPPED [5] pandas/tests/indexes/test_old_base.py:255: RangeIndex cannot be initialized from data, MultiIndex and CategoricalIndex are tested separately
SKIPPED [1] pandas/tests/indexes/test_old_base.py:359: TestBase separately tested
SKIPPED [50] pandas/tests/indexes/test_old_base.py:416: Tested elsewhere.
SKIPPED [1] pandas/tests/indexes/test_old_base.py:439: Not applicable for empty index
SKIPPED [1] pandas/tests/indexes/test_old_base.py:485: TestBase tested elsewhere
SKIPPED [1] pandas/tests/indexes/test_old_base.py:481: Not applicable for empty index
SKIPPED [1] pandas/tests/indexes/test_old_base.py:505: IntervalIndex tested elsewhere
SKIPPED [3] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with int64
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with int8
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with int16
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with int32
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with uint8
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with uint16
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with uint32
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with uint64
SKIPPED [1] pandas/tests/indexes/test_old_base.py:595: bool cannot hold NAs
SKIPPED [1] pandas/tests/indexes/test_old_base.py:593: Not relevant for empty index
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with Int64
SKIPPED [1] pandas/tests/indexes/test_old_base.py:597: Not relevant for Index with UInt16
SKIPPED [2] pandas/tests/indexes/test_old_base.py:661: Tested elsewhere.
SKIPPED [6] pandas/tests/indexes/test_old_base.py:679: Tested elsewhere.
SKIPPED [1] pandas/tests/indexes/test_old_base.py:765: Tested elsewhere
SKIPPED [2] pandas/tests/indexes/test_old_base.py:882: Tested elsewhere.
SKIPPED [2] pandas/tests/indexes/test_old_base.py:898: Tested elsewhere.
SKIPPED [2] pandas/tests/indexes/test_old_base.py:979: casting of strings not relevant for RangeIndex
SKIPPED [1] pandas/tests/indexes/test_setops.py:226: Not relevant for CategoricalIndex
SKIPPED [4] pandas/tests/indexes/test_setops.py:316: Index values no not satisfy test condition.
SKIPPED [1] pandas/tests/indexes/test_setops.py:310: Not relevant for CategoricalIndex
SKIPPED [1] pandas/tests/indexes/test_setops.py:312: Too few values for test
SKIPPED [10] pandas/tests/indexes/test_setops.py:499: Not relevant since index is not unique
SKIPPED [10] pandas/tests/indexes/test_setops.py:522: Not relevant because index is not unique
SKIPPED [1] pandas/tests/indexes/test_setops.py:565: Not relevant for empty Index
SKIPPED [1] pandas/tests/indexing/test_loc.py:2074: Not relevant for empty Index
SKIPPED [9] pandas/tests/io/excel/test_readers.py:165: No engine for filetype: '.xls'
SKIPPED [6] pandas/tests/io/excel/test_readers.py:165: No engine for filetype: '.xlsb'
SKIPPED [6] pandas/tests/io/excel/test_readers.py:629: No engine for filetype: '.xls'
SKIPPED [4] pandas/tests/io/excel/test_readers.py:629: No engine for filetype: '.xlsb'
SKIPPED [3] pandas/tests/io/excel/test_readers.py:676: No engine for filetype: '.xls'
SKIPPED [2] pandas/tests/io/excel/test_readers.py:676: No engine for filetype: '.xlsb'
SKIPPED [6] pandas/tests/io/excel/test_readers.py:691: No engine for filetype: '.xls'
SKIPPED [4] pandas/tests/io/excel/test_readers.py:691: No engine for filetype: '.xlsb'
SKIPPED [2] pandas/tests/io/excel/test_readers.py:762: Skipped for engine: xlrd
SKIPPED [4] pandas/tests/io/excel/test_readers.py:762: Skipped for engine: openpyxl
SKIPPED [6] pandas/tests/io/excel/test_readers.py:762: Skipped for engine: None
SKIPPED [2] pandas/tests/io/excel/test_readers.py:762: Skipped for engine: pyxlsb
SKIPPED [10] pandas/tests/io/excel/test_readers.py:762: Skipped for engine: calamine
SKIPPED [2] pandas/tests/io/excel/test_readers.py:1431: chartsheets do not exist in the ODF format
SKIPPED [2] pandas/tests/io/excel/test_readers.py:1444: chartsheets do not exist in the ODF format
SKIPPED [2] pandas/tests/io/excel/test_readers.py:1715: chartsheets do not exist in the ODF format
SKIPPED [3] pandas/tests/io/excel/test_readers.py:1729: Invalid test for engine=None
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:127: This is a low-memory specific test
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:232: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:320: https://github.com/apache/arrow/issues/38676
SKIPPED [3] pandas/tests/io/parser/common/test_common_basic.py:368: https://github.com/apache/arrow/issues/38676
SKIPPED [4] pandas/tests/io/parser/common/test_common_basic.py:391: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:540: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:659: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:670: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:703: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:757: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_common_basic.py:799: https://github.com/apache/arrow/issues/38676
SKIPPED [4] pandas/tests/io/parser/common/test_file_buffer_url.py:112: Running as sudo.
SKIPPED [6] pandas/tests/io/parser/common/test_file_buffer_url.py:230: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_file_buffer_url.py:444: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_float.py:23: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:115: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:215: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:243: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:272: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:284: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_index.py:298: https://github.com/apache/arrow/issues/38676
SKIPPED [3] pandas/tests/io/parser/common/test_ints.py:182: https://github.com/apache/arrow/issues/38676
SKIPPED [2] pandas/tests/io/parser/common/test_ints.py:196: https://github.com/apache/arrow/issues/38676
SKIPPED [6] pandas/tests/io/parser/common/test_read_errors.py:141: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_read_errors.py:182: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_read_errors.py:218: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_read_errors.py:244: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/common/test_read_errors.py:293: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:24: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:34: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:47: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:62: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:79: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:92: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/dtypes/test_empty.py:105: https://github.com/apache/arrow/issues/38676
SKIPPED [8] pandas/tests/io/parser/dtypes/test_empty.py:132: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_encoding.py:41: https://github.com/apache/arrow/issues/38676
SKIPPED [6] pandas/tests/io/parser/test_encoding.py:51: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_encoding.py:132: https://github.com/apache/arrow/issues/38676
SKIPPED [12] pandas/tests/io/parser/test_encoding.py:193: These cases freeze
SKIPPED [2] pandas/tests/io/parser/test_header.py:438: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_header.py:580: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_header.py:641: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_header.py:653: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_index_col.py:81: https://github.com/apache/arrow/issues/38676
SKIPPED [10] pandas/tests/io/parser/test_index_col.py:99: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_index_col.py:148: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_index_col.py:322: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_na_values.py:460: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_parse_dates.py:105: https://github.com/apache/arrow/issues/38676
SKIPPED [6] pandas/tests/io/parser/test_parse_dates.py:422: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_parse_dates.py:457: https://github.com/apache/arrow/issues/38676
SKIPPED [2] pandas/tests/io/parser/test_parse_dates.py:472: https://github.com/apache/arrow/issues/38676
SKIPPED [4] pandas/tests/io/parser/test_parse_dates.py:515: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_parse_dates.py:692: https://github.com/apache/arrow/issues/38676
SKIPPED [3] pandas/tests/io/parser/test_quoting.py:24: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/test_unsupported.py:177: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/usecols/test_parse_dates.py:29: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/usecols/test_usecols_basic.py:111: https://github.com/apache/arrow/issues/38676
SKIPPED [2] pandas/tests/io/parser/usecols/test_usecols_basic.py:162: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/usecols/test_usecols_basic.py:208: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/usecols/test_usecols_basic.py:258: https://github.com/apache/arrow/issues/38676
SKIPPED [2] pandas/tests/io/parser/usecols/test_usecols_basic.py:355: https://github.com/apache/arrow/issues/38676
SKIPPED [2] pandas/tests/io/parser/usecols/test_usecols_basic.py:368: https://github.com/apache/arrow/issues/38676
SKIPPED [6] pandas/tests/io/parser/usecols/test_usecols_basic.py:455: https://github.com/apache/arrow/issues/38676
SKIPPED [1] pandas/tests/io/parser/usecols/test_usecols_basic.py:477: https://github.com/apache/arrow/issues/38676
SKIPPED [150] pandas/tests/io/pytables/test_file_handling.py:300: lzo not available
SKIPPED [1] pandas/tests/io/pytables/test_pytables_missing.py:9: Skipping because tables is installed.
SKIPPED [1] pandas/tests/io/test_fsspec.py:283: Skipping because fsspec is installed.
SKIPPED [1] pandas/tests/io/test_gcs.py:236: Skipping because gcsfs is installed.
SKIPPED [1] pandas/tests/io/test_html.py:1434: Not applicable for lxml
SKIPPED [2] pandas/tests/io/test_parquet.py:767: float16 works on 15
SKIPPED [1] pandas/tests/io/test_sql.py:2596: Skipping because sqlalchemy is installed.
SKIPPED [1] pandas/tests/io/test_sql.py:2604: Skipping because sqlalchemy is installed.
SKIPPED [1] pandas/tests/io/test_sql.py:2659: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:2680: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:2758: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:3279: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:3321: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:3358: sqlite_str has no inspection system
SKIPPED [1] pandas/tests/io/test_sql.py:3478: test does not work with str connection
SKIPPED [1] pandas/tests/io/xml/test_to_xml.py:964: Skipping because lxml is installed.
SKIPPED [1] pandas/tests/io/xml/test_xml.py:1105: Skipping because lxml is installed.
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: gzip == gzip
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: bz2 == bz2
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: zip == zip
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: xz == xz
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: tar == tar
SKIPPED [2] pandas/tests/io/xml/test_xml.py:1941: zstd == zstd
SKIPPED [1] pandas/tests/libs/test_hashtable.py:93: Mask not supported for object
SKIPPED [2] pandas/tests/libs/test_hashtable.py:151: Mask not supported for object
SKIPPED [2] pandas/tests/libs/test_hashtable.py:189: Mask not supported for object
SKIPPED [1] pandas/tests/libs/test_hashtable.py:629: mask not implemented for object dtype
SKIPPED [1] pandas/tests/plotting/test_backend.py:83: Skipping because matplotlib is installed.
SKIPPED [1] pandas/tests/plotting/test_misc.py:45: Skipping because matplotlib is installed.
SKIPPED [3] pandas/tests/plotting/test_misc.py:106: pie not supported with Series
SKIPPED [3] pandas/tests/plotting/test_misc.py:106: scatter not supported with Series
SKIPPED [3] pandas/tests/plotting/test_misc.py:106: hexbin not supported with Series
SKIPPED [4] pandas/tests/resample/test_datetime_index.py:190: covered by test_resample_how_ohlc
SKIPPED [9] pandas/tests/reshape/concat/test_append_common.py:194: same dtype is tested in test_concatlike_same_dtypes
SKIPPED [5] pandas/tests/reshape/concat/test_empty.py:140: same dtype is not applicable for test
SKIPPED [1] pandas/tests/reshape/merge/test_merge_asof.py:621: This test is invalid for unit='s' because that would round the trades['time']]
SKIPPED [1] pandas/tests/reshape/merge/test_merge_asof.py:3246: This test is invalid with unit='s' because that would round left['time']
SKIPPED [1] pandas/tests/reshape/merge/test_merge_asof.py:3336: This test is invalid with unit='s' because that would round dr1
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: rmod with NA and a not defined.
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: rmod with NA and b'a' not defined.
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: pow with NA and a not defined.
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: pow with NA and b'a' not defined.
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: rpow with NA and a not defined.
SKIPPED [1] pandas/tests/scalar/test_na_scalar.py:64: rpow with NA and b'a' not defined.
SKIPPED [1] pandas/tests/scalar/test_nat.py:325: Ignore differences with Timestamp.isoformat() as they're intentional
SKIPPED [1] pandas/tests/scalar/test_nat.py:332: different docstring for to_numpy is intentional
SKIPPED [96] pandas/tests/series/indexing/test_setitem.py:743: Not relevant for int key
SKIPPED [318] pandas/tests/series/indexing/test_setitem.py:783: Not relevant for slice key
SKIPPED [10] pandas/tests/series/methods/test_clip.py:53: See test_constructor_mismatched_null_nullable_dtype
SKIPPED [6] pandas/tests/series/methods/test_drop_duplicates.py:24: tested separately in test_drop_duplicates_bool
SKIPPED [10] pandas/tests/series/methods/test_rank.py:275: int64/str does not support NaN
SKIPPED [2] pandas/tests/series/test_constructors.py:2182: StringDType only available in numpy 2 and above
SKIPPED [5] pandas/tests/strings/test_extract.py:188: Test requires len(index) > 0
SKIPPED [5] pandas/tests/strings/test_extract.py:368: Index needs more than 3 values
SKIPPED [1] pandas/tests/test_downstream.py:48: not implemented with CoW
SKIPPED [1] pandas/tests/test_downstream.py:102: could not import 'cftime': No module named 'cftime'
SKIPPED [1] pandas/tests/test_downstream.py:135: could not import 'statsmodels.formula.api': No module named 'statsmodels'
SKIPPED [1] pandas/tests/test_downstream.py:144: could not import 'sklearn': No module named 'sklearn'
SKIPPED [1] pandas/tests/test_downstream.py:165: could not import 'pandas_datareader': No module named 'pandas_datareader'
SKIPPED [1] pandas/tests/util/test_numba.py:8: Skipping because numba is installed.
SKIPPED [1] pandas/conftest.py:1176: Could not find /home/pandas/pandas/tests/not_a_file.
SKIPPED [28] pandas/tests/window/test_ewm.py:705: No op to test
XFAIL pandas/tests/apply/test_frame_apply.py::test_apply[numba] - numba engine not supporting numpy ufunc yet
XFAIL pandas/tests/apply/test_frame_apply.py::test_result_type_broadcast[numba] - numba engine doesn't support list return
XFAIL pandas/tests/apply/test_frame_apply.py::test_result_type_broadcast_series_func[numba] - numba Series constructor only support ndarrays not list data
XFAIL pandas/tests/apply/test_frame_apply.py::test_result_type_series_result[numba] - numba Series constructor only support ndarrays not list data
XFAIL pandas/tests/apply/test_frame_apply.py::test_result_type_series_result_other_index[numba] - no support in numba Series constructor for list of columns
XFAIL pandas/tests/apply/test_frame_apply.py::test_frequency_is_original[numba-2] - numba engine only supports numeric indices
XFAIL pandas/tests/apply/test_frame_apply.py::test_frequency_is_original[numba-3] - numba engine only supports numeric indices
XFAIL pandas/tests/apply/test_frame_apply.py::test_frequency_is_original[numba-5] - numba engine only supports numeric indices
XFAIL pandas/tests/apply/test_frame_apply.py::test_apply_datetime_tz_issue[numba] - numba engine doesn't support non-numeric indexes
XFAIL pandas/tests/apply/test_frame_apply.py::test_apply_no_suffix_index[numba] - numba engine doesn't support list-likes/dict-like callables
XFAIL pandas/tests/apply/test_frame_apply.py::test_apply_getitem_axis_1[numba] - numba engine not supporting duplicate index values
XFAIL pandas/tests/apply/test_frame_apply_relabeling.py::test_agg_relabel_partial_functions - name of min now equals name of np.min
XFAIL pandas/tests/apply/test_frame_transform.py::test_transform_bad_dtype[DataFrame-ngroup] - ngroup not valid for NDFrame
XFAIL pandas/tests/apply/test_frame_transform.py::test_transform_bad_dtype[Series-ngroup] - ngroup not valid for NDFrame
XFAIL pandas/tests/apply/test_frame_transform.py::test_transform_failure_typeerror[ngroup] - ngroup not valid for NDFrame
XFAIL pandas/tests/apply/test_series_apply.py::test_transform_partial_failure[bfill] - bfill is successful on any dtype
XFAIL pandas/tests/apply/test_series_apply.py::test_transform_partial_failure[ffill] - ffill is successful on any dtype
XFAIL pandas/tests/apply/test_series_apply.py::test_transform_partial_failure[shift] - shift is successful on any dtype
XFAIL pandas/tests/apply/test_str.py::test_transform_groupby_kernel_series[ngroup] - ngroup not valid for NDFrame
XFAIL pandas/tests/apply/test_str.py::test_transform_groupby_kernel_frame[ngroup] - ngroup not valid for NDFrame
XFAIL pandas/tests/arrays/categorical/test_analytics.py::TestCategoricalAnalytics::test_min_max_ordered_empty[min-categories2-expected2] - https://github.com/pandas-dev/pandas/issues/29962
XFAIL pandas/tests/arrays/categorical/test_analytics.py::TestCategoricalAnalytics::test_min_max_ordered_empty[max-categories2-expected2] - https://github.com/pandas-dev/pandas/issues/29962
XFAIL pandas/tests/arrays/period/test_arrow_compat.py::test_arrow_array[data0-D] - Wrong behavior with pyarrow 10
XFAIL pandas/tests/arrays/period/test_arrow_compat.py::test_arrow_array[data1-Y-DEC] - Wrong behavior with pyarrow 10
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_2d[string=string[pyarrow]] - Failed: DID NOT RAISE <class 'ValueError'>
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_2d[string=str[pyarrow]] - Failed: DID NOT RAISE <class 'ValueError'>
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_strings[string=string[python]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_strings[string=string[pyarrow]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_strings[string=str[pyarrow]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_strings[string=str[python]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_frame[string=string[python]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_frame[string=string[pyarrow]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_frame[string=str[pyarrow]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_add_frame[string=str[python]] - GH-28527
XFAIL pandas/tests/arrays/string_/test_string.py::test_min_max_numpy[string=string[pyarrow]-array-min] - '<=' not supported between instances of 'str' and 'NoneType'
XFAIL pandas/tests/arrays/string_/test_string.py::test_min_max_numpy[string=string[pyarrow]-array-max] - '<=' not supported between instances of 'str' and 'NoneType'
XFAIL pandas/tests/arrays/string_/test_string.py::test_min_max_numpy[string=str[pyarrow]-array-min] - '<=' not supported between instances of 'str' and 'NoneType'
XFAIL pandas/tests/arrays/string_/test_string.py::test_min_max_numpy[string=str[pyarrow]-array-max] - '<=' not supported between instances of 'str' and 'NoneType'
XFAIL pandas/tests/base/test_misc.py::test_searchsorted[complex64] - complex objects are not comparable
XFAIL pandas/tests/base/test_misc.py::test_searchsorted[complex128] - complex objects are not comparable
XFAIL pandas/tests/base/test_misc.py::test_searchsorted[tuples] - np.searchsorted doesn't work on pd.MultiIndex: GH 14833
XFAIL pandas/tests/base/test_misc.py::test_searchsorted[mi-with-dt64tz-level] - np.searchsorted doesn't work on pd.MultiIndex: GH 14833
XFAIL pandas/tests/base/test_misc.py::test_searchsorted[multi] - np.searchsorted doesn't work on pd.MultiIndex: GH 14833
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-DataFrame-python-pandas-in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-DataFrame-python-pandas-not in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-Series-python-pandas-in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-Series-python-pandas-not in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-SeriesNaN-python-pandas-in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-SeriesNaN-python-pandas-not in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-DataFrameNaN-python-pandas-in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestEval::test_compound_invert_op[float-DataFrameNaN-python-pandas-not in] - Looks like expected is negative, unclear whether expected is incorrect or result is incorrect
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right0-+] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right0--] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right0-*] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right0-**] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right0-/] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right1-+] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right1--] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right1-*] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right1-**] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-python-complex64-left_right1-/] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right0-+] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right0--] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right0-*] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right0-**] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right0-/] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right1-+] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right1--] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right1-*] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right1-**] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestTypeCasting::test_binop_typecasting[numexpr-pandas-complex64-left_right1-/] - numexpr issue with complex that are upcast to complex 128 https://github.com/pydata/numexpr/issues/492
XFAIL pandas/tests/computation/test_eval.py::TestOperations::test_assignment_not_inplace - Unknown: Omitted test_ in name prior.
XFAIL pandas/tests/computation/test_eval.py::test_eval_no_support_column_name[True] - GH 47859 DataFrame eval not supported with True
XFAIL pandas/tests/computation/test_eval.py::test_eval_no_support_column_name[False] - GH 47859 DataFrame eval not supported with False
XFAIL pandas/tests/computation/test_eval.py::test_eval_no_support_column_name[inf] - GH 47859 DataFrame eval not supported with inf
XFAIL pandas/tests/computation/test_eval.py::test_eval_no_support_column_name[Inf] - GH 47859 DataFrame eval not supported with Inf
XFAIL pandas/tests/copy_view/test_core_functionalities.py::test_setitem_with_view_invalidated_does_not_copy - blk.delete does not track references correctly
XFAIL pandas/tests/dtypes/test_missing.py::test_array_equivalent_nested_mixed_list[True] - failing
XFAIL pandas/tests/dtypes/test_missing.py::test_array_equivalent_nested_mixed_list[False] - failing
XFAIL pandas/tests/dtypes/test_missing.py::test_array_equivalent_nested_dicts[True] - failing
XFAIL pandas/tests/dtypes/test_missing.py::test_array_equivalent_nested_dicts[False] - failing
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_setitem_integer_with_missing_raises[list-True] - GH-31948
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_getitem_series_integer_with_missing_raises[list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_getitem_series_integer_with_missing_raises[integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[median-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[median-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[kurt-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[kurt-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[skew-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[skew-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[sem-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_series_numeric[sem-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_frame[median-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_frame[median-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_frame[skew-True]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_reduce_frame[skew-False]
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_unary_ufunc_dunder_equivalence[positive] - Inconsistent array-vs-scalar behavior
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_unary_ufunc_dunder_equivalence[negative] - Inconsistent array-vs-scalar behavior
XFAIL pandas/tests/extension/decimal/test_decimal.py::TestDecimalArray::test_unary_ufunc_dunder_equivalence[absolute] - Inconsistent array-vs-scalar behavior
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_getitem_series_integer_with_missing_raises[list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_getitem_series_integer_with_missing_raises[integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_contains - comparison method not implemented for JSONArray (GH-37867)
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_from_dtype - not implemented constructor from dtype
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_series_constructor_no_data_with_index - RecursionError, GH-33900
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_series_constructor_scalar_na_with_index - RecursionError, GH-33900
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_series_constructor_scalar_with_index - collection as scalar, GH-33901
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_stack - Different definitions of NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[object] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[string] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[datetime] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[datetime-tz] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[period] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[timedelta] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[range] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[int8] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[int16] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[int32] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[int64] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[uint8] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[uint16] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[uint32] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[uint64] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[float32] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[float64] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[bool-object] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[bool-dtype] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[complex64] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[complex128] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[categorical] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[interval] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[empty] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[tuples] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[mi-with-dt64tz-level] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[multi] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[repeats] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[nullable_int] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[nullable_uint] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[nullable_float] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[nullable_bool] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[string-python] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_unstack[string-pyarrow] - dict for NA
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_fillna_series - Setting a dict as a scalar
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_fillna_frame - Setting a dict as a scalar
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_fillna_limit_frame - fill value is a dictionary, takes incorrect code path
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_fillna_limit_series - fill value is a dictionary, takes incorrect code path
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_value_counts[data-True] - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_value_counts[data-False] - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_value_counts[data_missing-True] - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_value_counts[data_missing-False] - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_value_counts_with_normalize - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_sort_values_frame - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_combine_le - combine for JSONArray not supported
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_combine_first - combine for JSONArray not supported - may pass depending on random data
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_where_series - broadcasting error
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_searchsorted - Can't compare dicts.
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_equals[True] - Can't compare dicts.
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_equals[False] - Can't compare dicts.
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_equals_same_data_different_object - Fails with CoW
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_astype_str - failing on np.array(self, dtype=str)
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_groupby_extension_transform - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_groupby_extension_apply - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_groupby_extension_agg - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_groupby_extension_no_sort - Unhashable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__add__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__radd__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__sub__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rsub__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__mul__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rmul__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__floordiv__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rfloordiv__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__truediv__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rtruediv__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__pow__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rpow__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__mod__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_arith_frame_with_scalar[__rmod__] - raises in coercing to Series
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_compare_array[eq] - Comparison methods not implemented
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_compare_array[ne] - Comparison methods not implemented
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_loc_scalar_mixed - ValueError: Must have equal len keys and value
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_loc_scalar_multiple_homogoneous - ValueError: Must have equal len keys and value
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_iloc_scalar_mixed - ValueError: Must have equal len keys and value
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_iloc_scalar_multiple_homogoneous - ValueError: Must have equal len keys and value
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask[True-numpy-array] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask[True-boolean-array] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask[True-boolean-array-na] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask[False-boolean-array] - Issues unwanted DeprecationWarning
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask[False-boolean-array-na] - Issues unwanted DeprecationWarning
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask_raises[False] - Fails to raise
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask_boolean_array_with_na[True] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask_boolean_array_with_na[False] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_array[True-list] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_array[True-integer-array] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_array[True-numpy-array] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_with_missing_raises[list-False] - list indices must be integers or slices, not NAType
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_with_missing_raises[list-True] - list indices must be integers or slices, not NAType
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_with_missing_raises[integer-array-False] - list indices must be integers or slices, not NAType
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_integer_with_missing_raises[integer-array-True] - list indices must be integers or slices, not NAType
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_scalar_key_sequence_raise - Fails to raise
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_with_expansion_dataframe_column[full_slice] - slice is not iterable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_frame_2d_values - slice is not iterable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask_broadcast[loc] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_mask_broadcast[None] - cannot set using a list-like indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_slice[True] - cannot set using a slice indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_slice[False] - cannot set using a slice indexer with a different length
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_loc_iloc_slice - slice object is not iterable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_slice_mismatch_length_raises - slice object is not iterable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_slice_array - slice object is not iterable
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_invalid - Fail to raise
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_setitem_2d_values - only integer scalar arrays can be converted
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_EA_types[c] - data type 'json' not understood
XFAIL pandas/tests/extension/json/test_json.py::TestJSONArray::test_EA_types[python] - data type 'json' not understood
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[uint8-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[uint16-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[uint32-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[uint64-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[int8-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[int16-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[int32-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[int64-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[float-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[double-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[decimal128(7, 3)-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[string-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[binary-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[time32[s]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[time32[ms]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[time64[us]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[time64[ns]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[date32[day]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[date64[ms]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[s]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[s, tz=UTC]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[s, tz=US/Pacific]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[s, tz=US/Eastern]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ms]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ms, tz=UTC]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ms, tz=US/Pacific]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ms, tz=US/Eastern]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[us]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[us, tz=UTC]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[us, tz=US/Pacific]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[us, tz=US/Eastern]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ns]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ns, tz=UTC]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ns, tz=US/Pacific]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[timestamp[ns, tz=US/Eastern]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[duration[s]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[duration[ms]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[duration[us]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[duration[ns]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_integer_with_missing_raises[bool-list-True] - GH-31948
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint8-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint8-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint16-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint16-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint32-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint32-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint64-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[uint64-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int8-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int8-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int16-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int16-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int32-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int32-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int64-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[int64-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[float-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[float-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[double-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[double-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[decimal128(7, 3)-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[decimal128(7, 3)-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[string-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[string-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[binary-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[binary-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time32[s]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time32[s]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time32[ms]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time32[ms]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time64[us]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time64[us]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time64[ns]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[time64[ns]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[date32[day]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[date32[day]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[date64[ms]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[date64[ms]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=UTC]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=UTC]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=US/Pacific]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=US/Pacific]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=US/Eastern]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[s, tz=US/Eastern]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=UTC]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=UTC]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=US/Pacific]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=US/Pacific]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=US/Eastern]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ms, tz=US/Eastern]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=UTC]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=UTC]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=US/Pacific]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=US/Pacific]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=US/Eastern]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[us, tz=US/Eastern]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=UTC]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=UTC]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=US/Pacific]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=US/Pacific]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=US/Eastern]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[timestamp[ns, tz=US/Eastern]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[s]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[s]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[ms]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[ms]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[us]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[us]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[ns]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[duration[ns]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[bool-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_getitem_series_integer_with_missing_raises[bool-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[binary] - For binary .astype(str) decodes.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[timestamp[s]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[timestamp[ms]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[timestamp[us]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[timestamp[ns]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[duration[s]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[duration[ms]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[duration[us]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_astype_str[duration[ns]] - pd.Timestamp/pd.Timedelta repr different from numpy repr
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_from_dtype[decimal128(7, 3)] - pyarrow.type_for_alias cannot infer decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_from_dtype[string] - ArrowDtype(pa.string()) != StringDtype('pyarrow')
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_from_sequence_of_strings_pa_array[time64[ns]] - Nanosecond time parsing not supported.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_accumulate_series[cumsum-bool-True] - cumsum not implemented for bool
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_accumulate_series[cumsum-bool-False] - cumsum not implemented for bool
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[all-string-True] - all is not implemented in pyarrow=19.0.1 for string
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[all-string-False] - all is not implemented in pyarrow=19.0.1 for string
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[all-binary-True] - all is not implemented in pyarrow=19.0.1 for binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[all-binary-False] - all is not implemented in pyarrow=19.0.1 for binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[any-string-True] - any is not implemented in pyarrow=19.0.1 for string
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[any-string-False] - any is not implemented in pyarrow=19.0.1 for string
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[any-binary-True] - any is not implemented in pyarrow=19.0.1 for binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_series_boolean[any-binary-False] - any is not implemented in pyarrow=19.0.1 for binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_frame[std-date64[ms]-True] - Cannot cast
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_reduce_frame[sem-date64[ms]-True] - Cannot cast
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_construct_from_string_own_name[decimal128(7, 3)] - pyarrow.type_for_alias cannot infer decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_is_dtype_from_name[decimal128(7, 3)] - pyarrow.type_for_alias cannot infer decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[decimal128(7, 3)] - decimal128(7, 3) does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[binary] - binary does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[time32[s]] - time32[s] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[time32[ms]] - time32[ms] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[time64[us]] - time64[us] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[time64[ns]] - time64[ns] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[date32[day]] - date32[day] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[date64[ms]] - date64[ms] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[s, tz=UTC]] - timestamp[s, tz=UTC] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[s, tz=US/Pacific]] - timestamp[s, tz=US/Pacific] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[s, tz=US/Eastern]] - timestamp[s, tz=US/Eastern] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ms, tz=UTC]] - timestamp[ms, tz=UTC] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ms, tz=US/Pacific]] - timestamp[ms, tz=US/Pacific] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ms, tz=US/Eastern]] - timestamp[ms, tz=US/Eastern] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[us, tz=UTC]] - timestamp[us, tz=UTC] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[us, tz=US/Pacific]] - timestamp[us, tz=US/Pacific] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[us, tz=US/Eastern]] - timestamp[us, tz=US/Eastern] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ns, tz=UTC]] - timestamp[ns, tz=UTC] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ns, tz=US/Pacific]] - timestamp[ns, tz=US/Pacific] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_get_common_dtype[timestamp[ns, tz=US/Eastern]] - timestamp[ns, tz=US/Eastern] does not have associated numpy dtype findable by find_common_type
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[uint8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[uint16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[uint32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[uint64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[int8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[int16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[int32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[int64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[float] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[double] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[decimal128(7, 3)] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[string] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[binary] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[time32[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[time32[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[time64[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[time64[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[date32[day]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[date64[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[s, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[s, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[s, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ms, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ms, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ms, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[us, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[us, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[us, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ns, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ns, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[timestamp[ns, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[duration[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[duration[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[duration[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[duration[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_view[bool] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[uint8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[uint16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[uint32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[uint64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[int8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[int16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[int32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[int64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[float] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[double] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[decimal128(7, 3)] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[string] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[binary] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[time32[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[time32[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[time64[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[time64[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[date32[day]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[date64[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[s, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[s, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[s, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ms, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ms, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ms, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[us, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[us, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[us, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ns, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ns, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[timestamp[ns, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[duration[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[duration[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[duration[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[duration[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_transpose[bool] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[uint8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[uint16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[uint32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[uint64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[int8] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[int16] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[int32] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[int64] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[float] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[double] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[decimal128(7, 3)] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[string] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[binary] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[time32[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[time32[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[time64[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[time64[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[date32[day]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[date64[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[s, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[s, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[s, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ms, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ms, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ms, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[us, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[us, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[us, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ns, tz=UTC]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ns, tz=US/Pacific]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[timestamp[ns, tz=US/Eastern]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[duration[s]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[duration[ms]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[duration[us]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[duration[ns]] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_setitem_preserves_views[bool] - reason: [NOTRUN] GH 45419: pyarrow.ChunkedArray does not support views
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[decimal128(7, 3)-c-pyarrow] - Parameterized types decimal128(7, 3) not supported.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[decimal128(7, 3)-c-_NoDefault.no_default] - Parameterized types decimal128(7, 3) not supported.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[decimal128(7, 3)-python-pyarrow] - Parameterized types decimal128(7, 3) not supported.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[decimal128(7, 3)-python-_NoDefault.no_default] - Parameterized types decimal128(7, 3) not supported.
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[binary-c-pyarrow] - CSV parsers don't correctly handle binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[binary-c-_NoDefault.no_default] - CSV parsers don't correctly handle binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[binary-python-pyarrow] - CSV parsers don't correctly handle binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[binary-python-_NoDefault.no_default] - CSV parsers don't correctly handle binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=UTC]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=UTC]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=UTC]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=UTC]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Pacific]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Pacific]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Pacific]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Pacific]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Eastern]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Eastern]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Eastern]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[us, tz=US/Eastern]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=UTC]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=UTC]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=UTC]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=UTC]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Pacific]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Pacific]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Pacific]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Pacific]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Eastern]-c-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Eastern]-c-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Eastern]-python-pyarrow] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_EA_types[timestamp[ns, tz=US/Eastern]-python-_NoDefault.no_default] - https://github.com/pandas-dev/pandas/issues/49767
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[float] - pyarrow.compute.invert does support float
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[double] - pyarrow.compute.invert does support double
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[decimal128(7, 3)] - pyarrow.compute.invert does support decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[binary] - pyarrow.compute.invert does support binary
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[time32[s]] - pyarrow.compute.invert does support time32[s]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[time32[ms]] - pyarrow.compute.invert does support time32[ms]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[time64[us]] - pyarrow.compute.invert does support time64[us]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[time64[ns]] - pyarrow.compute.invert does support time64[ns]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[date32[day]] - pyarrow.compute.invert does support date32[day]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[date64[ms]] - pyarrow.compute.invert does support date64[ms]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[s]] - pyarrow.compute.invert does support timestamp[s]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[s, tz=UTC]] - pyarrow.compute.invert does support timestamp[s, tz=UTC]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[s, tz=US/Pacific]] - pyarrow.compute.invert does support timestamp[s, tz=US/Pacific]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[s, tz=US/Eastern]] - pyarrow.compute.invert does support timestamp[s, tz=US/Eastern]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ms]] - pyarrow.compute.invert does support timestamp[ms]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ms, tz=UTC]] - pyarrow.compute.invert does support timestamp[ms, tz=UTC]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ms, tz=US/Pacific]] - pyarrow.compute.invert does support timestamp[ms, tz=US/Pacific]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ms, tz=US/Eastern]] - pyarrow.compute.invert does support timestamp[ms, tz=US/Eastern]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[us]] - pyarrow.compute.invert does support timestamp[us]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[us, tz=UTC]] - pyarrow.compute.invert does support timestamp[us, tz=UTC]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[us, tz=US/Pacific]] - pyarrow.compute.invert does support timestamp[us, tz=US/Pacific]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[us, tz=US/Eastern]] - pyarrow.compute.invert does support timestamp[us, tz=US/Eastern]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ns]] - pyarrow.compute.invert does support timestamp[ns]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ns, tz=UTC]] - pyarrow.compute.invert does support timestamp[ns, tz=UTC]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ns, tz=US/Pacific]] - pyarrow.compute.invert does support timestamp[ns, tz=US/Pacific]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[timestamp[ns, tz=US/Eastern]] - pyarrow.compute.invert does support timestamp[ns, tz=US/Eastern]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[duration[s]] - pyarrow.compute.invert does support duration[s]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[duration[ms]] - pyarrow.compute.invert does support duration[ms]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[duration[us]] - pyarrow.compute.invert does support duration[us]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_invert[duration[ns]] - pyarrow.compute.invert does support duration[ns]
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_diff[uint8-1] - diff with uint8 and periods=1 will overflow
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_diff[uint16-1] - diff with uint16 and periods=1 will overflow
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_diff[uint32-1] - diff with uint32 and periods=1 will overflow
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_diff[uint64-1] - diff with uint64 and periods=1 will overflow
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__sub__-time32[s]] - __sub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__sub__-time32[ms]] - __sub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__sub__-time64[us]] - __sub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__sub__-time64[ns]] - __sub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rsub__-time32[s]] - __rsub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rsub__-time32[ms]] - __rsub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rsub__-time64[us]] - __rsub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rsub__-time64[ns]] - __rsub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__floordiv__-duration[s]] - __floordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__floordiv__-duration[ms]] - __floordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__floordiv__-duration[us]] - __floordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__floordiv__-duration[ns]] - __floordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-uint8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-uint16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-uint32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-uint64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-int8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-int16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-int32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-int64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-duration[s]] - __rfloordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-duration[ms]] - __rfloordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-duration[us]] - __rfloordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rfloordiv__-duration[ns]] - __rfloordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__truediv__-duration[s]] - __truediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__truediv__-duration[ms]] - __truediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__truediv__-duration[us]] - __truediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__truediv__-duration[ns]] - __truediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rtruediv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rtruediv__-duration[s]] - __rtruediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rtruediv__-duration[ms]] - __rtruediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rtruediv__-duration[us]] - __rtruediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rtruediv__-duration[ns]] - __rtruediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-uint8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-uint16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-uint32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-uint64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-int8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-int16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-int32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-int64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-float] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for float
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-double] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for double
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_scalar[__rpow__-decimal128(7, 3)] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__sub__-time32[s]] - __sub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__sub__-time32[ms]] - __sub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__sub__-time64[us]] - __sub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__sub__-time64[ns]] - __sub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rsub__-time32[s]] - __rsub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rsub__-time32[ms]] - __rsub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rsub__-time64[us]] - __rsub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rsub__-time64[ns]] - __rsub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__floordiv__-duration[s]] - __floordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__floordiv__-duration[ms]] - __floordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__floordiv__-duration[us]] - __floordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__floordiv__-duration[ns]] - __floordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-uint8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-uint16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-uint32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-uint64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-int8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-int16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-int32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-int64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-duration[s]] - __rfloordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-duration[ms]] - __rfloordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-duration[us]] - __rfloordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rfloordiv__-duration[ns]] - __rfloordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__truediv__-duration[s]] - __truediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__truediv__-duration[ms]] - __truediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__truediv__-duration[us]] - __truediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__truediv__-duration[ns]] - __truediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rtruediv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rtruediv__-duration[s]] - __rtruediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rtruediv__-duration[ms]] - __rtruediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rtruediv__-duration[us]] - __rtruediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rtruediv__-duration[ns]] - __rtruediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-uint8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-uint16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-uint32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-uint64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-int8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-int16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-int32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-int64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-float] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for float
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-double] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for double
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_frame_with_scalar[__rpow__-decimal128(7, 3)] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-uint8] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-uint16] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-uint32] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-uint64] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-time32[s]] - __sub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-time32[ms]] - __sub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-time64[us]] - __sub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__sub__-time64[ns]] - __sub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-uint8] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-uint16] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-uint32] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-uint64] - Implemented pyarrow.compute.subtract_checked which raises on overflow for uint64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-time32[s]] - __rsub__ not supported betweenpd.NA and time32[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-time32[ms]] - __rsub__ not supported betweenpd.NA and time32[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-time64[us]] - __rsub__ not supported betweenpd.NA and time64[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rsub__-time64[ns]] - __rsub__ not supported betweenpd.NA and time64[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__floordiv__-duration[s]] - __floordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__floordiv__-duration[ms]] - __floordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__floordiv__-duration[us]] - __floordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__floordiv__-duration[ns]] - __floordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-uint8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-uint16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-uint32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-uint64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-int8] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-int16] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-int32] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-int64] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-duration[s]] - __rfloordiv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-duration[ms]] - __rfloordiv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-duration[us]] - __rfloordiv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rfloordiv__-duration[ns]] - __rfloordiv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__truediv__-duration[s]] - __truediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__truediv__-duration[ms]] - __truediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__truediv__-duration[us]] - __truediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__truediv__-duration[ns]] - __truediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rtruediv__-decimal128(7, 3)] - divide by 0
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rtruediv__-duration[s]] - __rtruediv__ not supported betweenpd.NA and duration[s] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rtruediv__-duration[ms]] - __rtruediv__ not supported betweenpd.NA and duration[ms] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rtruediv__-duration[us]] - __rtruediv__ not supported betweenpd.NA and duration[us] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rtruediv__-duration[ns]] - __rtruediv__ not supported betweenpd.NA and duration[ns] Python scalar
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-uint8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-uint16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-uint32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-uint64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for uint64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-int8] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int8
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-int16] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int16
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-int32] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int32
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-int64] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for int64
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-float] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for float
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-double] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for double
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_arith_series_with_array[__rpow__-decimal128(7, 3)] - GH#29997: 1**pandas.NA == 1 while 1**pyarrow.NA == NULL for decimal128(7, 3)
XFAIL pandas/tests/extension/test_arrow.py::TestArrowArray::test_add_series_with_extension_array[int8] - raises on overflow for int8
XFAIL pandas/tests/extension/test_arrow.py::test_str_join - TODO: StringMethods._validate should support Arrow list types
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[float] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[double] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[s]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[s, tz=UTC]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[s, tz=US/Pacific]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[s, tz=US/Eastern]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ms]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ms, tz=UTC]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ms, tz=US/Pacific]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ms, tz=US/Eastern]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[us]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[us, tz=UTC]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[us, tz=US/Pacific]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[us, tz=US/Eastern]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ns]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ns, tz=UTC]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ns, tz=US/Pacific]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[timestamp[ns, tz=US/Eastern]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[duration[s]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[duration[ms]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[duration[us]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_arrow.py::test_infer_dtype_pyarrow_dtype[duration[ns]] - in infer_dtype pd.NA is not ignored in these cases even with skipna=True in the list(data) check below
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_setitem_integer_with_missing_raises[list-True] - GH-31948
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_getitem_series_integer_with_missing_raises[list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_getitem_series_integer_with_missing_raises[integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_arith_frame_with_scalar[__rmod__] - rmod never called when string is first argument
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_arith_series_with_scalar[__rmod__] - rmod never called when string is first argument
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_array_repr[big] - Categorical overrides __repr__
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_array_repr[small] - Categorical overrides __repr__
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_groupby_extension_agg[True] - TBD
XFAIL pandas/tests/extension/test_categorical.py::TestCategorical::test_groupby_extension_agg[False] - TBD
XFAIL pandas/tests/extension/test_datetime.py::TestDatetimeArray::test_setitem_integer_with_missing_raises[list-True] - GH-31948
XFAIL pandas/tests/extension/test_datetime.py::TestDatetimeArray::test_EA_types[c] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_datetime.py::TestDatetimeArray::test_EA_types[python] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_datetime.py::TestDatetimeArray::test_getitem_series_integer_with_missing_raises[list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_datetime.py::TestDatetimeArray::test_getitem_series_integer_with_missing_raises[integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_setitem_integer_with_missing_raises[list-True] - GH-31948
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_getitem_series_integer_with_missing_raises[list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_getitem_series_integer_with_missing_raises[integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_fillna_length_mismatch - Raises with incorrect message bc it disallows *all* listlikes instead of just wrong-length listlikes
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_EA_types[c] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_interval.py::TestIntervalArray::test_EA_types[python] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Int8Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Int16Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Int32Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Int64Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[UInt8Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[UInt16Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[UInt32Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[UInt64Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Float32Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[Float64Dtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_setitem_integer_with_missing_raises[BooleanDtype-list-True] - GH-31948
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int8Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int8Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int16Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int16Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int32Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int32Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int64Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Int64Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt8Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt8Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt16Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt16Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt32Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt32Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt64Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[UInt64Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Float32Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Float32Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Float64Dtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[Float64Dtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[BooleanDtype-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_getitem_series_integer_with_missing_raises[BooleanDtype-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_masked.py::TestMaskedArrays::test_divmod_series_array[BooleanDtype] - Inconsistency between floordiv and divmod; we raise for floordiv but not for divmod. This matches what we do for non-masked bool dtype.
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_with_missing_raises[float-list-True] - GH-31948
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_with_missing_raises[object-list-True] - GH-31948
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_getitem_series_integer_with_missing_raises[float-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_getitem_series_integer_with_missing_raises[float-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_getitem_series_integer_with_missing_raises[object-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_getitem_series_integer_with_missing_raises[object-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_series_constructor_scalar_with_index[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_check_dtype[object] - NumpyExtensionArray expectedly clashes with a NumPy name: object
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_getitem_scalar[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_shift_fill_value[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_limit_frame[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_limit_series[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_copy_frame[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_copy_series[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_searchsorted[True-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_searchsorted[False-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_diff[float] - NumpyExtensionArray.diff may fail on dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_diff[object] - NumpyExtensionArray.diff may fail on dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_insert[object] - Dimension mismatch in np.concatenate
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_insert_invalid[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_arith_series_with_scalar[__mul__-object] - the Series.combine step raises but not the Series method.
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_arith_series_with_scalar[__rmul__-object] - the Series.combine step raises but not the Series method.
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_arith_frame_with_scalar[__mul__-object] - the Series.combine step raises but not the Series method.
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_arith_frame_with_scalar[__rmul__-object] - the Series.combine step raises but not the Series method.
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_series[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_fillna_frame[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_invalid[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_sequence_broadcasts[True-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_sequence_broadcasts[False-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask_broadcast[object-loc] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask_broadcast[object-None] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_scalar_key_sequence_raise[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask[True-object-numpy-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask[True-object-boolean-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask[False-object-numpy-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_mask[False-object-boolean-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[True-object-list] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[True-object-integer-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[True-object-numpy-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[False-object-list] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[False-object-integer-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_integer_array[False-object-numpy-array] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_slice[True-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_slice[False-object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_setitem_loc_iloc_slice[object] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_index_from_listlike_with_dtype[float] - NumpyEADtype is unpacked
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_index_from_listlike_with_dtype[object] - NumpyEADtype is unpacked
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_EA_types[object-c] - Fails for object dtype
XFAIL pandas/tests/extension/test_numpy.py::TestNumpyExtensionArray::test_EA_types[object-python] - Fails for object dtype
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_setitem_integer_with_missing_raises[D-list-True] - GH-31948
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_setitem_integer_with_missing_raises[2D-list-True] - GH-31948
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_getitem_series_integer_with_missing_raises[D-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_getitem_series_integer_with_missing_raises[D-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_getitem_series_integer_with_missing_raises[2D-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_period.py::TestPeriodArray::test_getitem_series_integer_with_missing_raises[2D-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_EA_types[0-c] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_EA_types[0-python] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_EA_types[nan-c] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_EA_types[nan-python] - _from_sequence_of_strings not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_getitem_series_integer_with_missing_raises[0-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_getitem_series_integer_with_missing_raises[0-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_getitem_series_integer_with_missing_raises[nan-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_getitem_series_integer_with_missing_raises[nan-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-prod-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-prod-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-std-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-std-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-var-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-var-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-median-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-median-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-kurt-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-kurt-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-skew-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-skew-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-sem-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[0-sem-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-sum-False] - getting a non-nan float
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-max-False] - getting a non-nan float
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-min-False] - getting a non-nan float
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-mean-False] - getting a non-nan float
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-prod-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-prod-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-std-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-std-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-var-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-var-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-median-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-median-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-kurt-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-kurt-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-skew-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-skew-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-sem-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_series_numeric[nan-sem-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-prod-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-prod-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-std-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-std-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-var-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-var-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-median-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-median-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-kurt-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-kurt-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-skew-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-skew-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-sem-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[0-sem-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-sum-False] - ExtensionArray NA mask are different
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-max-False] - ExtensionArray NA mask are different
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-min-False] - ExtensionArray NA mask are different
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-mean-False] - ExtensionArray NA mask are different
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-prod-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-prod-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-std-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-std-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-var-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-var-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-median-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-median-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-kurt-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-kurt-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-skew-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-skew-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-sem-True] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_reduce_frame[nan-sem-False] - This should be viable but is not implemented
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_fillna_series[0] - Unsupported
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_fillna_series[nan] - Unsupported
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_fillna_length_mismatch[0] - Not Applicable
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_fillna_length_mismatch[nan] - Not Applicable
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_astype_string[0-string[python]] - no sparse StringDtype
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_astype_string[0-string[pyarrow]] - no sparse StringDtype
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_astype_string[nan-string[python]] - no sparse StringDtype
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_astype_string[nan-string[pyarrow]] - no sparse StringDtype
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_arith_frame_with_scalar[0-__add__] - result dtype.fill_value mismatch
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_arith_frame_with_scalar[0-__radd__] - result dtype.fill_value mismatch
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_arith_frame_with_scalar[0-__sub__] - result dtype.fill_value mismatch
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_arith_frame_with_scalar[0-__rsub__] - result dtype.fill_value mismatch
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_arith_frame_with_scalar[0-__rpow__] - result dtype.fill_value mismatch
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_array[0-eq] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_array[0-ge] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_array[0-le] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_sparse_array[0-eq] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_sparse_array[0-ne] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_sparse_array[0-ge] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_sparse_array[0-lt] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_sparse_array[0-le] - Wrong fill_value
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_array_repr[0] - Different repr
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_array_repr[nan] - Different repr
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_groupby_extension_agg[0-True] - result does not match expected
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_groupby_extension_agg[0-False] - result does not match expected
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_groupby_extension_agg[nan-True] - result does not match expected
XFAIL pandas/tests/extension/test_sparse.py::TestSparseArray::test_groupby_extension_agg[nan-False] - result does not match expected
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[True-string=string[python]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[True-string=string[pyarrow]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[True-string=str[pyarrow]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[True-string=str[python]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[False-string=string[python]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[False-string=string[pyarrow]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[False-string=str[pyarrow]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_setitem_integer_with_missing_raises[False-string=str[python]-list-True] - GH-31948
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=string[python]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=string[python]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=string[pyarrow]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=string[pyarrow]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=str[pyarrow]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=str[pyarrow]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=str[python]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[True-string=str[python]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=string[python]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=string[python]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=string[pyarrow]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=string[pyarrow]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=str[pyarrow]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=str[pyarrow]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=str[python]-list] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/extension/test_string.py::TestStringArray::test_getitem_series_integer_with_missing_raises[False-string=str[python]-integer-array] - Tries label-based and raises KeyError; in some cases raises when calling np.asarray
XFAIL pandas/tests/frame/indexing/test_coercion.py::test_15231 - unwanted upcast
XFAIL pandas/tests/frame/indexing/test_coercion.py::test_12499 - unwanted casting to dt64
XFAIL pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetItemBooleanMask::test_setitem_loc_empty_indexer_raises_with_non_empty_value[list] - Currently empty indexers are treated as all False
XFAIL pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetItemBooleanMask::test_setitem_loc_empty_indexer_raises_with_non_empty_value[array] - Currently empty indexers are treated as all False
XFAIL pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetItemBooleanMask::test_setitem_loc_empty_indexer_raises_with_non_empty_value[Series] - Currently empty indexers are treated as all False
XFAIL pandas/tests/frame/methods/test_duplicated.py::test_duplicated_nan_none[first-expected0] - GH#21720; nan/None falsely considered equal
XFAIL pandas/tests/frame/methods/test_duplicated.py::test_duplicated_nan_none[last-expected1] - GH#21720; nan/None falsely considered equal
XFAIL pandas/tests/frame/methods/test_duplicated.py::test_duplicated_nan_none[False-expected2] - GH#21720; nan/None falsely considered equal
XFAIL pandas/tests/frame/methods/test_info.py::test_info_memory_usage_deep_pypy - on PyPy deep=True does not change result
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea[interval[int64, right]-DataFrame] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea[interval[int64, right]-Series] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_with_na[interval[int64, right]-DataFrame] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_with_na[interval[int64, right]-Series] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_all_na[interval[int64, right]-DataFrame] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_all_na[interval[int64, right]-Series] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_scalar[interval[int64, right]-DataFrame] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_quantile.py::TestQuantileExtensionDtype::test_quantile_ea_scalar[interval[int64, right]-Series] - raises when trying to add Intervals
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[datetime64[ns]-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[datetime64[ns, US/Pacific]-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[period[D]-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[timedelta64[ns]-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[interval[float64, right]-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[Int64-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[Int64-False] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[Float32-True] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/methods/test_shift.py::TestDataFrameShift::test_shift_dt64values_axis1_invalid_fill[Float32-False] - _can_hold_element incorrectly always returns True
XFAIL pandas/tests/frame/test_arithmetic.py::TestFrameArithmeticUnsorted::test_inplace_ops_identity2[numexpr-div] - __idiv__ not implemented
XFAIL pandas/tests/frame/test_arithmetic.py::TestFrameArithmeticUnsorted::test_inplace_ops_identity2[python-div] - __idiv__ not implemented
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[list-DataFrame-timedelta] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[list-DataFrame-timedelta64] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[list-Series-timedelta] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[list-Series-timedelta64] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[dict-Series-timedelta] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_constructors.py::TestFromScalar::test_from_out_of_bounds_ns_timedelta[dict-Series-timedelta64] - TimedeltaArray constructor has been updated to cast td64 to non-nano, but TimedeltaArray._from_sequence has not
XFAIL pandas/tests/frame/test_query_eval.py::TestDataFrameEval::test_extension_array_eval[numexpr-python] - numexpr does not support extension array dtypes
XFAIL pandas/tests/frame/test_query_eval.py::TestDataFrameEval::test_extension_array_eval[numexpr-pandas] - numexpr does not support extension array dtypes
XFAIL pandas/tests/frame/test_reductions.py::TestDataFrameReductions::test_reductions_skipna_none_raises[DataFrame-count] - Count does not accept skipna
XFAIL pandas/tests/frame/test_reductions.py::TestDataFrameReductions::test_reductions_skipna_none_raises[Series-count] - Count does not accept skipna
XFAIL pandas/tests/frame/test_ufunc.py::test_unary_binary[Int64] - Extension / mixed with multiple outputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_unary_binary[dtype2] - Extension / mixed with multiple outputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[int64-Int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[int64-dtype_a2] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[Int64-int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[Int64-Int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[Int64-dtype_a2] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[dtype_b2-int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[dtype_b2-Int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_columns[dtype_b2-dtype_a2] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_index[Int64] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/frame/test_ufunc.py::test_binary_input_aligns_index[dtype2] - Extension / mixed with multiple inputs not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_align[index0] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_align[index1] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_merge[left0-right0-False] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_merge[left1-right1-False] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_groupby - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_window[True] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestPreserves::test_window[False] - Not implemented.
XFAIL pandas/tests/generic/test_duplicate_labels.py::TestRaises::test_merge_raises - Not implemented.
XFAIL pandas/tests/generic/test_finalize.py::test_finalize_called[dot] - Implement binary finalize
XFAIL pandas/tests/generic/test_finalize.py::test_finalize_called[update] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_finalize_called[merge] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_finalize_called_eval_numexpr - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_binops[add-(Series,Series)-right] - <built-in function add> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[add-(DataFrame,DataFrame)-right] - <built-in function add> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[add-(Series,DataFrame)-left] - <built-in function add> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[add-(DataFrame,Series)-right] - <built-in function add> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[radd-(Series,Series)-left] - <function radd at 0x7fd710d41cf0> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[radd-(DataFrame,DataFrame)-left] - <function radd at 0x7fd710d41cf0> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[radd-(Series,DataFrame)-left] - <function radd at 0x7fd710d41cf0> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[radd-(DataFrame,Series)-right] - <function radd at 0x7fd710d41cf0> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[sub-(Series,Series)-right] - <built-in function sub> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[sub-(DataFrame,DataFrame)-right] - <built-in function sub> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[sub-(Series,DataFrame)-left] - <built-in function sub> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[sub-(DataFrame,Series)-right] - <built-in function sub> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rsub-(Series,Series)-left] - <function rsub at 0x7fd710d41d80> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rsub-(DataFrame,DataFrame)-left] - <function rsub at 0x7fd710d41d80> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rsub-(Series,DataFrame)-left] - <function rsub at 0x7fd710d41d80> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rsub-(DataFrame,Series)-right] - <function rsub at 0x7fd710d41d80> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mul-(Series,Series)-right] - <built-in function mul> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mul-(DataFrame,DataFrame)-right] - <built-in function mul> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mul-(Series,DataFrame)-left] - <built-in function mul> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mul-(DataFrame,Series)-right] - <built-in function mul> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmul-(Series,Series)-left] - <function rmul at 0x7fd710d41e10> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmul-(DataFrame,DataFrame)-left] - <function rmul at 0x7fd710d41e10> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmul-(Series,DataFrame)-left] - <function rmul at 0x7fd710d41e10> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmul-(DataFrame,Series)-right] - <function rmul at 0x7fd710d41e10> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[truediv-(Series,Series)-right] - <built-in function truediv> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[truediv-(DataFrame,DataFrame)-right] - <built-in function truediv> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[truediv-(Series,DataFrame)-left] - <built-in function truediv> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[truediv-(DataFrame,Series)-right] - <built-in function truediv> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rtruediv-(Series,Series)-left] - <function rtruediv at 0x7fd710d41f30> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rtruediv-(DataFrame,DataFrame)-left] - <function rtruediv at 0x7fd710d41f30> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rtruediv-(Series,DataFrame)-left] - <function rtruediv at 0x7fd710d41f30> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rtruediv-(DataFrame,Series)-right] - <function rtruediv at 0x7fd710d41f30> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[floordiv-(Series,Series)-right] - <built-in function floordiv> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[floordiv-(DataFrame,DataFrame)-right] - <built-in function floordiv> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[floordiv-(Series,DataFrame)-left] - <built-in function floordiv> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[floordiv-(DataFrame,Series)-right] - <built-in function floordiv> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rfloordiv-(Series,Series)-left] - <function rfloordiv at 0x7fd710d41fc0> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rfloordiv-(DataFrame,DataFrame)-left] - <function rfloordiv at 0x7fd710d41fc0> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rfloordiv-(Series,DataFrame)-left] - <function rfloordiv at 0x7fd710d41fc0> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rfloordiv-(DataFrame,Series)-right] - <function rfloordiv at 0x7fd710d41fc0> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mod-(Series,Series)-right] - <built-in function mod> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mod-(DataFrame,DataFrame)-right] - <built-in function mod> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mod-(Series,DataFrame)-left] - <built-in function mod> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[mod-(DataFrame,Series)-right] - <built-in function mod> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmod-(Series,Series)-left] - <function rmod at 0x7fd710d42050> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmod-(DataFrame,DataFrame)-left] - <function rmod at 0x7fd710d42050> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmod-(Series,DataFrame)-left] - <function rmod at 0x7fd710d42050> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rmod-(DataFrame,Series)-right] - <function rmod at 0x7fd710d42050> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[pow-(Series,Series)-right] - <built-in function pow> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[pow-(DataFrame,DataFrame)-right] - <built-in function pow> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[pow-(Series,DataFrame)-left] - <built-in function pow> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[pow-(DataFrame,Series)-right] - <built-in function pow> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rpow-(Series,Series)-left] - <function rpow at 0x7fd710d42170> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rpow-(DataFrame,DataFrame)-left] - <function rpow at 0x7fd710d42170> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rpow-(Series,DataFrame)-left] - <function rpow at 0x7fd710d42170> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rpow-(DataFrame,Series)-right] - <function rpow at 0x7fd710d42170> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[eq-(Series,Series)-right] - <built-in function eq> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[eq-(DataFrame,DataFrame)-right] - <built-in function eq> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[eq-(Series,DataFrame)-left] - <built-in function eq> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[eq-(DataFrame,Series)-right] - <built-in function eq> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ne-(Series,Series)-right] - <built-in function ne> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ne-(DataFrame,DataFrame)-right] - <built-in function ne> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ne-(Series,DataFrame)-left] - <built-in function ne> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ne-(DataFrame,Series)-right] - <built-in function ne> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[lt-(Series,Series)-right] - <built-in function lt> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[lt-(DataFrame,DataFrame)-right] - <built-in function lt> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[lt-(Series,DataFrame)-left] - <built-in function lt> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[lt-(DataFrame,Series)-right] - <built-in function lt> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[le-(Series,Series)-right] - <built-in function le> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[le-(DataFrame,DataFrame)-right] - <built-in function le> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[le-(Series,DataFrame)-left] - <built-in function le> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[le-(DataFrame,Series)-right] - <built-in function le> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[gt-(Series,Series)-right] - <built-in function gt> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[gt-(DataFrame,DataFrame)-right] - <built-in function gt> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[gt-(Series,DataFrame)-left] - <built-in function gt> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[gt-(DataFrame,Series)-right] - <built-in function gt> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ge-(Series,Series)-right] - <built-in function ge> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ge-(DataFrame,DataFrame)-right] - <built-in function ge> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ge-(Series,DataFrame)-left] - <built-in function ge> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ge-(DataFrame,Series)-right] - <built-in function ge> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[and_-(Series,Series)-right] - <built-in function and_> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[and_-(DataFrame,DataFrame)-right] - <built-in function and_> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[and_-(Series,DataFrame)-left] - <built-in function and_> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[and_-(DataFrame,Series)-right] - <built-in function and_> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rand_-(Series,Series)-left] - <function rand_ at 0x7fd710d42200> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rand_-(DataFrame,DataFrame)-left] - <function rand_ at 0x7fd710d42200> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rand_-(Series,DataFrame)-left] - <function rand_ at 0x7fd710d42200> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rand_-(DataFrame,Series)-right] - <function rand_ at 0x7fd710d42200> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[xor-(Series,Series)-right] - <built-in function xor> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[xor-(DataFrame,DataFrame)-right] - <built-in function xor> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[xor-(Series,DataFrame)-left] - <built-in function xor> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[xor-(DataFrame,Series)-right] - <built-in function xor> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rxor-(Series,Series)-left] - <function rxor at 0x7fd710d42320> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rxor-(DataFrame,DataFrame)-left] - <function rxor at 0x7fd710d42320> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rxor-(Series,DataFrame)-left] - <function rxor at 0x7fd710d42320> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[rxor-(DataFrame,Series)-right] - <function rxor at 0x7fd710d42320> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[or_-(Series,Series)-right] - <built-in function or_> doesn't work when right has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[or_-(DataFrame,DataFrame)-right] - <built-in function or_> doesn't work when right has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[or_-(Series,DataFrame)-left] - <built-in function or_> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[or_-(DataFrame,Series)-right] - <built-in function or_> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ror_-(Series,Series)-left] - <function ror_ at 0x7fd710d42290> doesn't work when left has attrs and both are <class 'pandas.Series'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ror_-(DataFrame,DataFrame)-left] - <function ror_ at 0x7fd710d42290> doesn't work when left has attrs and both are <class 'pandas.DataFrame'>
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ror_-(Series,DataFrame)-left] - <function ror_ at 0x7fd710d42290> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_binops[ror_-(DataFrame,Series)-right] - <function ror_ at 0x7fd710d42290> doesn't work when the objects are different Series has attrs
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method2] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[<lambda>] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method4] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method5] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method6] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method7] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_categorical_accessor[method8] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>0-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>0-obj1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>1-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>1-obj1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>2-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>2-obj1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>3-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>3-obj1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>4-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>4-obj1] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>5-obj0] - not implemented
XFAIL pandas/tests/generic/test_finalize.py::test_groupby_finalize_not_implemented[<lambda>5-obj1] - not implemented
XFAIL pandas/tests/groupby/aggregate/test_aggregate.py::test_aggregate_udf_na_extension_type - Not implemented;see GH 31256
XFAIL pandas/tests/groupby/aggregate/test_aggregate.py::TestLambdaMangling::test_with_kwargs - GH-26611. kwargs for multi-agg.
XFAIL pandas/tests/groupby/aggregate/test_aggregate.py::test_agg_of_mode_list[test3-constant3]
XFAIL pandas/tests/groupby/aggregate/test_numba.py::test_multifunc_numba_udf_frame[agg_kwargs1-expected_func1] - This doesn't work yet! Fails in nopython pipeline!
XFAIL pandas/tests/groupby/test_all_methods.py::test_duplicate_columns[corrwith-True] - GH#50845 - corrwith fails when there are duplicate columns
XFAIL pandas/tests/groupby/test_all_methods.py::test_duplicate_columns[corrwith-False] - GH#50845 - corrwith fails when there are duplicate columns
XFAIL pandas/tests/groupby/test_categorical.py::test_series_groupby_on_2_categoricals_unobserved_zeroes_or_nans[corrwith] - TODO: implemented SeriesGroupBy.corrwith. See GH 32293
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-True-corrwith-True-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-True-corrwith-True-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-True-corrwith-False-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-True-corrwith-False-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-False-corrwith-True-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-False-corrwith-True-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-False-corrwith-False-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-True-False-corrwith-False-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-True-corrwith-True-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-True-corrwith-True-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-True-corrwith-False-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-True-corrwith-False-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-False-corrwith-True-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-False-corrwith-True-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-False-corrwith-False-range] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_category_order_reducer[False-False-False-corrwith-False-multi] - GH#49950 - corrwith with as_index=False may not have grouping column
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[True-True-corrwith-keys0-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[True-True-corrwith-keys1-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[True-False-corrwith-keys0-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[True-False-corrwith-keys1-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[False-True-corrwith-keys0-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[False-True-corrwith-keys1-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[False-False-corrwith-keys0-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/test_categorical.py::test_agg_list[False-False-corrwith-keys1-False] - GH#32293: attempts to call SeriesGroupBy.corrwith
XFAIL pandas/tests/groupby/transform/test_transform.py::test_pct_change[DataFrame-1-D] - GH#23918 before method uses freq in vectorized approach
XFAIL pandas/tests/groupby/transform/test_transform.py::test_pct_change[DataFrame--1-D] - GH#23918 before method uses freq in vectorized approach
XFAIL pandas/tests/groupby/transform/test_transform.py::test_pct_change[Series-1-D] - GH#23918 before method uses freq in vectorized approach
XFAIL pandas/tests/groupby/transform/test_transform.py::test_pct_change[Series--1-D] - GH#23918 before method uses freq in vectorized approach
XFAIL pandas/tests/groupby/transform/test_transform.py::test_null_group_str_reducer[True-corrwith] - incorrectly raises
XFAIL pandas/tests/groupby/transform/test_transform.py::test_null_group_str_reducer[False-corrwith] - incorrectly raises
XFAIL pandas/tests/indexes/datetimes/test_arithmetic.py::TestDatetimeIndexArithmetic::test_sub_datetime_preserves_freq_across_dst - The inherited freq is incorrect bc dti.freq is incorrect https://github.com/pandas-dev/pandas/pull/48818/files#r982793461
XFAIL pandas/tests/indexes/datetimes/test_constructors.py::TestDatetimeIndex::test_dti_ambiguous_matches_timestamp[Timestamp-False-tz1] - We implicitly get fold=0.
XFAIL pandas/tests/indexes/datetimes/test_constructors.py::TestDatetimeIndex::test_dti_ambiguous_matches_timestamp[DatetimeIndex-False-tz1] - We implicitly get fold=0.
XFAIL pandas/tests/indexes/interval/test_astype.py::TestIntSubtype::test_subtype_integer_errors - GH#15832
XFAIL pandas/tests/indexes/interval/test_interval.py::TestIntervalIndex::test_length[left-breaks3] - mismatched result unit
XFAIL pandas/tests/indexes/interval/test_interval.py::TestIntervalIndex::test_length[right-breaks3] - mismatched result unit
XFAIL pandas/tests/indexes/interval/test_interval.py::TestIntervalIndex::test_length[both-breaks3] - mismatched result unit
XFAIL pandas/tests/indexes/interval/test_interval.py::TestIntervalIndex::test_length[neither-breaks3] - mismatched result unit
XFAIL pandas/tests/indexes/multi/test_missing.py::test_hasnans_isnans - isna is not defined for MultiIndex
XFAIL pandas/tests/indexes/test_base.py::TestIndex::test_view_with_args_object_array_raises[categorical] - gh-25464
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[object]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[string]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[datetime]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[datetime-tz]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[period]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[timedelta]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[range]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[int8]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[int16]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[int32]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[int64]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[uint8]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[uint16]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[uint32]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[uint64]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[float32]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[float64]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[bool-object]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[bool-dtype]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[complex64]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[complex128]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[categorical]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[interval]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[empty]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[repeats]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[nullable_int]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[nullable_uint]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[nullable_float]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[nullable_bool]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[string-python]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_set_names_single_label_no_level[string-pyarrow]
XFAIL pandas/tests/indexes/test_common.py::TestCommon::test_searchsorted_monotonic[interval] - IntervalIndex.searchsorted does not support Interval arg
XFAIL pandas/tests/indexes/test_index_new.py::TestIndexConstructorInference::test_constructor_infer_nat_dt_like[NAType-DatetimeIndex-datetime64[ns]-ctor0-0] - Broken with np.NaT ctor; see GH 31884
XFAIL pandas/tests/indexes/test_index_new.py::TestIndexConstructorInference::test_constructor_infer_nat_dt_like[NAType-DatetimeIndex-datetime64[ns]-ctor0-1] - Broken with np.NaT ctor; see GH 31884
XFAIL pandas/tests/indexes/test_index_new.py::TestIndexConstructorInference::test_constructor_infer_nat_dt_like[NAType-TimedeltaIndex-timedelta64[ns]-ctor1-0] - Broken with np.NaT ctor; see GH 31884
XFAIL pandas/tests/indexes/test_index_new.py::TestIndexConstructorInference::test_constructor_infer_nat_dt_like[NAType-TimedeltaIndex-timedelta64[ns]-ctor1-1] - Broken with np.NaT ctor; see GH 31884
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_series_period - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_complex128 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_bool - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_datetime64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_datetime64tz - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_timedelta64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestSetitemCoercion::test_setitem_index_period - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestInsertIndexCoercion::test_insert_index_complex128 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestInsertIndexCoercion::test_insert_index_bool - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestWhereCoercion::test_where_index_complex128 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestWhereCoercion::test_where_index_bool - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestWhereCoercion::test_where_series_timedelta64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestWhereCoercion::test_where_series_period - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_has_comprehensive_tests - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_series_int64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_index_int64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_series_bool - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_index_bool - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_series_timedelta64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_index_timedelta64 - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestFillnaSeriesCoercion::test_fillna_index_period - Test not implemented
XFAIL pandas/tests/indexing/test_coercion.py::TestReplaceSeriesCoercion::test_replace_series_period - Test not implemented
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_list[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_str[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols0] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols1] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols2] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols3] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols4] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_diff_positional_int_columns_order[('pyxlsb', '.xlsb')-usecols5] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_without_slicing[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_usecols_excel_range_str[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_excel_cell_error_na[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_excel_cell_error_na[('calamine', '.ods')] - Calamine can't extract error from ods files
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_excel_table[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_reader_special_dtypes[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_date_conversion_overflow[('openpyxl', '.xlsx')] - Maybe not supported by openpyxl
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_date_conversion_overflow[('openpyxl', '.xlsm')] - Maybe not supported by openpyxl
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_date_conversion_overflow[(None, '.xlsx')] - Defaults to openpyxl, maybe not supported
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_date_conversion_overflow[(None, '.xlsm')] - Defaults to openpyxl, maybe not supported
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_date_conversion_overflow[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_sheet_name[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_reader_seconds[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_reader_seconds[('calamine', '.ods')] - ODS file contains bad datetime (seconds as text)
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_multiindex[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_multiindex_blank_after_name[('pyxlsb', '.xlsb')-both_name_blank_after_mi_name-idx_lvl20] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_multiindex_blank_after_name[('pyxlsb', '.xlsb')-both_name_multiple_blanks-idx_lvl21] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_skiprows[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_read_excel_skiprows_callable_not_in[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_ignore_chartsheets_by_str[('pyxlsb', '.xlsb')] - pyxlsb can't distinguish chartsheets from worksheets
XFAIL pandas/tests/io/excel/test_readers.py::TestReaders::test_ignore_chartsheets_by_int[('pyxlsb', '.xlsb')] - pyxlsb can't distinguish chartsheets from worksheets
XFAIL pandas/tests/io/excel/test_readers.py::TestExcelFileRead::test_excel_table_sheet_by_index[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestExcelFileRead::test_sheet_name[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestExcelFileRead::test_read_datetime_multiindex[('pyxlsb', '.xlsb')] - Sheets containing datetimes not supported by pyxlsb
XFAIL pandas/tests/io/excel/test_readers.py::TestExcelFileRead::test_ignore_chartsheets[('pyxlsb', '.xlsb')] - pyxlsb can't distinguish chartsheets from worksheets
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals0-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals1-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals2-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals3-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals4-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals5-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals6-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals7-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals8-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_orient[vals9-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals0-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals1-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals2-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals3-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals4-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals5-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals6-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals7-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals8-index]
XFAIL pandas/tests/io/json/test_json_table_schema.py::TestTableOrientReader::test_read_json_table_period_orient[vals9-index]
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_frame_non_unique_columns[data3-split] - GH#55827 non-nanosecond dt64 fails to round-trip
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_categorical[index-True] - Can't have duplicate index values for orient 'index')
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_categorical[index-False] - Can't have duplicate index values for orient 'index')
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_categorical[columns-True] - Can't have duplicate index values for orient 'columns')
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_categorical[columns-False] - Can't have duplicate index values for orient 'columns')
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_multiindex[columns0] - #50456 Column multiindex is stored and loaded differently
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_multiindex[columns1] - #50456 Column multiindex is stored and loaded differently
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_roundtrip_multiindex[columns2] - #50456 Column multiindex is stored and loaded differently
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val0] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val1] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val2] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val3] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val4] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val5] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val6] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val7] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[category-val8] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val0] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val1] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val2] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val3] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val4] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val5] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val6] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val7] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_latin_encoding[object-val8] - GH#13774 encoding kwarg not supported
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_tuple_labels[split-] - Produces JSON but not in a consistent manner
XFAIL pandas/tests/io/json/test_pandas.py::TestPandasContainer::test_tuple_labels[table-] - Produces JSON but not in a consistent manner
XFAIL pandas/tests/io/json/test_readlines.py::test_read_datetime[pyarrow] - Pyarrow only supports a file path as an input and line delimited json
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_chunks[pyarrow-1] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_chunks[pyarrow-1.0] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_chunks_series[pyarrow] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_each_chunk[pyarrow] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_chunks_from_file[pyarrow] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_unicode[pyarrow] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_nrows_chunks[pyarrow-2-2] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_nrows_chunks[pyarrow-4-2] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/json/test_readlines.py::test_readjson_lines_chunks_fileurl[pyarrow] - Pyarrow only supports a file path as an input and line delimited jsonand doesn't support chunksize parameter.
XFAIL pandas/tests/io/parser/common/test_common_basic.py::test_unnamed_columns[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_common_basic.py::test_encoding_surrogatepass[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_common_basic.py::test_short_multi_line[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_data_list.py::test_read_data_list[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_file_buffer_url.py::test_path_path_lib[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_float.py::test_too_many_exponent_digits[c_high-round_trip-999999999999999999] - GH38794, on Linux gives object result
XFAIL pandas/tests/io/parser/common/test_float.py::test_too_many_exponent_digits[c_low-round_trip-999999999999999999] - GH38794, on Linux gives object result
XFAIL pandas/tests/io/parser/common/test_float.py::test_too_many_exponent_digits[pyarrow-None-999999999999999999] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_float.py::test_too_many_exponent_digits[pyarrow-None--999999999999999999] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_index.py::test_multi_index_blank_df[pyarrow-True-a,b-columns0-header0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_index.py::test_multi_index_blank_df[pyarrow-True-a,b\nc,d-columns1-header1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_index.py::test_multi_index_blank_df[pyarrow-False-a,b-columns0-header0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_index.py::test_multi_index_blank_df[pyarrow-False-a,b\nc,d-columns1-header1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_index.py::test_no_unnamed_index[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_inf.py::test_inf_parsing[pyarrow-True] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_inf.py::test_inf_parsing[pyarrow-False] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_inf.py::test_infinity_parsing[pyarrow-True] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_inf.py::test_infinity_parsing[pyarrow-False] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_ints.py::test_int64_overflow[pyarrow-None] - parses to float64
XFAIL pandas/tests/io/parser/common/test_ints.py::test_numeric_range_too_wide[pyarrow-exp_data0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_ints.py::test_numeric_range_too_wide[pyarrow-exp_data1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/common/test_read_errors.py::test_catch_too_many_names[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype[pyarrow-category] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype[pyarrow-dtype1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype[pyarrow-dtype2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype_single[pyarrow-dtype1] - Flaky test sometimes gives object dtype instead of Categorical
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype_unsorted[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype_missing[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_all_columns[pyarrow-True-str] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_all_columns[pyarrow-True-object] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_all_columns[pyarrow-False-str] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_all_columns[pyarrow-False-object] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_per_column[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_boolean_dtype[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_delimiter_with_usecols_and_parse_dates[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_decimal_and_exponential[python-numeric_decimal14-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_decimal_and_exponential[python-numeric_decimal15-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_decimal_and_exponential[python-numeric_decimal16-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal14-None-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal14-legacy-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal14-high-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal14-round_trip-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal15-None-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal15-legacy-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal15-high-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal15-round_trip-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal16-None-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal16-legacy-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal16-high-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_high-numeric_decimal16-round_trip-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal14-None-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal14-legacy-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal14-high-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal14-round_trip-None] - thousands=None and sep is in 1_,
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal15-None-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal15-legacy-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal15-high-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal15-round_trip-None] - thousands=None and sep is in 1_234,56
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal16-None-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal16-legacy-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal16-high-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_1000_sep_decimal_float_precision[c_low-numeric_decimal16-round_trip-None] - thousands=None and sep is in 1_234,56e0
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_true_values_cast_to_bool[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_mangle_dup_cols[pyarrow-dtypes0-1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_mangle_dup_cols[pyarrow-dtypes1-1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_mangle_dup_cols_single_dtype[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtype_multi_index[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtypes_defaultdict[pyarrow-float] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtypes_defaultdict[pyarrow-float64] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtypes_defaultdict_mangle_dup_cols[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_dtypes_defaultdict_invalid[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_ea_int_avoid_overflow[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/dtypes/test_dtypes_basic.py::test_accurate_parsing_of_large_integers[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_comment.py::test_comment_char_in_default_value[c_high] - see gh-34002: works on the python engine but not the c engine
XFAIL pandas/tests/io/parser/test_comment.py::test_comment_char_in_default_value[c_low] - see gh-34002: works on the python engine but not the c engine
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[gzip-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[gzip-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[gzip-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[gzip-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[bz2-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[bz2-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[bz2-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[bz2-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zip-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zip-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zip-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zip-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[xz-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[xz-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[xz-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[xz-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[tar-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[tar-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[tar-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[tar-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zstd-True-c_high-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zstd-True-c_low-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zstd-True-python-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_compression.py::test_compression[zstd-True-pyarrow-test.{ext}] - Cannot deduce compression from buffer of compressed data.
XFAIL pandas/tests/io/parser/test_encoding.py::test_not_readable[pyarrow-w+b] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_encoding.py::test_not_readable[pyarrow-w+t] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_read_with_bad_header[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_with_index_col[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format1[pyarrow-kwargs0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format1[pyarrow-kwargs1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format1[pyarrow-kwargs2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format2[pyarrow-kwargs0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format2[pyarrow-kwargs1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format2[pyarrow-kwargs2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format3[pyarrow-kwargs0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format3[pyarrow-kwargs1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format3[pyarrow-kwargs2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format_malformed1[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format_malformed2[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_common_format_malformed3[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multi_index_blank_line[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_names_backward_compat[pyarrow-foo,bar,baz\n1,2,3\n4,5,6-0] - DataFrame.columns are different
XFAIL pandas/tests/io/parser/test_header.py::test_singleton_header[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_mangles_multi_index[pyarrow-A,A,A,B\none,one,one,two\n0,40,34,0.1-expected0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_mangles_multi_index[pyarrow-A,A,A,B\none,one,one.1,two\n0,40,34,0.1-expected1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_mangles_multi_index[pyarrow-A,A,A,B,B\none,one,one.1,two,two\n0,40,34,0.1,0.1-expected2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-None-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-None-index_col1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns1-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns1-index_col1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns2-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns2-index_col1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns3-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_multi_index_unnamed[pyarrow-columns3-index_col1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_read_csv_multiindex_columns[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_read_csv_multi_header_length_check[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_missing_rows[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_multiple_whitespaces[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_header.py::test_header_delim_whitespace[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_multi_index_naming[pyarrow-index_names0] - One case raises, others are wrong
XFAIL pandas/tests/io/parser/test_index_col.py::test_multi_index_naming[pyarrow-index_names1] - One case raises, others are wrong
XFAIL pandas/tests/io/parser/test_index_col.py::test_multi_index_naming[pyarrow-index_names2] - One case raises, others are wrong
XFAIL pandas/tests/io/parser/test_index_col.py::test_multi_index_naming_not_all_at_beginning[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_no_multi_index_level_names_empty[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_header_with_index_col[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_index_col_multiindex_columns_no_data[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_index_col_header_no_data[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_multiindex_columns_no_data[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_multiindex_columns_index_col_with_data[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_index_col.py::test_specify_dtype_for_index_col[pyarrow-object-01] - Cannot disable type-inference for pyarrow engine
XFAIL pandas/tests/io/parser/test_index_col.py::test_multiindex_columns_not_leading_index_col[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_basic[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_basic_names[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_thorough_mangle_columns[pyarrow-a,a,a.1\n1,2,3-expected0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_thorough_mangle_columns[pyarrow-a,a,a.1,a.1.1,a.1.1.1,a.1.1.1.1\n1,2,3,4,5,6-expected1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_thorough_mangle_columns[pyarrow-a,a,a.3,a.1,a.2,a,a\n1,2,3,4,5,6,7-expected2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_mangled_unnamed_placeholders[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_mangle_dupe_cols_already_exists[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_mangle_dupes.py::test_mangle_dupe_cols_already_exists_unnamed_col[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_non_string_na_values[pyarrow-A,B\n-999,1.200\n2,-999.000\n3,4.500\n-na_values0] - pyarrow engined does not recognize equivalent floats
XFAIL pandas/tests/io/parser/test_na_values.py::test_non_string_na_values[pyarrow-A,B\n-999,1.200\n2,-999.000\n3,4.500\n-na_values3] - pyarrow engined does not recognize equivalent floats
XFAIL pandas/tests/io/parser/test_na_values.py::test_non_string_na_values[pyarrow-A,B\n-999,1.200\n2,-999.000\n3,4.500\n-na_values4] - pyarrow engined does not recognize equivalent floats
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_keep_default[pyarrow-kwargs0-expected0]
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_keep_default[pyarrow-kwargs2-expected2]
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_na_filter_override[pyarrow-True-row_data0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_na_filter_override[pyarrow-False-row_data1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_uint64[pyarrow-9223372036854775808,1\n,2-kwargs1-expected1] - Returns float64 instead of object
XFAIL pandas/tests/io/parser/test_na_values.py::test_no_na_filter_on_index[pyarrow-False-index_data0] - mismatched index result
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_with_dtype_str_and_na_filter[pyarrow-True] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_with_dtype_str_and_na_filter[pyarrow-False] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\n,1\ntrue-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\nnull,1\ntrue-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\nnan,1\ntrue-None] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\nfoo,1\ntrue-foo] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\nfoo,1\ntrue-na_values4] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_cast_NA_to_bool_raises_error[pyarrow-false,1\nfoo,1\ntrue-na_values5] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_str_nan_dropped[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_bool_and_nan_to_bool[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_dict_without_dtype[pyarrow-na_values0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_na_values.py::test_na_values_dict_without_dtype[pyarrow-na_values1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_nat_parse[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_string[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_column_list[pyarrow-parse_dates0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_column_list[pyarrow-parse_dates1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_multi_index_parse_dates[pyarrow-index_col0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_multi_index_parse_dates[pyarrow-index_col1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_no_convert_thousands[pyarrow-a\n04.15.2016-kwargs0-expected0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_no_convert_thousands[pyarrow-a\n04.15.2016-kwargs1-expected1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_no_convert_thousands[pyarrow-a,b\n04.15.2016,09.16.2013-kwargs2-expected2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_no_convert_thousands[pyarrow-a,b\n04.15.2016,09.16.2013-kwargs3-expected3] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_date_parser_and_names[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_date_parser_multiindex_columns[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_replace_nans_before_parsing_dates[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_and_string_dtype[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_parse_dates_dict_format_index[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_parse_dates.py::test_from_csv_with_mixed_offsets[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_bad_quoting[pyarrow-foo-"quoting" must be an integer|Argument] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_bad_quoting[pyarrow-10-bad "quoting" value] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_null_quote_char[pyarrow--0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_null_quote_char[pyarrow--3] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_null_quote_char[pyarrow-None-0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_null_quote_char[pyarrow-None-3] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_quoting_various[pyarrow-kwargs0-exp_data0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_quoting_various[pyarrow-kwargs1-exp_data1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_quoting_various[pyarrow-kwargs2-exp_data2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_quoting_various[pyarrow-kwargs3-exp_data3] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_quoting_various[pyarrow-kwargs4-exp_data4] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_quoting.py::test_double_quote[pyarrow-False-exp_data1] - Mismatched result
XFAIL pandas/tests/io/parser/test_quoting.py::test_unbalanced_quoting[pyarrow-False] - Mismatched result
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_bug[pyarrow-skiprows0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_bug[pyarrow-6] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_deep_skip_rows[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_blank[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline[pyarrow-id,text,num_lines\n1,"line 11\nline 12",2\n2,"line 21\nline 22",2\n3,"line 31",1-kwargs0-expected0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline[pyarrow-a,b,c\n~a\n b~,~e\n d~,~f\n f~\n1,2,~12\n 13\n 14~-kwargs1-expected1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline[pyarrow-Text,url\n~example\n sentence\n one~,url1\n~example\n sentence\n two~,url2\n~example\n sentence\n three~,url3-kwargs2-expected2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_quote[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline_and_quote[pyarrow-id,text,num_lines\n1,"line \n'11' line 12",2\n2,"line \n'21' line 22",2\n3,"line \n'31' line 32",1-exp_data0] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline_and_quote[pyarrow-id,text,num_lines\n1,"line '11\n' line 12",2\n2,"line '21\n' line 22",2\n3,"line '31\n' line 32",1-exp_data1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_row_with_newline_and_quote[pyarrow-id,text,num_lines\n1,"line '11\n' \r\tline 12",2\n2,"line '21\n' \r\tline 22",2\n3,"line '31\n' \r\tline 32",1-exp_data2] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skiprows_lineterminator[python-\r] - 'CR' not respect with the Python parser yet
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skiprows_lineterminator[pyarrow-\n] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skiprows_lineterminator[pyarrow-\r\n] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skiprows_lineterminator[pyarrow-\r] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skiprows_infield_quote[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_callable[pyarrow-kwargs0-1] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_callable[pyarrow-kwargs1-foo] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_callable_not_in[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_skip_all[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_bad_callable[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_and_n_rows[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_skiprows.py::test_skip_rows_with_chunks[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/test_unsupported.py::test_invalid_file_inputs[python] - python engine supports lists.
XFAIL pandas/tests/io/parser/usecols/test_usecols_basic.py::test_usecols_name_length_conflict[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/parser/usecols/test_usecols_basic.py::test_empty_usecols[pyarrow] - pyarrow doesn't support this.
XFAIL pandas/tests/io/test_gcs.py::test_to_read_gcs[parquet] - pyarrow 17 broke the mocked filesystem
XFAIL pandas/tests/io/test_parquet.py::TestBasic::test_dtype_backend[fastparquet] - Fastparquet nullable dtype support is disabled
XFAIL pandas/tests/io/test_parquet.py::TestParquetPyArrow::test_basic - datetime_with_nat unit doesn't round-trip
XFAIL pandas/tests/io/test_sql.py::test_to_sql[multi-sqlite_adbc_conn] - 'method' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_read_iris_query_chunksize[sqlite_adbc_iris] - 'chunksize' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_read_iris_query_string_with_parameter[sqlite_adbc_iris] - 'chunksize' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_default_type_conversion[sqlite_buildin_types] - sqlite_buildin connection does not implement read_sql_table
XFAIL pandas/tests/io/test_sql.py::test_to_sql_on_public_schema[sqlite_engine] - test for public schema only specific to postgresql
XFAIL pandas/tests/io/test_sql.py::test_to_sql_on_public_schema[sqlite_conn] - test for public schema only specific to postgresql
XFAIL pandas/tests/io/test_sql.py::test_to_sql_on_public_schema[sqlite_str] - test for public schema only specific to postgresql
XFAIL pandas/tests/io/test_sql.py::test_to_sql_on_public_schema[sqlite_buildin] - test for public schema only specific to postgresql
XFAIL pandas/tests/io/test_sql.py::test_to_sql_on_public_schema[sqlite_adbc_conn] - test for public schema only specific to postgresql
XFAIL pandas/tests/io/test_sql.py::test_read_sql_iris_parameter[sqlite_adbc_iris] - 'params' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_read_sql_iris_named_parameter[sqlite_adbc_iris] - 'params' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_api_read_sql_with_chunksize_no_result[sqlite_adbc_iris] - chunksize argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_roundtrip_chunksize[sqlite_adbc_conn] - chunksize argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_custom_dateparsing_error[read_sql-types-sqlalchemy-raise-sqlite_buildin_types] - failing combination of arguments
XFAIL pandas/tests/io/test_sql.py::test_api_custom_dateparsing_error[read_sql-types-sqlalchemy-coerce-sqlite_buildin_types] - failing combination of arguments
XFAIL pandas/tests/io/test_sql.py::test_api_custom_dateparsing_error[read_sql_table-types-sqlalchemy-raise-sqlite_buildin_types] - failing combination of arguments
XFAIL pandas/tests/io/test_sql.py::test_api_custom_dateparsing_error[read_sql_table-types-sqlalchemy-coerce-sqlite_buildin_types] - failing combination of arguments
XFAIL pandas/tests/io/test_sql.py::test_api_timedelta[sqlite_adbc_conn] - sqlite ADBC driver doesn't implement timedelta
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[None-None-index-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[None-other_label-other_label-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[index_name-None-index_name-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[index_name-other_label-other_label-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[0-None-0-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label[None-0-0-sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_to_sql_index_label_multiindex[sqlite_adbc_conn] - index_label argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_api_get_schema[sqlite_adbc_conn] - 'get_schema' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_api_get_schema_with_schema[sqlite_adbc_conn] - 'get_schema' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_api_get_schema_dtypes[sqlite_adbc_conn] - 'get_schema' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_api_get_schema_keys[sqlite_adbc_conn] - 'get_schema' not implemented for ADBC drivers
XFAIL pandas/tests/io/test_sql.py::test_api_chunksize_read[sqlite_adbc_conn] - chunksize argument NotImplemented with ADBC
XFAIL pandas/tests/io/test_sql.py::test_read_table_columns[sqlite_buildin] - Not Implemented
XFAIL pandas/tests/io/test_sql.py::test_read_table_index_col[sqlite_buildin] - Not Implemented
XFAIL pandas/tests/io/test_sql.py::test_read_sql_delegate[sqlite_buildin_iris] - sqlite_buildin connection does not implement read_sql_table
XFAIL pandas/tests/io/test_sql.py::test_warning_case_insensitive_table_name[sqlite_buildin] - Does not raise warning
XFAIL pandas/tests/io/test_sql.py::test_warning_case_insensitive_table_name[sqlite_adbc_conn] - Does not raise warning
XFAIL pandas/tests/io/test_sql.py::test_column_with_percentage[sqlite_buildin] - Not Implemented
XFAIL pandas/tests/io/test_sql.py::test_sqlalchemy_default_type_conversion[sqlite_engine_types] - boolean dtype not inferred properly
XFAIL pandas/tests/io/test_sql.py::test_sqlalchemy_default_type_conversion[sqlite_conn_types] - boolean dtype not inferred properly
XFAIL pandas/tests/io/test_sql.py::test_sqlalchemy_default_type_conversion[sqlite_str_types] - boolean dtype not inferred properly
XFAIL pandas/tests/io/test_sql.py::test_default_date_load[sqlite_engine_types] - sqlite does not read date properly
XFAIL pandas/tests/io/test_sql.py::test_default_date_load[sqlite_conn_types] - sqlite does not read date properly
XFAIL pandas/tests/io/test_sql.py::test_default_date_load[sqlite_str_types] - sqlite does not read date properly
XFAIL pandas/tests/io/test_sql.py::test_to_sql_save_index[sqlite_adbc_conn] - ADBC implementation does not create index
XFAIL pandas/tests/io/test_sql.py::test_get_schema_create_table[sqlite_str] - test does not support sqlite_str fixture
XFAIL pandas/tests/io/test_sql.py::test_invalid_engine[sqlite_buildin] - SQLiteDatabase/ADBCDatabase does not raise for bad engine
XFAIL pandas/tests/io/test_sql.py::test_invalid_engine[sqlite_adbc_conn] - SQLiteDatabase/ADBCDatabase does not raise for bad engine
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[python-numpy_nullable-read_sql-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[python-numpy_nullable-read_sql_query-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[python-pyarrow-read_sql-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[python-pyarrow-read_sql_query-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[pyarrow-numpy_nullable-read_sql-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[pyarrow-numpy_nullable-read_sql_query-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[pyarrow-pyarrow-read_sql-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend[pyarrow-pyarrow-read_sql_query-sqlite_adbc_conn] - adbc does not support chunksize argument
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql_table-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql_table-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql_table-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-numpy_nullable-read_sql_table-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql_table-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql_table-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql_table-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[python-pyarrow-read_sql_table-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql_table-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql_table-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql_table-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-numpy_nullable-read_sql_table-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql_table-sqlite_engine] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql_table-sqlite_conn] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql_table-sqlite_str] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_read_sql_dtype_backend_table[pyarrow-pyarrow-read_sql_table-sqlite_buildin] - SQLite actually returns proper boolean values via read_sql_table, but before pytest refactor was skipped
XFAIL pandas/tests/io/test_sql.py::test_chunksize_empty_dtypes[sqlite_adbc_conn] - chunksize argument NotImplemented with ADBC
XFAIL pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_boxplot_vertical - Fails starting with matplotlib 3.10
XFAIL pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_boxplot_vertical_subplots - Fails starting with matplotlib version 3.10
XFAIL pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_boxplot_vertical_positions - Fails starting with matplotlib 3.10
XFAIL pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_errorbar_plot_iterator - Iterator is consumed
XFAIL pandas/tests/plotting/frame/test_frame_legend.py::TestFrameLegend::test_mixed_yerr - Open bug in matplotlib https://github.com/matplotlib/matplotlib/issues/11357
XFAIL pandas/tests/plotting/frame/test_frame_subplots.py::TestDataFramePlotsSubplots::test_subplots_timeseries_y_axis_not_supported - not support for period, categorical, datetime_mixed_tz
XFAIL pandas/tests/plotting/test_boxplot_method.py::TestDataFramePlots::test_boxplot_group_no_xlabel_ylabel[vert0] - {'orientation': 'horizontal'} fails starting with matplotlib 3.10
XFAIL pandas/tests/plotting/test_datetimelike.py::TestTSPlot::test_mixed_freq_shared_ax_twin_x_irregular_first - TODO (GH14330, GH14322)
XFAIL pandas/tests/plotting/test_datetimelike.py::TestTSPlot::test_format_date_axis - Api changed in 3.6.0
XFAIL pandas/tests/plotting/test_datetimelike.py::TestTSPlot::test_add_matplotlib_datetime64 - GH9053 matplotlib does not use ax.xaxis.converter
XFAIL pandas/tests/plotting/test_hist_method.py::TestSeriesPlots::test_hist_kde - Api changed in 3.6.0
XFAIL pandas/tests/plotting/test_hist_method.py::TestSeriesPlots::test_hist_kde_logy - Api changed in 3.6.0
XFAIL pandas/tests/plotting/test_series.py::TestSeriesPlots::test_boxplot_series - Api changed in 3.6.0
XFAIL pandas/tests/plotting/test_series.py::TestSeriesPlots::test_plot_accessor_updates_on_inplace - GH#24426, see also github.com/pandas-dev/pandas/commit/ef1bd69fa42bbed5d09dd17f08c44fc8bfc2b685#r61470674
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[min-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[max-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[first-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[last-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[sum-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[mean-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[sem-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[median-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[prod-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[var-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[std-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[ohlc-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[quantile-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[count-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[size-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_base.py::test_resample_nat_index_series[nunique-ME] - Don't know why this fails
XFAIL pandas/tests/resample/test_datetime_index.py::test_resample_median_bug_1688[s-float32] - Empty groups cause x.mean() to return float64
XFAIL pandas/tests/resample/test_datetime_index.py::test_resample_median_bug_1688[ms-float32] - Empty groups cause x.mean() to return float64
XFAIL pandas/tests/resample/test_datetime_index.py::test_resample_median_bug_1688[us-float32] - Empty groups cause x.mean() to return float64
XFAIL pandas/tests/resample/test_datetime_index.py::test_resample_median_bug_1688[ns-float32] - Empty groups cause x.mean() to return float64
XFAIL pandas/tests/resample/test_period_index.py::TestPeriodIndex::test_monthly_convention_span - Commented out for more than 3 years. Should this work?
XFAIL pandas/tests/resample/test_time_grouper.py::test_aggregate_nth - if TimeGrouper is used included, 'nth' doesn't work yet
XFAIL pandas/tests/reshape/concat/test_datetimes.py::TestTimezoneConcat::test_concat_tz_NaT[t11] - GH23037 incorrect dtype when concatenating
XFAIL pandas/tests/reshape/test_pivot.py::TestPivotTable::test_pivot_with_multiindex[True] - MultiIndexed unstack with tuple names fails with KeyError GH#19966
XFAIL pandas/tests/reshape/test_pivot.py::TestPivotTable::test_pivot_with_multiindex[False] - MultiIndexed unstack with tuple names fails with KeyError GH#19966
XFAIL pandas/tests/scalar/timedelta/test_timedelta.py::TestTimedeltas::test_hash_equality_invariance - pd.Timedelta violates the Python hash invariant (GH#44504).
XFAIL pandas/tests/scalar/timestamp/test_constructors.py::TestTimestampConstructorPositionalAndKeywordSupport::test_constructor_positional_keyword_mixed_with_tzinfo[microsecond] - GH#45307
XFAIL pandas/tests/scalar/timestamp/test_constructors.py::TestTimestampConstructorPositionalAndKeywordSupport::test_constructor_positional_keyword_mixed_with_tzinfo[second] - GH#45307
XFAIL pandas/tests/scalar/timestamp/test_constructors.py::TestTimestampConstructorPositionalAndKeywordSupport::test_constructor_positional_keyword_mixed_with_tzinfo[minute] - GH#45307
XFAIL pandas/tests/scalar/timestamp/test_timestamp.py::TestNonNano::test_cmp_cross_reso_reversed_dt64 - Dispatches to np.datetime64 which is wrong
XFAIL pandas/tests/series/methods/test_astype.py::TestAstypeString::test_astype_string_to_extension_dtype_roundtrip[string[python]-data0-boolean] - TODO StringArray.astype() with missing values #GH40566
XFAIL pandas/tests/series/methods/test_astype.py::TestAstypeString::test_astype_string_to_extension_dtype_roundtrip[string[pyarrow]-data0-boolean] - TODO StringArray.astype() with missing values #GH40566
XFAIL pandas/tests/series/methods/test_info.py::test_info_memory_usage_deep_pypy - on PyPy deep=True does not change result
XFAIL pandas/tests/series/methods/test_interpolate.py::TestSeriesInterpolateData::test_interpolate_period_values - EA.fillna does not handle 'linear' method
XFAIL pandas/tests/series/methods/test_interpolate.py::TestSeriesInterpolateData::test_interpolate_timedelta_index[zero] - zero interpolation is not supported for TimedeltaIndex
XFAIL pandas/tests/series/methods/test_interpolate.py::TestSeriesInterpolateData::test_interpolate_timedelta_index[cubic] - cubic interpolation is not supported for TimedeltaIndex
XFAIL pandas/tests/series/methods/test_map.py::test_map_empty[tuples] - Initializing a Series from a MultiIndex is not supported
XFAIL pandas/tests/series/methods/test_map.py::test_map_empty[mi-with-dt64tz-level] - Initializing a Series from a MultiIndex is not supported
XFAIL pandas/tests/series/methods/test_map.py::test_map_empty[multi] - Initializing a Series from a MultiIndex is not supported
XFAIL pandas/tests/series/test_arithmetic.py::test_none_comparison[numexpr-empty] - Test doesn't make sense on empty data
XFAIL pandas/tests/series/test_arithmetic.py::test_none_comparison[python-empty] - Test doesn't make sense on empty data
XFAIL pandas/tests/series/test_constructors.py::TestSeriesConstructors::test_construct_from_ints_including_iNaT_scalar_period_dtype - PeriodDtype Series not supported yet
XFAIL pandas/tests/series/test_constructors.py::TestSeriesConstructors::test_constructor_dtype_timedelta_ns_s - Not clear what the correct expected behavior should be with integers now that we support non-nano. ATM (2022-10-08) we treat ints as nanoseconds, then cast to the requested dtype. xref #48312
XFAIL pandas/tests/series/test_constructors.py::TestSeriesConstructors::test_constructor_dtype_timedelta_ns_s_astype_int64 - Not clear what the correct expected behavior should be with integers now that we support non-nano. ATM (2022-10-08) we treat ints as nanoseconds, then cast to the requested dtype. xref #48312
XFAIL pandas/tests/series/test_missing.py::TestSeriesMissingData::test_logical_range_select - Chained inequality raises when trying to define 'selector'
XFAIL pandas/tests/series/test_ufunc.py::TestNumpyReductions::test_multiply[Sparse[int64, 0]-Index] - SparseArray has no 'prod'
XFAIL pandas/tests/series/test_ufunc.py::TestNumpyReductions::test_multiply[Sparse[int64, 0]-Series] - SparseArray has no 'prod'
XFAIL pandas/tests/series/test_ufunc.py::TestNumpyReductions::test_multiply[Sparse[int64, 0]-DataFrame] - SparseArray has no 'prod'
XFAIL pandas/tests/series/test_ufunc.py::TestNumpyReductions::test_multiply[Sparse[int64, 0]-array] - SparseArray has no 'prod'
XFAIL pandas/tests/series/test_ufunc.py::test_np_fix - see https://github.com/pandas-dev/pandas/pull/51082
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty0-get_dummies-object] - Need to fortify get_dummies corner cases
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-partition1-object] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-partition1-category] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-rpartition1-object] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-rpartition1-category] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-split1-object] - Split fails on empty Series when expand=True
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-split1-category] - Split fails on empty Series when expand=True
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-get_dummies-object] - Need to fortify get_dummies corner cases
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-get_dummies-category] - Need to fortify get_dummies corner cases
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-partition2-object] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-partition2-category] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-rpartition2-object] - Method cannot deal with empty Index
XFAIL pandas/tests/strings/test_api.py::test_api_per_method[index-empty1-rpartition2-category] - Method cannot deal with empty Index
XFAIL pandas/tests/test_common.py::test_maybe_match_name[left11-right11-expected11] - Not checking for matching NAs inside tuples.
XFAIL pandas/tests/tools/test_to_datetime.py::TestToDatetimeMisc::test_to_datetime_respects_dayfirst[True] - fails to enforce dayfirst=True, which would raise
XFAIL pandas/tests/tools/test_to_datetime.py::TestToDatetimeMisc::test_to_datetime_respects_dayfirst[False] - fails to enforce dayfirst=True, which would raise
XFAIL pandas/tests/tools/test_to_numeric.py::test_period[transform_assert_equal1] - Missing PeriodDtype support in to_numeric
XFAIL pandas/tests/tools/test_to_numeric.py::test_period[transform_assert_equal2] - Missing PeriodDtype support in to_numeric
XFAIL pandas/tests/tseries/offsets/test_offsets.py::TestDateOffset::test_constructor[millisecond] - Constructing DateOffset object with `millisecond` is not yet supported.
XFAIL pandas/tests/tseries/offsets/test_offsets.py::test_valid_relativedelta_kwargs[millisecond] - Constructing DateOffset object with `millisecond` is not yet supported.
XFAIL pandas/tests/tslibs/test_parsing.py::test_hypothesis_delimited_date[%m %Y-True-.] - parse_datetime_string cannot reliably tell whether e.g. %m.%Y is a float or a date
XFAIL pandas/tests/tslibs/test_parsing.py::test_hypothesis_delimited_date[%m %Y-False-.] - parse_datetime_string cannot reliably tell whether e.g. %m.%Y is a float or a date
XFAIL pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_check_exact_index_default[left_idx3-right_idx3] - check_exact_index defaults to True
XFAIL pandas/tests/util/test_assert_series_equal.py::test_assert_series_equal_check_exact_index_default[left_idx4-right_idx4] - check_exact_index defaults to True
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data1-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data5-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data5-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data6-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data6-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data7-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data7-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data11-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data15-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data15-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data16-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data16-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data17-0-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_expanding.py::test_expanding_apply_consistency_sum_nans[all_data17-2-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data1-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data1-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data5-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data5-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data5-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data5-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data6-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data6-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data6-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data6-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data7-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data7-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data7-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data7-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data11-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data11-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data15-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data15-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data15-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data15-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data16-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data16-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data16-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data16-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data17-rolling_consistency_cases0-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data17-rolling_consistency_cases0-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data17-rolling_consistency_cases1-True-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/moments/test_moments_consistency_rolling.py::test_rolling_apply_consistency_sum[all_data17-rolling_consistency_cases1-False-sum] - np.sum has different behavior with NaNs
XFAIL pandas/tests/window/test_expanding.py::test_empty_df_expanding[ls] - GH#16425 expanding with offset not supported
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-True-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-True-False-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-True-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-True-True-False-False-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-True-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-True-False-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-True-halflife_with_times2-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-1 day-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-1 day-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-halflife_with_times1-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-halflife_with_times1-obj1]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-halflife_with_times2-obj0]
XFAIL pandas/tests/window/test_online.py::TestEWM::test_update_times_mean[False-False-True-False-False-halflife_with_times2-obj1]
XPASS pandas/tests/computation/test_eval.py::TestAlignment::test_basic_series_frame_alignment[numexpr-python-i-s-index] - Flaky column ordering when engine=numexpr, parser=python, index_name=index, r_idx_type=i, c_idx_type=s
XPASS pandas/tests/computation/test_eval.py::TestAlignment::test_basic_series_frame_alignment[numexpr-pandas-i-s-index] - Flaky column ordering when engine=numexpr, parser=pandas, index_name=index, r_idx_type=i, c_idx_type=s
XPASS pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetitemCopyViewSemantics::test_setitem_not_operating_inplace[1-5-indexer2] - Boolean indexer incorrectly setting inplace
XPASS pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetitemCopyViewSemantics::test_setitem_not_operating_inplace[1.0-5.0-indexer2] - Boolean indexer incorrectly setting inplace
XPASS pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetitemCopyViewSemantics::test_setitem_not_operating_inplace[value2-set_value2-indexer2] - Boolean indexer incorrectly setting inplace
XPASS pandas/tests/frame/indexing/test_setitem.py::TestDataFrameSetitemCopyViewSemantics::test_setitem_not_operating_inplace[a-b-indexer2] - Boolean indexer incorrectly setting inplace
XPASS pandas/tests/frame/methods/test_nlargest.py::TestNLargestNSmallest::test_nlargest_n_duplicate_index[1-order2] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_nlargest.py::TestNLargestNSmallest::test_nlargest_n_duplicate_index[2-order2] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_nlargest.py::TestNLargestNSmallest::test_nlargest_n_duplicate_index[3-order2] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_nlargest.py::TestNLargestNSmallest::test_nlargest_n_duplicate_index[4-order2] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_nlargest.py::TestNLargestNSmallest::test_nlargest_n_duplicate_index[5-order4] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_index_level_and_column_label[df_idx0-inner-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-inner-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-inner-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-A-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-A-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names3-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names3-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names4-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names4-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names5-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names5-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names6-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names6-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names7-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx0-sort_names7-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-inner-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-inner-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-A-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-A-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names3-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names3-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names4-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names4-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names5-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names5-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names6-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names6-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names7-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/frame/methods/test_sort_values.py::TestSortValuesLevelAsStr::test_sort_column_level_and_index_label[df_idx1-sort_names7-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_basic - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-True-True-proportion-column] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-True-True-proportion-array] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-True-True-proportion-function] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-False-True-proportion-column] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-False-True-proportion-array] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[True-True-True-False-True-proportion-function] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-True-True-proportion-column] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-True-True-proportion-array] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-True-True-proportion-function] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-False-True-proportion-column] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-False-True-proportion-array] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_against_frame_and_seriesgroupby[False-True-True-False-True-proportion-function] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_dropna_combinations[False-False-expected_rows0-expected_values0] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_dropna_combinations[False-True-expected_rows1-expected_values1] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[True-False-count-expected_data0-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[True-False-count-expected_data0-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[True-True-proportion-expected_data1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[True-True-proportion-expected_data1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[False-False-count-expected_data0-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[False-False-count-expected_data0-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[False-True-proportion-expected_data1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_with_only_observed_categories[False-True-proportion-expected_data1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_true[True-False-count-expected_data0] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_true[True-True-proportion-expected_data1] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_true[False-False-count-expected_data0] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_true[False-True-proportion-expected_data1] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_false[True-False-count-expected_data0] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_false[True-True-proportion-expected_data1] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_false[False-False-count-expected_data0] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_single_grouper_observed_false[False-True-proportion-expected_data1] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[True-False-count-expected_data0-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[True-False-count-expected_data0-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[True-True-proportion-expected_data1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[True-True-proportion-expected_data1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[False-False-count-expected_data0-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[False-False-count-expected_data0-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[False-True-proportion-expected_data1-False] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/groupby/methods/test_value_counts.py::test_categorical_non_groupers[False-True-proportion-expected_data1-True] - pandas default unstable sorting of duplicatesissue with numpy>=1.25 with AVX instructions
XPASS pandas/tests/indexes/datetimes/test_constructors.py::TestDatetimeIndex::test_dti_constructor_with_non_nano_now_today - result may not exactly match [now, today]
XPASS pandas/tests/indexes/test_common.py::test_sort_values_with_missing[categorical-first] - missing value sorting order not well-defined
XPASS pandas/tests/indexes/test_common.py::test_sort_values_with_missing[categorical-last] - missing value sorting order not well-defined
XPASS pandas/tests/io/parser/dtypes/test_categorical.py::test_categorical_dtype_single[pyarrow-dtype0] - Flaky test sometimes gives object dtype instead of Categorical
XPASS pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_area_lim[True] - 2020-12-01 this has been failing periodically on the ymin==0 assertion for a week or so.
XPASS pandas/tests/plotting/frame/test_frame.py::TestDataFramePlots::test_area_lim[False] - 2020-12-01 this has been failing periodically on the ymin==0 assertion for a week or so.
XPASS pandas/tests/plotting/frame/test_frame_subplots.py::TestDataFramePlotsSubplots::test_bar_log_no_subplots - Weird rounding problems
XPASS pandas/tests/plotting/frame/test_frame_subplots.py::TestDataFramePlotsSubplots::test_bar_log_subplots - Weird rounding problems
XPASS pandas/tests/plotting/test_series.py::TestSeriesPlots::test_bar_log[yaxis-bar] - Weird rounding problems
XPASS pandas/tests/plotting/test_series.py::TestSeriesPlots::test_bar_log[xaxis-barh] - Weird rounding problems
XPASS pandas/tests/plotting/test_series.py::TestSeriesPlots::test_bar_log_kind_bar[yaxis-bar-get_ylim] - Weird rounding problems
XPASS pandas/tests/plotting/test_series.py::TestSeriesPlots::test_bar_log_kind_bar[xaxis-barh-get_xlim] - Weird rounding problems
= 15 failed, 224074 passed, 6586 skipped, 4088 deselected, 1854 xfailed, 95 xpassed, 31 warnings, 41 errors in 2706.37s (0:45:06) =
